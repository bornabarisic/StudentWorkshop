
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c8  080064c8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080064d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000009c  0800656c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  0800656c  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5a4  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002baa  00000000  00000000  0002e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00031260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a13  00000000  00000000  00031f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d8f  00000000  00000000  000329a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001361b  00000000  00000000  00057732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3f5  00000000  00000000  0006ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f04  00000000  00000000  00145144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00149048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006248 	.word	0x08006248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08006248 	.word	0x08006248

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b990 	b.w	8000dc4 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f826 	bl	8000afc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__aeabi_f2ulz>:
 8000abc:	b5d0      	push	{r4, r6, r7, lr}
 8000abe:	f7ff fd5b 	bl	8000578 <__aeabi_f2d>
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__aeabi_f2ulz+0x38>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4606      	mov	r6, r0
 8000ac8:	460f      	mov	r7, r1
 8000aca:	f7ff fdad 	bl	8000628 <__aeabi_dmul>
 8000ace:	f7ff ffbd 	bl	8000a4c <__aeabi_d2uiz>
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	f7ff fd2e 	bl	8000534 <__aeabi_ui2d>
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <__aeabi_f2ulz+0x3c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f7ff fda4 	bl	8000628 <__aeabi_dmul>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	4639      	mov	r1, r7
 8000ae8:	f7ff fbe6 	bl	80002b8 <__aeabi_dsub>
 8000aec:	f7ff ffae 	bl	8000a4c <__aeabi_d2uiz>
 8000af0:	4621      	mov	r1, r4
 8000af2:	bdd0      	pop	{r4, r6, r7, pc}
 8000af4:	3df00000 	.word	0x3df00000
 8000af8:	41f00000 	.word	0x41f00000

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <InitializeAHT20>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]

	HAL_Delay(20);
 8000dd2:	2014      	movs	r0, #20
 8000dd4:	f001 fa0c 	bl	80021f0 <HAL_Delay>

	aht20_state = InitializeAHT20I2C();
 8000dd8:	f000 f96e 	bl	80010b8 <InitializeAHT20I2C>
 8000ddc:	6078      	str	r0, [r7, #4]
	//	ASSERT(ahr20_state != AHT20_OK);

	HAL_Delay(40);
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	f001 fa06 	bl	80021f0 <HAL_Delay>

	/* Initialize the sensor until calibration is successful */
	while(AHT20_checkCalibration() == false)
 8000de4:	e002      	b.n	8000dec <InitializeAHT20+0x24>
	{
		aht20_state = AHT20_sensorInit();
 8000de6:	f000 f80f 	bl	8000e08 <AHT20_sensorInit>
 8000dea:	6078      	str	r0, [r7, #4]
	while(AHT20_checkCalibration() == false)
 8000dec:	f000 f82a 	bl	8000e44 <AHT20_checkCalibration>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f4      	bne.n	8000de6 <InitializeAHT20+0x1e>
	}

	//	ASSERT(aht20_state != AHT20_OK);
	(void)aht20_state; // Adding this to avoid warnings until assert is implemented

}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <AHT20_sensorInit>:

static int AHT20_sensorInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	/* reg[3] holds the initialization sequence */
	int aht20_state = AHT20_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]

	uint8_t reg[3] = {0xBE, 0x08, 0x00};
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <AHT20_sensorInit+0x38>)
 8000e14:	463b      	mov	r3, r7
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	8019      	strh	r1, [r3, #0]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	0c12      	lsrs	r2, r2, #16
 8000e20:	701a      	strb	r2, [r3, #0]
	aht20_state = TransmitI2CDataToAHT20(reg, 3);
 8000e22:	463b      	mov	r3, r7
 8000e24:	2103      	movs	r1, #3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f98e 	bl	8001148 <TransmitI2CDataToAHT20>
 8000e2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(10); // Wait 10ms for initialization
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f001 f9de 	bl	80021f0 <HAL_Delay>

	return aht20_state;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08006260 	.word	0x08006260

08000e44 <AHT20_checkCalibration>:

static bool AHT20_checkCalibration(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
    uint8_t statusReg = 0x71;
 8000e4a:	2371      	movs	r3, #113	; 0x71
 8000e4c:	71fb      	strb	r3, [r7, #7]
    uint8_t cal; // Result byte
    TransmitI2CDataToAHT20(&statusReg, 1);
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f978 	bl	8001148 <TransmitI2CDataToAHT20>
    ReceiveI2CDataFromAHT20(&cal, 1);
 8000e58:	1dbb      	adds	r3, r7, #6
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f98f 	bl	8001180 <ReceiveI2CDataFromAHT20>

    return ((cal >> 3) & 1) == 1; // Check 4th bit is equal to 1
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <AHT20_triggerMeasurement>:

void AHT20_triggerMeasurement(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]

    while(AHT20_checkCalibration() == false) {
 8000e8a:	e002      	b.n	8000e92 <AHT20_triggerMeasurement+0x12>
    	aht20_state = AHT20_sensorInit();
 8000e8c:	f7ff ffbc 	bl	8000e08 <AHT20_sensorInit>
 8000e90:	6178      	str	r0, [r7, #20]
    while(AHT20_checkCalibration() == false) {
 8000e92:	f7ff ffd7 	bl	8000e44 <AHT20_checkCalibration>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f083 0301 	eor.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f4      	bne.n	8000e8c <AHT20_triggerMeasurement+0xc>
    }

    uint8_t measureCommand[3] = {0xAC, 0x33, 0x00};
 8000ea2:	4a3d      	ldr	r2, [pc, #244]	; (8000f98 <AHT20_triggerMeasurement+0x118>)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	8019      	strh	r1, [r3, #0]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	0c12      	lsrs	r2, r2, #16
 8000eb2:	701a      	strb	r2, [r3, #0]
    uint8_t status; // result status
    uint8_t data[6]; // data array

    TransmitI2CDataToAHT20(measureCommand, 3);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2103      	movs	r1, #3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f944 	bl	8001148 <TransmitI2CDataToAHT20>
    HAL_Delay(80); // Wait for measurement
 8000ec0:	2050      	movs	r0, #80	; 0x50
 8000ec2:	f001 f995 	bl	80021f0 <HAL_Delay>

    ReceiveI2CDataFromAHT20(&status, 1); // Read status byte
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f958 	bl	8001180 <ReceiveI2CDataFromAHT20>

    // Wait for status to be ready before continuing
    while (((status >> 7) & 1) != 0) {
 8000ed0:	e004      	b.n	8000edc <AHT20_triggerMeasurement+0x5c>
        //printf("Waiting for read to complete\n");
        ReceiveI2CDataFromAHT20(&status, 1);
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f952 	bl	8001180 <ReceiveI2CDataFromAHT20>
    while (((status >> 7) & 1) != 0) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	09db      	lsrs	r3, r3, #7
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f3      	bne.n	8000ed2 <AHT20_triggerMeasurement+0x52>
    }

    aht20_state = ReceiveI2CDataFromAHT20(data, 6); // Read all data
 8000eea:	463b      	mov	r3, r7
 8000eec:	2106      	movs	r1, #6
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f946 	bl	8001180 <ReceiveI2CDataFromAHT20>
 8000ef4:	6178      	str	r0, [r7, #20]
    //	ASSERT(aht20_state != AHT20_OK);

    // Convert data for reading and store in variable

    uint32_t humidity = data[1];
 8000ef6:	787b      	ldrb	r3, [r7, #1]
 8000ef8:	613b      	str	r3, [r7, #16]
    humidity <<= 8;
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	613b      	str	r3, [r7, #16]
    humidity |= data[2];
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	461a      	mov	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
    humidity <<= 4;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
    humidity |= data[3] >> 4;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
    AHT20_interface.hum_val = ((float)humidity * 100) / 1048576;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f9c <AHT20_triggerMeasurement+0x11c>
 8000f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f30:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000fa0 <AHT20_triggerMeasurement+0x120>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <AHT20_triggerMeasurement+0x124>)
 8000f3a:	edc3 7a04 	vstr	s15, [r3, #16]

    uint32_t temp = data[3] & 0x0F;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	60fb      	str	r3, [r7, #12]
    temp |= data[4];
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	60fb      	str	r3, [r7, #12]
    temp |= data[5];
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
    AHT20_interface.temp_val = ((float)temp * 200 / 1048576) - 50;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f70:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000fa8 <AHT20_triggerMeasurement+0x128>
 8000f74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f78:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000fa0 <AHT20_triggerMeasurement+0x120>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fac <AHT20_triggerMeasurement+0x12c>
 8000f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <AHT20_triggerMeasurement+0x124>)
 8000f8a:	edc3 7a03 	vstr	s15, [r3, #12]

    (void)aht20_state; // Adding this to avoid warnings until assert is implemented
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08006264 	.word	0x08006264
 8000f9c:	42c80000 	.word	0x42c80000
 8000fa0:	49800000 	.word	0x49800000
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	43480000 	.word	0x43480000
 8000fac:	42480000 	.word	0x42480000

08000fb0 <GetTemperatureValue>:

static int GetTemperatureValue(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 8000fb4:	f7ff ff64 	bl	8000e80 <AHT20_triggerMeasurement>

	return AHT20_interface.temp_val;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <GetTemperatureValue+0x1c>)
 8000fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc2:	ee17 3a90 	vmov	r3, s15
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <GetHumidityValue>:

static int GetHumidityValue(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 8000fd4:	f7ff ff54 	bl	8000e80 <AHT20_triggerMeasurement>

	return AHT20_interface.hum_val;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <GetHumidityValue+0x1c>)
 8000fda:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe2:	ee17 3a90 	vmov	r3, s15
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <GetAHT20Interface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

AHT20_t *GetAHT20Interface(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	return &AHT20_interface;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <GetAHT20Interface+0x10>)
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000000 	.word	0x20000000

08001004 <InitializeAHT20I2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20I2CGPIOPins(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a26      	ldr	r2, [pc, #152]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
	//   PC9     ------> I2C3_SDA
	//   PA8     ------> I2C3_SCL

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SDA_PIN_AHT20;
 8001042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001046:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8001054:	2304      	movs	r3, #4
 8001056:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SDA, &gpio);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	4814      	ldr	r0, [pc, #80]	; (80010b0 <InitializeAHT20I2CGPIOPins+0xac>)
 8001060:	f001 fcb8 	bl	80029d4 <HAL_GPIO_Init>

	gpio.Pin 		= I2C_SCL_PIN_AHT20;
 8001064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001068:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SCL, &gpio);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <InitializeAHT20I2CGPIOPins+0xb0>)
 8001082:	f001 fca7 	bl	80029d4 <HAL_GPIO_Init>

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <InitializeAHT20I2CGPIOPins+0xa8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020000 	.word	0x40020000

080010b8 <InitializeAHT20I2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeAHT20I2C(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	InitializeAHT20I2CGPIOPins();
 80010be:	f7ff ffa1 	bl	8001004 <InitializeAHT20I2CGPIOPins>

	__I2C3_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <InitializeAHT20I2C+0x80>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <InitializeAHT20I2C+0x80>)
 80010cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <InitializeAHT20I2C+0x80>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

	i2chandle2.Mode 				= HAL_I2C_MODE_MASTER;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <InitializeAHT20I2C+0x84>)
 80010e0:	2210      	movs	r2, #16
 80010e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle2.Instance 			= I2C3;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <InitializeAHT20I2C+0x84>)
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <InitializeAHT20I2C+0x88>)
 80010ea:	601a      	str	r2, [r3, #0]
	i2chandle2.Init.ClockSpeed 		= 100000;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <InitializeAHT20I2C+0x84>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <InitializeAHT20I2C+0x8c>)
 80010f0:	605a      	str	r2, [r3, #4]
	i2chandle2.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <InitializeAHT20I2C+0x84>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
	i2chandle2.Init.OwnAddress1 	= 0x00;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <InitializeAHT20I2C+0x84>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
	i2chandle2.Init.OwnAddress2		= 0x00;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <InitializeAHT20I2C+0x84>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
	i2chandle2.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <InitializeAHT20I2C+0x84>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	611a      	str	r2, [r3, #16]
	i2chandle2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <InitializeAHT20I2C+0x84>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
	i2chandle2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <InitializeAHT20I2C+0x84>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
	i2chandle2.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <InitializeAHT20I2C+0x84>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle2) != HAL_OK)
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <InitializeAHT20I2C+0x84>)
 8001120:	f001 fe1e 	bl	8002d60 <HAL_I2C_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <InitializeAHT20I2C+0x76>
	{
		return AHT20_ERROR_I2C_NOT_INITALIZED;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <InitializeAHT20I2C+0x78>
	}

	return AHT20_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	200000b8 	.word	0x200000b8
 8001140:	40005c00 	.word	0x40005c00
 8001144:	000186a0 	.word	0x000186a0

08001148 <TransmitI2CDataToAHT20>:

int TransmitI2CDataToAHT20(uint8_t *pdata, uint8_t length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&i2chandle2,
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	b29b      	uxth	r3, r3
 8001158:	2264      	movs	r2, #100	; 0x64
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	2170      	movs	r1, #112	; 0x70
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <TransmitI2CDataToAHT20+0x34>)
 8001162:	f001 ff41 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <TransmitI2CDataToAHT20+0x28>
								(I2C_SLAVE_ADDRESS_AHT20 << 1),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 800116c:	2303      	movs	r3, #3
 800116e:	e000      	b.n	8001172 <TransmitI2CDataToAHT20+0x2a>
	}

	return AHT20_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000b8 	.word	0x200000b8

08001180 <ReceiveI2CDataFromAHT20>:

int ReceiveI2CDataFromAHT20(uint8_t *pdata, uint8_t length)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Receive(&i2chandle2,
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	b29b      	uxth	r3, r3
 8001190:	2264      	movs	r2, #100	; 0x64
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	2171      	movs	r1, #113	; 0x71
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <ReceiveI2CDataFromAHT20+0x34>)
 800119a:	f002 f823 	bl	80031e4 <HAL_I2C_Master_Receive>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <ReceiveI2CDataFromAHT20+0x28>
								((I2C_SLAVE_ADDRESS_AHT20 << 1) | 0x01),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e000      	b.n	80011aa <ReceiveI2CDataFromAHT20+0x2a>
	}

	return AHT20_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000b8 	.word	0x200000b8

080011b8 <AHT20Init>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void AHT20Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 80011be:	f7ff ff17 	bl	8000ff0 <GetAHT20Interface>
 80011c2:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	paht20->init();
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4798      	blx	r3
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <AHT20_GetTemp>:

int AHT20_GetTemp(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 80011d8:	f7ff ff0a 	bl	8000ff0 <GetAHT20Interface>
 80011dc:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	return paht20->get_temp();
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4798      	blx	r3
 80011e4:	4603      	mov	r3, r0

}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	460a      	mov	r2, r1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	4613      	mov	r3, r2
 80011fc:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 8001202:	2300      	movs	r3, #0
 8001204:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <SendToLCD+0x24>
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 8001210:	e009      	b.n	8001226 <SendToLCD+0x38>
			buffer[0] = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	727b      	strb	r3, [r7, #9]
		break;
 800121a:	e004      	b.n	8001226 <SendToLCD+0x38>
			buffer[0] = 0x40;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	727b      	strb	r3, [r7, #9]
		break;
 8001224:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f938 	bl	80014a0 <TransmitI2CDataToLCD>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 8001236:	2303      	movs	r3, #3
 8001238:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <InitializeLCD>:

static void InitializeLCD(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 800124e:	f000 f8df 	bl	8001410 <InitializeLCDI2C>
 8001252:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8001254:	2101      	movs	r1, #1
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ffc9 	bl	80011ee <SendToLCD>
 800125c:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 ffc6 	bl	80021f0 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8001264:	2138      	movs	r1, #56	; 0x38
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ffc1 	bl	80011ee <SendToLCD>
 800126c:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f000 ffbe 	bl	80021f0 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8001274:	210c      	movs	r1, #12
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ffb9 	bl	80011ee <SendToLCD>
 800127c:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f000 ffb6 	bl	80021f0 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8001284:	2106      	movs	r1, #6
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ffb1 	bl	80011ee <SendToLCD>
 800128c:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f000 ffae 	bl	80021f0 <HAL_Delay>

//	ASSERT(lcd_state != LCD_OK);

	HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001298:	f000 ffaa 	bl	80021f0 <HAL_Delay>

	lcd_state = ClearLCD();
 800129c:	f000 f860 	bl	8001360 <ClearLCD>
 80012a0:	6078      	str	r0, [r7, #4]

//	ASSERT(lcd_state != LCD_OK);
	(void)lcd_state;
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <SendDataToLCD>:

static int SendDataToLCD(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
	int i = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 80012ba:	e011      	b.n	80012e0 <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <SendDataToLCD+0x54>)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff ff91 	bl	80011ee <SendToLCD>
 80012cc:	6078      	str	r0, [r7, #4]
		i++;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	dc08      	bgt.n	80012f2 <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <SendDataToLCD+0x54>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e7      	bne.n	80012bc <SendDataToLCD+0x10>
 80012ec:	e002      	b.n	80012f4 <SendDataToLCD+0x48>
			break;
 80012ee:	bf00      	nop
 80012f0:	e000      	b.n	80012f4 <SendDataToLCD+0x48>
		{
			break;
 80012f2:	bf00      	nop
		}
	}

	return lcd_state;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000014 	.word	0x20000014

08001304 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	72fb      	strb	r3, [r7, #11]

	switch (row)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <MoveLCDCursor+0x20>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d007      	beq.n	8001332 <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 8001322:	e00d      	b.n	8001340 <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132c:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 800132e:	72fb      	strb	r3, [r7, #11]
		break;
 8001330:	e006      	b.n	8001340 <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b25b      	sxtb	r3, r3
 8001336:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800133a:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 800133c:	72fb      	strb	r3, [r7, #11]
		break;
 800133e:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	4619      	mov	r1, r3
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ff52 	bl	80011ee <SendToLCD>
 800134a:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 8001352:	2305      	movs	r3, #5
 8001354:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <ClearLCD>:

static int ClearLCD(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 8001366:	2101      	movs	r1, #1
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff40 	bl	80011ee <SendToLCD>
 800136e:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 ff3d 	bl	80021f0 <HAL_Delay>

	if (lcd_state != LCD_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 800137c:	2304      	movs	r3, #4
 800137e:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	return &lcd_interface;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <GetLCDInterface+0x10>)
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000014 	.word	0x20000014

080013a0 <InitializeLCDI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeLCDI2CGPIOPins(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a16      	ldr	r2, [pc, #88]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN_LCD | I2C_SDA_PIN_LCD;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_LCD, &gpio);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <InitializeLCDI2CGPIOPins+0x6c>)
 80013e0:	f001 faf8 	bl	80029d4 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <InitializeLCDI2CGPIOPins+0x68>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	InitializeLCDI2CGPIOPins();
 8001416:	f7ff ffc3 	bl	80013a0 <InitializeLCDI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <InitializeLCDI2C+0x80>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <InitializeLCDI2C+0x80>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <InitializeLCDI2C+0x80>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <InitializeLCDI2C+0x84>)
 8001438:	2210      	movs	r2, #16
 800143a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <InitializeLCDI2C+0x84>)
 8001440:	4a15      	ldr	r2, [pc, #84]	; (8001498 <InitializeLCDI2C+0x88>)
 8001442:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <InitializeLCDI2C+0x84>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <InitializeLCDI2C+0x8c>)
 8001448:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <InitializeLCDI2C+0x84>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <InitializeLCDI2C+0x84>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <InitializeLCDI2C+0x84>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <InitializeLCDI2C+0x84>)
 800145e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001462:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <InitializeLCDI2C+0x84>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <InitializeLCDI2C+0x84>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <InitializeLCDI2C+0x84>)
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <InitializeLCDI2C+0x84>)
 8001478:	f001 fc72 	bl	8002d60 <HAL_I2C_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	2000010c 	.word	0x2000010c
 8001498:	40005400 	.word	0x40005400
 800149c:	000186a0 	.word	0x000186a0

080014a0 <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2302      	movs	r3, #2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	217c      	movs	r1, #124	; 0x7c
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <TransmitI2CDataToLCD+0x2c>)
 80014b4:	f001 fd98 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS_LCD,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 80014be:	2303      	movs	r3, #3
 80014c0:	e000      	b.n	80014c4 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000010c 	.word	0x2000010c

080014d0 <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 80014d6:	f7ff ff59 	bl	800138c <GetLCDInterface>
 80014da:	6078      	str	r0, [r7, #4]

//	ASSERT(plcd == NULL);

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2210      	movs	r2, #16
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fecf 	bl	8005286 <memset>

	plcd->init();
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4798      	blx	r3
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 8001508:	f7ff ff40 	bl	800138c <GetLCDInterface>
 800150c:	6138      	str	r0, [r7, #16]

//	ASSERT(plcd == NULL);

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b01      	cmp	r3, #1
 8001512:	dc02      	bgt.n	800151a <LCDWriteData+0x22>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	dd08      	ble.n	800152c <LCDWriteData+0x34>
		 (col >= LCD_MAX_NUMBER_OF_COLUMNS) )
	{
		LOG_ERR("Krivo postavljeni red ili stupac"
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <LCDWriteData+0x6c>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4911      	ldr	r1, [pc, #68]	; (8001568 <LCDWriteData+0x70>)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <LCDWriteData+0x74>)
 8001526:	f003 fd83 	bl	8005030 <iprintf>
				"\n\tRedak: %d"
				"\n\rStupac: %d",
				row, col);
		return;
 800152a:	e017      	b.n	800155c <LCDWriteData+0x64>
	}

	sprintf(plcd->buffer, pdata);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fe45 	bl	80051c0 <siprintf>

	//lcd_state = plcd->clear_data();
	lcd_state = plcd->move_cursor(row, col);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	4798      	blx	r3
 8001540:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4798      	blx	r3
 8001548:	6178      	str	r0, [r7, #20]

	if (lcd_state != LCD_OK)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <LCDWriteData+0x64>
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <LCDWriteData+0x6c>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4904      	ldr	r1, [pc, #16]	; (8001568 <LCDWriteData+0x70>)
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <LCDWriteData+0x78>)
 8001558:	f003 fd6a 	bl	8005030 <iprintf>
				"\n\tError: %d",
				lcd_state);
	}
}
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08006278 	.word	0x08006278
 8001568:	08006288 	.word	0x08006288
 800156c:	0800628c 	.word	0x0800628c
 8001570:	080062d4 	.word	0x080062d4

08001574 <LCDClearScreen>:

void LCDClearScreen(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
	lcd_t *plcd = GetLCDInterface();
 800157e:	f7ff ff05 	bl	800138c <GetLCDInterface>
 8001582:	6038      	str	r0, [r7, #0]

//	ASSERT(plcd == NULL);

	lcd_state = plcd->clear_data();
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	4798      	blx	r3
 800158a:	6078      	str	r0, [r7, #4]

	if (lcd_state != LCD_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <LCDClearScreen+0x2a>
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <LCDClearScreen+0x34>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4905      	ldr	r1, [pc, #20]	; (80015ac <LCDClearScreen+0x38>)
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <LCDClearScreen+0x3c>)
 800159a:	f003 fd49 	bl	8005030 <iprintf>
				"\n\tError: %d",
				lcd_state);
	}
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08006278 	.word	0x08006278
 80015ac:	08006288 	.word	0x08006288
 80015b0:	080062d4 	.word	0x080062d4

080015b4 <FlashWrite>:
  * @brief  Function for writing a value to flash
  * @param  val - Value to be written in flash
  * @retval 0 if successful
  */
int FlashWrite(float input_val)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	ed87 0a01 	vstr	s0, [r7, #4]
	int retval = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FirstSector = 0, NbOfSectors = 0, SECTORError = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
	__IO float data32 = 0 , MemoryProgramStatus = 0;
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]

    /* Check how many values are already written and fill the array with them */

	uint32_t Address = FLASH_USER_START_ADDR;
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <FlashWrite+0x1d8>)
 80015dc:	623b      	str	r3, [r7, #32]
	float* values_ptr = &values[0];
 80015de:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <FlashWrite+0x1dc>)
 80015e0:	61fb      	str	r3, [r7, #28]

	while (Address < FLASH_VALUES_END_ADDR)
 80015e2:	e012      	b.n	800160a <FlashWrite+0x56>
	  {
	    data32 = *(__IO float *)Address;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]

	    if (data32 != 0)
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d00d      	beq.n	8001614 <FlashWrite+0x60>
	    {
	      *values_ptr = data32;
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	601a      	str	r2, [r3, #0]
	      values_ptr++;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	61fb      	str	r3, [r7, #28]
	      Address = Address + 4;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	3304      	adds	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
	while (Address < FLASH_VALUES_END_ADDR)
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	4a61      	ldr	r2, [pc, #388]	; (8001794 <FlashWrite+0x1e0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d9e8      	bls.n	80015e4 <FlashWrite+0x30>
 8001612:	e000      	b.n	8001616 <FlashWrite+0x62>
	    }

	    else break;
 8001614:	bf00      	nop
	  }

	/* Add the new value to the array so we can write them to flash */

	if (values_ptr <= &values[10])
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <FlashWrite+0x1e4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d803      	bhi.n	8001626 <FlashWrite+0x72>
	{
		/* The array is not full yet, we can just append the value */
		*values_ptr = input_val;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e010      	b.n	8001648 <FlashWrite+0x94>
	}
	else
	{
		/* The array is full, we must shift all values to save the latest 10 logs */
		values_ptr = &values[0];
 8001626:	4b5a      	ldr	r3, [pc, #360]	; (8001790 <FlashWrite+0x1dc>)
 8001628:	61fb      	str	r3, [r7, #28]

		while (values_ptr < &values[10])
 800162a:	e006      	b.n	800163a <FlashWrite+0x86>
		{
			*values_ptr = *(values_ptr+1);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	601a      	str	r2, [r3, #0]
			values_ptr++;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3304      	adds	r3, #4
 8001638:	61fb      	str	r3, [r7, #28]
		while (values_ptr < &values[10])
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4a56      	ldr	r2, [pc, #344]	; (8001798 <FlashWrite+0x1e4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d3f4      	bcc.n	800162c <FlashWrite+0x78>
		}

		/* Finally, write the new value at the 10th place in the array */
		*values_ptr = input_val;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]

	}


  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 8001648:	f000 ff30 	bl	80024ac <HAL_FLASH_Unlock>

  /* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) */

  /* Get the 1st sector to erase */
  FirstSector = GetSector(FLASH_USER_START_ADDR);
 800164c:	484f      	ldr	r0, [pc, #316]	; (800178c <FlashWrite+0x1d8>)
 800164e:	f000 f8ff 	bl	8001850 <GetSector>
 8001652:	61b8      	str	r0, [r7, #24]
  /* Get the number of sector to erase from 1st sector*/
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8001654:	484d      	ldr	r0, [pc, #308]	; (800178c <FlashWrite+0x1d8>)
 8001656:	f000 f965 	bl	8001924 <GetSectorSize>
 800165a:	4602      	mov	r2, r0
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <FlashWrite+0x1e8>)
 800165e:	4413      	add	r3, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f8f5 	bl	8001850 <GetSector>
 8001666:	4602      	mov	r2, r0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <FlashWrite+0x1ec>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <FlashWrite+0x1ec>)
 8001678:	2202      	movs	r2, #2
 800167a:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
 800167c:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <FlashWrite+0x1ec>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
 8001682:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <FlashWrite+0x1ec>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	60d3      	str	r3, [r2, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4844      	ldr	r0, [pc, #272]	; (80017a0 <FlashWrite+0x1ec>)
 8001690:	f001 f87e 	bl	8002790 <HAL_FLASHEx_Erase>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <FlashWrite+0xf4>
      Error occurred while sector erase.
      User can add here some code to deal with this error.
      SECTORError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
    */
	  LOG_ERR("Brisanje flash sektora nije bilo uspjesno\n");
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <FlashWrite+0x1f0>)
 800169c:	461a      	mov	r2, r3
 800169e:	4942      	ldr	r1, [pc, #264]	; (80017a8 <FlashWrite+0x1f4>)
 80016a0:	4842      	ldr	r0, [pc, #264]	; (80017ac <FlashWrite+0x1f8>)
 80016a2:	f003 fcc5 	bl	8005030 <iprintf>

    while (1)
 80016a6:	e7fe      	b.n	80016a6 <FlashWrite+0xf2>
    }
  }

  /* Program the user Flash area word by word */

  Address = FLASH_USER_START_ADDR;
 80016a8:	4b38      	ldr	r3, [pc, #224]	; (800178c <FlashWrite+0x1d8>)
 80016aa:	623b      	str	r3, [r7, #32]
  values_ptr = &values[0];
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <FlashWrite+0x1dc>)
 80016ae:	61fb      	str	r3, [r7, #28]

  while ((Address < FLASH_VALUES_END_ADDR) && (*values_ptr != 0))
 80016b0:	e01b      	b.n	80016ea <FlashWrite+0x136>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *values_ptr) == HAL_OK)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fa00 	bl	8000abc <__aeabi_f2ulz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	2002      	movs	r0, #2
 80016c4:	f000 fe9e 	bl	8002404 <HAL_FLASH_Program>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <FlashWrite+0x128>
    {
      Address = Address + 4;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	3304      	adds	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
      values_ptr++;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e006      	b.n	80016ea <FlashWrite+0x136>
    }
   else
    {
      /* Error occurred while writing data in Flash memory.
         User can add here some code to deal with this error */
	  LOG_ERR("Upisivanje u flash nije bilo uspjesno\n");
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <FlashWrite+0x1f0>)
 80016de:	461a      	mov	r2, r3
 80016e0:	4931      	ldr	r1, [pc, #196]	; (80017a8 <FlashWrite+0x1f4>)
 80016e2:	4833      	ldr	r0, [pc, #204]	; (80017b0 <FlashWrite+0x1fc>)
 80016e4:	f003 fca4 	bl	8005030 <iprintf>
      while (1)
 80016e8:	e7fe      	b.n	80016e8 <FlashWrite+0x134>
  while ((Address < FLASH_VALUES_END_ADDR) && (*values_ptr != 0))
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <FlashWrite+0x1e0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d807      	bhi.n	8001702 <FlashWrite+0x14e>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d1d7      	bne.n	80016b2 <FlashWrite+0xfe>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) */
  HAL_FLASH_Lock();
 8001702:	f000 fef5 	bl	80024f0 <HAL_FLASH_Lock>

  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly */
  Address = FLASH_USER_START_ADDR;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <FlashWrite+0x1d8>)
 8001708:	623b      	str	r3, [r7, #32]
  values_ptr = &values[0];
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <FlashWrite+0x1dc>)
 800170c:	61fb      	str	r3, [r7, #28]
  MemoryProgramStatus = 0x0;
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]

  while (Address < FLASH_VALUES_END_ADDR)
 8001714:	e01a      	b.n	800174c <FlashWrite+0x198>
  {
    data32 = *(__IO float *)Address;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]

    if (data32 != *values_ptr)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a03 	vldr	s15, [r7, #12]
 8001726:	eeb4 7a67 	vcmp.f32	s14, s15
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d007      	beq.n	8001740 <FlashWrite+0x18c>
    {
      MemoryProgramStatus++;
 8001730:	edd7 7a02 	vldr	s15, [r7, #8]
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173c:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    Address = Address + 4;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	3304      	adds	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
    values_ptr++;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	61fb      	str	r3, [r7, #28]
  while (Address < FLASH_VALUES_END_ADDR)
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <FlashWrite+0x1e0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d9e0      	bls.n	8001716 <FlashWrite+0x162>
  }

  /*Check if there is an issue to program data*/
  if (MemoryProgramStatus == 0)
 8001754:	edd7 7a02 	vldr	s15, [r7, #8]
 8001758:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d106      	bne.n	8001770 <FlashWrite+0x1bc>
  {
    /* No error detected */
	  LOG_ERR("Upisivanje u flash obavljeno uspjesno\n");
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <FlashWrite+0x1f0>)
 8001764:	461a      	mov	r2, r3
 8001766:	4910      	ldr	r1, [pc, #64]	; (80017a8 <FlashWrite+0x1f4>)
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <FlashWrite+0x200>)
 800176a:	f003 fc61 	bl	8005030 <iprintf>
 800176e:	e007      	b.n	8001780 <FlashWrite+0x1cc>
  }
  else
  {
    /* Error detected */
	  LOG_ERR("Upisivanje u flash nije bilo uspjesno\n");
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <FlashWrite+0x1f0>)
 8001772:	461a      	mov	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <FlashWrite+0x1f4>)
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <FlashWrite+0x1fc>)
 8001778:	f003 fc5a 	bl	8005030 <iprintf>
	  retval = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return retval;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001782:	4618      	mov	r0, r3
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	08010000 	.word	0x08010000
 8001790:	20000160 	.word	0x20000160
 8001794:	08010027 	.word	0x08010027
 8001798:	20000188 	.word	0x20000188
 800179c:	0800ffff 	.word	0x0800ffff
 80017a0:	20000188 	.word	0x20000188
 80017a4:	08006324 	.word	0x08006324
 80017a8:	0800632c 	.word	0x0800632c
 80017ac:	08006330 	.word	0x08006330
 80017b0:	0800636c 	.word	0x0800636c
 80017b4:	080063a4 	.word	0x080063a4

080017b8 <FlashReadLogs>:
  * @brief  Reads the last 10 logs from flash
  * @param  None
  * @retval none
  */
void FlashReadLogs(void)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
	uint32_t Address = FLASH_USER_START_ADDR;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <FlashReadLogs+0x7c>)
 80017c0:	60fb      	str	r3, [r7, #12]
	float* values_ptr = &values[0];
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <FlashReadLogs+0x80>)
 80017c4:	60bb      	str	r3, [r7, #8]
	__IO float data32 = 0;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]

	LOG_INFO("Prethodna mjerenje iznose:\n");
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <FlashReadLogs+0x84>)
 80017ce:	461a      	mov	r2, r3
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <FlashReadLogs+0x88>)
 80017d2:	481c      	ldr	r0, [pc, #112]	; (8001844 <FlashReadLogs+0x8c>)
 80017d4:	f003 fc2c 	bl	8005030 <iprintf>

	while (Address < FLASH_VALUES_END_ADDR)
 80017d8:	e021      	b.n	800181e <FlashReadLogs+0x66>
	{
		data32 = *(__IO float *)Address;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	607b      	str	r3, [r7, #4]

		if (data32 != 0)
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	d01c      	beq.n	8001828 <FlashReadLogs+0x70>
		{
			*values_ptr = data32;
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	601a      	str	r2, [r3, #0]
		    values_ptr++;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3304      	adds	r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
		    Address = Address + 4;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	60fb      	str	r3, [r7, #12]
		    LOG_INFO("%f\n", *values_ptr);
 8001800:	4c0e      	ldr	r4, [pc, #56]	; (800183c <FlashReadLogs+0x84>)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feb6 	bl	8000578 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	e9cd 2300 	strd	r2, r3, [sp]
 8001814:	4622      	mov	r2, r4
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <FlashReadLogs+0x88>)
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <FlashReadLogs+0x90>)
 800181a:	f003 fc09 	bl	8005030 <iprintf>
	while (Address < FLASH_VALUES_END_ADDR)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <FlashReadLogs+0x94>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d9d9      	bls.n	80017da <FlashReadLogs+0x22>
		}

		else break;
	}
}
 8001826:	e000      	b.n	800182a <FlashReadLogs+0x72>
		else break;
 8001828:	bf00      	nop
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	08010000 	.word	0x08010000
 8001838:	20000160 	.word	0x20000160
 800183c:	08006324 	.word	0x08006324
 8001840:	080063dc 	.word	0x080063dc
 8001844:	080063e0 	.word	0x080063e0
 8001848:	0800640c 	.word	0x0800640c
 800184c:	08010027 	.word	0x08010027

08001850 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a2a      	ldr	r2, [pc, #168]	; (8001908 <GetSector+0xb8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d206      	bcs.n	8001872 <GetSector+0x22>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800186a:	d302      	bcc.n	8001872 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e043      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <GetSector+0xbc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d206      	bcs.n	8001888 <GetSector+0x38>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <GetSector+0xb8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d302      	bcc.n	8001888 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001882:	2301      	movs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e038      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a21      	ldr	r2, [pc, #132]	; (8001910 <GetSector+0xc0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d206      	bcs.n	800189e <GetSector+0x4e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <GetSector+0xbc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d302      	bcc.n	800189e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001898:	2302      	movs	r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e02d      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <GetSector+0xc4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d806      	bhi.n	80018b4 <GetSector+0x64>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <GetSector+0xc0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d302      	bcc.n	80018b4 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80018ae:	2303      	movs	r3, #3
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e022      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <GetSector+0xc8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d806      	bhi.n	80018ca <GetSector+0x7a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <GetSector+0xc4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d902      	bls.n	80018ca <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e017      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <GetSector+0xcc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d806      	bhi.n	80018e0 <GetSector+0x90>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <GetSector+0xc8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d902      	bls.n	80018e0 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80018da:	2305      	movs	r3, #5
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e00c      	b.n	80018fa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <GetSector+0xd0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d806      	bhi.n	80018f6 <GetSector+0xa6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <GetSector+0xcc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d902      	bls.n	80018f6 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80018f0:	2306      	movs	r3, #6
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e001      	b.n	80018fa <GetSector+0xaa>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
  {
    sector = FLASH_SECTOR_7;
 80018f6:	2307      	movs	r3, #7
 80018f8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	08004000 	.word	0x08004000
 800190c:	08008000 	.word	0x08008000
 8001910:	0800c000 	.word	0x0800c000
 8001914:	0800ffff 	.word	0x0800ffff
 8001918:	0801ffff 	.word	0x0801ffff
 800191c:	0803ffff 	.word	0x0803ffff
 8001920:	0805ffff 	.word	0x0805ffff

08001924 <GetSectorSize>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d008      	beq.n	8001948 <GetSectorSize+0x24>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <GetSectorSize+0x24>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d002      	beq.n	8001948 <GetSectorSize+0x24>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d103      	bne.n	8001950 <GetSectorSize+0x2c>
  {
    sectorsize = 16 * 1024;
 8001948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e009      	b.n	8001964 <GetSectorSize+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d103      	bne.n	800195e <GetSectorSize+0x3a>
  {
    sectorsize = 64 * 1024;
 8001956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e002      	b.n	8001964 <GetSectorSize+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 800195e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001962:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <log_uart_init>:
void log_uart_init_pins(UART_HandleTypeDef* huart);

UART_HandleTypeDef log_uart_handle;

void log_uart_init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	__HAL_RCC_USART2_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <log_uart_init+0x7c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <log_uart_init+0x7c>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <log_uart_init+0x7c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]

	log_uart_handle.Instance 			= USART2;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <log_uart_init+0x80>)
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <log_uart_init+0x84>)
 800199a:	601a      	str	r2, [r3, #0]
	log_uart_handle.Init.BaudRate 		= 921600;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <log_uart_init+0x80>)
 800199e:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80019a2:	605a      	str	r2, [r3, #4]
	log_uart_handle.Init.WordLength 	= UART_WORDLENGTH_8B;
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <log_uart_init+0x80>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
	log_uart_handle.Init.StopBits 		= UART_STOPBITS_1;
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <log_uart_init+0x80>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
	log_uart_handle.Init.Parity 		= UART_PARITY_EVEN;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <log_uart_init+0x80>)
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b6:	611a      	str	r2, [r3, #16]
	log_uart_handle.Init.Mode 			= UART_MODE_TX;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <log_uart_init+0x80>)
 80019ba:	2208      	movs	r2, #8
 80019bc:	615a      	str	r2, [r3, #20]
	log_uart_handle.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <log_uart_init+0x80>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
	log_uart_handle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <log_uart_init+0x80>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&log_uart_handle) != HAL_OK)
 80019ca:	480a      	ldr	r0, [pc, #40]	; (80019f4 <log_uart_init+0x80>)
 80019cc:	f002 ffaa 	bl	8004924 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d000      	beq.n	80019d8 <log_uart_init+0x64>
	{
		while(1);
 80019d6:	e7fe      	b.n	80019d6 <log_uart_init+0x62>
	 * Pojasnjenje na netu:
	 * 	That specific invocation of setbuf sets stdout to be unbuffered - By default,
	 * 	it's usually line-buffered (whatever gets written to stdout gets flushed to
	 * 	the screen when there's a newline), but after that call there's no buffer and
	 * 	anything you write goes directly to the console.*/
	setbuf(stdout, NULL);
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <log_uart_init+0x88>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fb37 	bl	8005054 <setbuf>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	2000019c 	.word	0x2000019c
 80019f8:	40004400 	.word	0x40004400
 80019fc:	20000098 	.word	0x20000098

08001a00 <_write>:

int _write(int file, char *ptr, int len)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	(void)file;

	for (int i=0; i<len; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00f      	b.n	8001a32 <_write+0x32>
	{
		while(!(USART2->SR & USART_SR_TXE));
 8001a12:	bf00      	nop
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <_write+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f9      	beq.n	8001a14 <_write+0x14>

		USART2->DR = (uint8_t)ptr[i];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	4413      	add	r3, r2
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_write+0x48>)
 8001a2a:	605a      	str	r2, [r3, #4]
	for (int i=0; i<len; i++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbeb      	blt.n	8001a12 <_write+0x12>
	}

	return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40004400 	.word	0x40004400

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a50:	f000 fb5c 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a54:	f000 f878 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a58:	f000 f8e4 	bl	8001c24 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  ADC1_Init();
  LCDInit();
 8001a5c:	f7ff fd38 	bl	80014d0 <LCDInit>
  AHT20Init();
 8001a60:	f7ff fbaa 	bl	80011b8 <AHT20Init>
  log_uart_init();
 8001a64:	f7ff ff86 	bl	8001974 <log_uart_init>

  FlashReadLogs();
 8001a68:	f7ff fea6 	bl	80017b8 <FlashReadLogs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	WaitForButton();
 8001a6c:	f000 f802 	bl	8001a74 <WaitForButton>
 8001a70:	e7fc      	b.n	8001a6c <main+0x20>
	...

08001a74 <WaitForButton>:
/**
  * @brief Waits for a button press
  * @retval None
  */
void WaitForButton(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	// If button pin value = 0, someone pressed the button
	if (HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == 0)
 8001a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <WaitForButton+0x34>)
 8001a7e:	f001 f93d 	bl	8002cfc <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10d      	bne.n	8001aa4 <WaitForButton+0x30>
	{

	HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f000 fbb1 	bl	80021f0 <HAL_Delay>

	while (HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) != 1)
 8001a8e:	bf00      	nop
 8001a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <WaitForButton+0x34>)
 8001a96:	f001 f931 	bl	8002cfc <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d1f7      	bne.n	8001a90 <WaitForButton+0x1c>
		{
			// Wait for the user to release the button
		}
	// A rising edge happened, now the temperature value can be read

	TemperatureToLCD();
 8001aa0:	f000 f804 	bl	8001aac <TemperatureToLCD>
	}
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020800 	.word	0x40020800

08001aac <TemperatureToLCD>:
/**
  * @brief Reads temperature value and prints it to LCD
  * @retval None
  */
void TemperatureToLCD(void)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af02      	add	r7, sp, #8
	float temperature =  AHT20_GetTemp();
 8001ab2:	f7ff fb8e 	bl	80011d2 <AHT20_GetTemp>
 8001ab6:	ee07 0a90 	vmov	s15, r0
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	edc7 7a05 	vstr	s15, [r7, #20]

	LCDClearScreen();
 8001ac2:	f7ff fd57 	bl	8001574 <LCDClearScreen>

	char pdata[14];
	sprintf(pdata, "%s", "Iznos temp:");
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <TemperatureToLCD+0x84>)
 8001aca:	491a      	ldr	r1, [pc, #104]	; (8001b34 <TemperatureToLCD+0x88>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fb77 	bl	80051c0 <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fd0d 	bl	80014f8 <LCDWriteData>

	sprintf(pdata, "%f", temperature);
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7fe fd4a 	bl	8000578 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	1d38      	adds	r0, r7, #4
 8001aea:	4913      	ldr	r1, [pc, #76]	; (8001b38 <TemperatureToLCD+0x8c>)
 8001aec:	f003 fb68 	bl	80051c0 <siprintf>
	LCDWriteData(1,0,&pdata[0]);
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	461a      	mov	r2, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff fcfe 	bl	80014f8 <LCDWriteData>

	FlashWrite(temperature);
 8001afc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b00:	f7ff fd58 	bl	80015b4 <FlashWrite>

	HAL_Delay(1000);
 8001b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b08:	f000 fb72 	bl	80021f0 <HAL_Delay>

	LOG_ERR("Iznos temperature: %f\n", temperature);
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	; (8001b3c <TemperatureToLCD+0x90>)
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7fe fd32 	bl	8000578 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <TemperatureToLCD+0x94>)
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <TemperatureToLCD+0x98>)
 8001b22:	f003 fa85 	bl	8005030 <iprintf>
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08006420 	.word	0x08006420
 8001b34:	0800642c 	.word	0x0800642c
 8001b38:	08006430 	.word	0x08006430
 8001b3c:	08006440 	.word	0x08006440
 8001b40:	08006448 	.word	0x08006448
 8001b44:	0800644c 	.word	0x0800644c

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	; 0x50
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	2234      	movs	r2, #52	; 0x34
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fb95 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <SystemClock_Config+0xd4>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <SystemClock_Config+0xd8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b94:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <SystemClock_Config+0xd8>)
 8001b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <SystemClock_Config+0xd8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fc06 	bl	80043e8 <HAL_RCC_OscConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001be2:	f000 f88f 	bl	8001d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	230f      	movs	r3, #15
 8001be8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bea:	2302      	movs	r3, #2
 8001bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	2102      	movs	r1, #2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 f8a6 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c0e:	f000 f879 	bl	8001d04 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3750      	adds	r7, #80	; 0x50
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2120      	movs	r1, #32
 8001cae:	4813      	ldr	r0, [pc, #76]	; (8001cfc <MX_GPIO_Init+0xd8>)
 8001cb0:	f001 f83c 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_GPIO_Init+0xdc>)
 8001cce:	f000 fe81 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_GPIO_Init+0xd8>)
 8001cea:	f000 fe73 	bl	80029d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020800 	.word	0x40020800

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4e:	2007      	movs	r0, #7
 8001d50:	f000 fb24 	bl	800239c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_I2C_MspInit+0x128>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12d      	bne.n	8001dde <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4835      	ldr	r0, [pc, #212]	; (8001e90 <HAL_I2C_MspInit+0x130>)
 8001dbc:	f000 fe0a 	bl	80029d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ddc:	e050      	b.n	8001e80 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <HAL_I2C_MspInit+0x134>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d14b      	bne.n	8001e80 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e26:	2312      	movs	r3, #18
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e32:	2304      	movs	r3, #4
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4816      	ldr	r0, [pc, #88]	; (8001e98 <HAL_I2C_MspInit+0x138>)
 8001e3e:	f000 fdc9 	bl	80029d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e54:	2304      	movs	r3, #4
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <HAL_I2C_MspInit+0x13c>)
 8001e60:	f000 fdb8 	bl	80029d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_I2C_MspInit+0x12c>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40005c00 	.word	0x40005c00
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_UART_MspInit+0x84>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12b      	bne.n	8001f1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001efa:	230c      	movs	r3, #12
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <HAL_UART_MspInit+0x8c>)
 8001f16:	f000 fd5d 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40004400 	.word	0x40004400
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f918 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
  }

  return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f003 f964 	bl	8005324 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20020000 	.word	0x20020000
 8002088:	00000400 	.word	0x00000400
 800208c:	200001e4 	.word	0x200001e4
 8002090:	20000358 	.word	0x20000358

08002094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020bc:	f7ff ffea 	bl	8002094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020e6:	f003 f923 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7ff fcaf 	bl	8001a4c <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80020fc:	080064d0 	.word	0x080064d0
  ldr r2, =_sbss
 8002100:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002104:	20000358 	.word	0x20000358

08002108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_Init+0x40>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_Init+0x40>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_Init+0x40>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f931 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fde6 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f93b 	bl	80023ea <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 f911 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000034 	.word	0x20000034
 80021a8:	2000003c 	.word	0x2000003c
 80021ac:	20000038 	.word	0x20000038

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	2000003c 	.word	0x2000003c
 80021d4:	200001e8 	.word	0x200001e8

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	200001e8 	.word	0x200001e8

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d005      	beq.n	8002216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_Delay+0x44>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002216:	bf00      	nop
 8002218:	f7ff ffde 	bl	80021d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <HAL_Delay+0x28>
  {
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000003c 	.word	0x2000003c

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff47 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff5c 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffb0 	bl	8002358 <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_FLASH_Program+0xa0>)
 8002418:	7e1b      	ldrb	r3, [r3, #24]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_FLASH_Program+0x1e>
 800241e:	2302      	movs	r3, #2
 8002420:	e03b      	b.n	800249a <HAL_FLASH_Program+0x96>
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_FLASH_Program+0xa0>)
 8002424:	2201      	movs	r2, #1
 8002426:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002428:	f24c 3050 	movw	r0, #50000	; 0xc350
 800242c:	f000 f870 	bl	8002510 <FLASH_WaitForLastOperation>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12b      	bne.n	8002492 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002440:	783b      	ldrb	r3, [r7, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f000 f91b 	bl	8002680 <FLASH_Program_Byte>
 800244a:	e016      	b.n	800247a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002452:	883b      	ldrh	r3, [r7, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	f000 f8ee 	bl	8002638 <FLASH_Program_HalfWord>
 800245c:	e00d      	b.n	800247a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d105      	bne.n	8002470 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4619      	mov	r1, r3
 8002468:	68b8      	ldr	r0, [r7, #8]
 800246a:	f000 f8c3 	bl	80025f4 <FLASH_Program_Word>
 800246e:	e004      	b.n	800247a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002474:	68b8      	ldr	r0, [r7, #8]
 8002476:	f000 f88b 	bl	8002590 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800247a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800247e:	f000 f847 	bl	8002510 <FLASH_WaitForLastOperation>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_FLASH_Program+0xa4>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_FLASH_Program+0xa4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_FLASH_Program+0xa0>)
 8002494:	2200      	movs	r2, #0
 8002496:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002498:	7dfb      	ldrb	r3, [r7, #23]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200001ec 	.word	0x200001ec
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_FLASH_Unlock+0x38>)
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da0b      	bge.n	80024d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_FLASH_Unlock+0x38>)
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_FLASH_Unlock+0x3c>)
 80024c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_FLASH_Unlock+0x38>)
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_FLASH_Unlock+0x40>)
 80024c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_FLASH_Unlock+0x38>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da01      	bge.n	80024d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80024d6:	79fb      	ldrb	r3, [r7, #7]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	45670123 	.word	0x45670123
 80024ec:	cdef89ab 	.word	0xcdef89ab

080024f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_FLASH_Lock+0x1c>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_FLASH_Lock+0x1c>)
 80024fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40023c00 	.word	0x40023c00

08002510 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <FLASH_WaitForLastOperation+0x78>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002522:	f7ff fe59 	bl	80021d8 <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002528:	e010      	b.n	800254c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d00c      	beq.n	800254c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <FLASH_WaitForLastOperation+0x38>
 8002538:	f7ff fe4e 	bl	80021d8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d201      	bcs.n	800254c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e019      	b.n	8002580 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <FLASH_WaitForLastOperation+0x7c>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e8      	bne.n	800252a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <FLASH_WaitForLastOperation+0x7c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <FLASH_WaitForLastOperation+0x7c>)
 8002566:	2201      	movs	r2, #1
 8002568:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <FLASH_WaitForLastOperation+0x7c>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002576:	f000 f8a5 	bl	80026c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
  
}  
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200001ec 	.word	0x200001ec
 800258c:	40023c00 	.word	0x40023c00

08002590 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 80025a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 80025ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <FLASH_Program_DoubleWord+0x60>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80025c6:	f3bf 8f6f 	isb	sy
}
 80025ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	000a      	movs	r2, r1
 80025da:	2300      	movs	r3, #0
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	3104      	adds	r1, #4
 80025e0:	4613      	mov	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <FLASH_Program_Word+0x40>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <FLASH_Program_Word+0x40>)
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <FLASH_Program_Word+0x40>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <FLASH_Program_Word+0x40>)
 8002610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <FLASH_Program_Word+0x40>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	4a06      	ldr	r2, [pc, #24]	; (8002634 <FLASH_Program_Word+0x40>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40023c00 	.word	0x40023c00

08002638 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <FLASH_Program_HalfWord+0x44>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <FLASH_Program_HalfWord+0x44>)
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <FLASH_Program_HalfWord+0x44>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a09      	ldr	r2, [pc, #36]	; (800267c <FLASH_Program_HalfWord+0x44>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <FLASH_Program_HalfWord+0x44>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <FLASH_Program_HalfWord+0x44>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	801a      	strh	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00

08002680 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <FLASH_Program_Byte+0x40>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <FLASH_Program_Byte+0x40>)
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <FLASH_Program_Byte+0x40>)
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <FLASH_Program_Byte+0x40>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <FLASH_Program_Byte+0x40>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <FLASH_Program_Byte+0x40>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <FLASH_SetErrorCode+0xc8>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <FLASH_SetErrorCode+0xc8>)
 80026de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 80026e2:	2210      	movs	r2, #16
 80026e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <FLASH_SetErrorCode+0xc8>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <FLASH_SetErrorCode+0xc8>)
 80026fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 8002700:	2220      	movs	r2, #32
 8002702:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <FLASH_SetErrorCode+0xc8>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <FLASH_SetErrorCode+0xc8>)
 800271a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <FLASH_SetErrorCode+0xc8>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <FLASH_SetErrorCode+0xc8>)
 8002738:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <FLASH_SetErrorCode+0xc8>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <FLASH_SetErrorCode+0xc8>)
 8002756:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 800275a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <FLASH_SetErrorCode+0xc8>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <FLASH_SetErrorCode+0xc8>)
 8002776:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <FLASH_SetErrorCode+0xc4>)
 800277a:	2202      	movs	r2, #2
 800277c:	60da      	str	r2, [r3, #12]
  }
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40023c00 	.word	0x40023c00
 800278c:	200001ec 	.word	0x200001ec

08002790 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_FLASHEx_Erase+0xd8>)
 80027a4:	7e1b      	ldrb	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_FLASHEx_Erase+0x1e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e058      	b.n	8002860 <HAL_FLASHEx_Erase+0xd0>
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_FLASHEx_Erase+0xd8>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027b8:	f7ff feaa 	bl	8002510 <FLASH_WaitForLastOperation>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d148      	bne.n	8002858 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d115      	bne.n	8002802 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 f844 	bl	8002870 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027ec:	f7ff fe90 	bl	8002510 <FLASH_WaitForLastOperation>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_FLASHEx_Erase+0xdc>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_FLASHEx_Erase+0xdc>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6113      	str	r3, [r2, #16]
 8002800:	e028      	b.n	8002854 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e01c      	b.n	8002844 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	68b8      	ldr	r0, [r7, #8]
 8002814:	f000 f850 	bl	80028b8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002818:	f24c 3050 	movw	r0, #50000	; 0xc350
 800281c:	f7ff fe78 	bl	8002510 <FLASH_WaitForLastOperation>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_FLASHEx_Erase+0xdc>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_FLASHEx_Erase+0xdc>)
 800282a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800282e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	601a      	str	r2, [r3, #0]
          break;
 800283c:	e00a      	b.n	8002854 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4413      	add	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d3da      	bcc.n	800280a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002854:	f000 f878 	bl	8002948 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_FLASHEx_Erase+0xd8>)
 800285a:	2200      	movs	r2, #0
 800285c:	761a      	strb	r2, [r3, #24]

  return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200001ec 	.word	0x200001ec
 800286c:	40023c00 	.word	0x40023c00

08002870 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <FLASH_MassErase+0x44>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <FLASH_MassErase+0x44>)
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <FLASH_MassErase+0x44>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <FLASH_MassErase+0x44>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <FLASH_MassErase+0x44>)
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	4313      	orrs	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <FLASH_MassErase+0x44>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6113      	str	r3, [r2, #16]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e010      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d103      	bne.n	80028e2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e009      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d103      	bne.n	80028f0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e002      	b.n	80028f6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	490f      	ldr	r1, [pc, #60]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002914:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4313      	orrs	r3, r2
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <FLASH_Erase_Sector+0x8c>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6113      	str	r3, [r2, #16]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40023c00 	.word	0x40023c00

08002948 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800295e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <FLASH_FlushCaches+0x88>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800296a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <FLASH_FlushCaches+0x88>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <FLASH_FlushCaches+0x88>)
 8002976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800297a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <FLASH_FlushCaches+0x88>)
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d017      	beq.n	80029c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <FLASH_FlushCaches+0x88>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <FLASH_FlushCaches+0x88>)
 800299a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800299e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <FLASH_FlushCaches+0x88>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c2:	6013      	str	r3, [r2, #0]
  }
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e165      	b.n	8002cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 8154 	bne.w	8002cb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d130      	bne.n	8002a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d017      	beq.n	8002ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80ae 	beq.w	8002cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_GPIO_Init+0x300>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a5c      	ldr	r2, [pc, #368]	; (8002cd4 <HAL_GPIO_Init+0x300>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_GPIO_Init+0x300>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b76:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_GPIO_Init+0x304>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4f      	ldr	r2, [pc, #316]	; (8002cdc <HAL_GPIO_Init+0x308>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x21a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4e      	ldr	r2, [pc, #312]	; (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x216>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4d      	ldr	r2, [pc, #308]	; (8002ce4 <HAL_GPIO_Init+0x310>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x212>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_GPIO_Init+0x314>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x20e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_GPIO_Init+0x318>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x20a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x31c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x206>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x320>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x202>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x21c>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae96 	bls.w	80029f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40013c00 	.word	0x40013c00

08002cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e001      	b.n	8002d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e12b      	b.n	8002fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe ffea 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f001 f8b8 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a81      	ldr	r2, [pc, #516]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d807      	bhi.n	8002de4 <HAL_I2C_Init+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a80      	ldr	r2, [pc, #512]	; (8002fd8 <HAL_I2C_Init+0x278>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e006      	b.n	8002df2 <HAL_I2C_Init+0x92>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a7d      	ldr	r2, [pc, #500]	; (8002fdc <HAL_I2C_Init+0x27c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e7      	b.n	8002fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a78      	ldr	r2, [pc, #480]	; (8002fe0 <HAL_I2C_Init+0x280>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a6a      	ldr	r2, [pc, #424]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <HAL_I2C_Init+0xd4>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e009      	b.n	8002e48 <HAL_I2C_Init+0xe8>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <HAL_I2C_Init+0x284>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	3301      	adds	r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	495c      	ldr	r1, [pc, #368]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d819      	bhi.n	8002e9c <HAL_I2C_Init+0x13c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e59      	subs	r1, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_I2C_Init+0x138>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1e59      	subs	r1, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	e051      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e04f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <HAL_I2C_Init+0x168>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e58      	subs	r0, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e012      	b.n	8002eee <HAL_I2C_Init+0x18e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x196>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10e      	bne.n	8002f1c <HAL_I2C_Init+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e58      	subs	r0, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	440b      	add	r3, r1
 8002f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	e00f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	6809      	ldr	r1, [r1, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6911      	ldr	r1, [r2, #16]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	000186a0 	.word	0x000186a0
 8002fd8:	001e847f 	.word	0x001e847f
 8002fdc:	003d08ff 	.word	0x003d08ff
 8002fe0:	431bde83 	.word	0x431bde83
 8002fe4:	10624dd3 	.word	0x10624dd3

08002fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff f8ec 	bl	80021d8 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 80e0 	bne.w	80031d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	4970      	ldr	r1, [pc, #448]	; (80031dc <HAL_I2C_Master_Transmit+0x1f4>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fc64 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	e0d3      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_I2C_Master_Transmit+0x50>
 8003034:	2302      	movs	r3, #2
 8003036:	e0cc      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d007      	beq.n	800305e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2210      	movs	r2, #16
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	893a      	ldrh	r2, [r7, #8]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030a0:	8979      	ldrh	r1, [r7, #10]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 face 	bl	8003648 <I2C_MasterRequestWrite>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e08d      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030cc:	e066      	b.n	800319c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fd22 	bl	8003b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06b      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d11b      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x188>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	6a39      	ldr	r1, [r7, #32]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fd19 	bl	8003bac <I2C_WaitOnBTFFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	2b04      	cmp	r3, #4
 8003186:	d107      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e01a      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d194      	bne.n	80030ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	00100002 	.word	0x00100002
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
 80031f4:	4613      	mov	r3, r2
 80031f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f8:	f7fe ffee 	bl	80021d8 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b20      	cmp	r3, #32
 8003208:	f040 8217 	bne.w	800363a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2319      	movs	r3, #25
 8003212:	2201      	movs	r2, #1
 8003214:	497c      	ldr	r1, [pc, #496]	; (8003408 <HAL_I2C_Master_Receive+0x224>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fb66 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	e20a      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2C_Master_Receive+0x50>
 8003230:	2302      	movs	r3, #2
 8003232:	e203      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d007      	beq.n	800325a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2222      	movs	r2, #34	; 0x22
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2210      	movs	r2, #16
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	893a      	ldrh	r2, [r7, #8]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a5c      	ldr	r2, [pc, #368]	; (800340c <HAL_I2C_Master_Receive+0x228>)
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa52 	bl	800374c <I2C_MasterRequestRead>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c4      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e198      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d11b      	bne.n	8003322 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e178      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b02      	cmp	r3, #2
 8003328:	d11b      	bne.n	8003362 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	e158      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003388:	e144      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	2b03      	cmp	r3, #3
 8003390:	f200 80f1 	bhi.w	8003576 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	d123      	bne.n	80033e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fc4b 	bl	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e145      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e2:	e117      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d14e      	bne.n	800348a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2200      	movs	r2, #0
 80033f4:	4906      	ldr	r1, [pc, #24]	; (8003410 <HAL_I2C_Master_Receive+0x22c>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa76 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e11a      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
 8003406:	bf00      	nop
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000
 8003410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003488:	e0c4      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	2200      	movs	r2, #0
 8003492:	496c      	ldr	r1, [pc, #432]	; (8003644 <HAL_I2C_Master_Receive+0x460>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fa27 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0cb      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	4955      	ldr	r1, [pc, #340]	; (8003644 <HAL_I2C_Master_Receive+0x460>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f9f9 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e09d      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003574:	e04e      	b.n	8003614 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fb5e 	bl	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e058      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d124      	bne.n	8003614 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f aeb6 	bne.w	800338a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	00010004 	.word	0x00010004

08003648 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	460b      	mov	r3, r1
 8003656:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d006      	beq.n	8003672 <I2C_MasterRequestWrite+0x2a>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d003      	beq.n	8003672 <I2C_MasterRequestWrite+0x2a>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003670:	d108      	bne.n	8003684 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e00b      	b.n	800369c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	2b12      	cmp	r3, #18
 800368a:	d107      	bne.n	800369c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f91d 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d103      	bne.n	80036cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e035      	b.n	800373c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	e01b      	b.n	8003724 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036ec:	897b      	ldrh	r3, [r7, #10]
 80036ee:	11db      	asrs	r3, r3, #7
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f063 030f 	orn	r3, r3, #15
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <I2C_MasterRequestWrite+0xfc>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f966 	bl	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e010      	b.n	800373c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <I2C_MasterRequestWrite+0x100>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f956 	bl	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	00010008 	.word	0x00010008
 8003748:	00010002 	.word	0x00010002

0800374c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	460b      	mov	r3, r1
 800375a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d006      	beq.n	8003786 <I2C_MasterRequestRead+0x3a>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <I2C_MasterRequestRead+0x3a>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00b      	b.n	80037b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2b11      	cmp	r3, #17
 800379e:	d107      	bne.n	80037b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f893 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d103      	bne.n	80037e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e079      	b.n	80038d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e05f      	b.n	80038c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	11db      	asrs	r3, r3, #7
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f063 030f 	orn	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4930      	ldr	r1, [pc, #192]	; (80038e0 <I2C_MasterRequestRead+0x194>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8dc 	bl	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e054      	b.n	80038d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4929      	ldr	r1, [pc, #164]	; (80038e4 <I2C_MasterRequestRead+0x198>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f8cc 	bl	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e044      	b.n	80038d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003872:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f831 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389a:	d103      	bne.n	80038a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e017      	b.n	80038d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	11db      	asrs	r3, r3, #7
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f003 0306 	and.w	r3, r3, #6
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f063 030e 	orn	r3, r3, #14
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4907      	ldr	r1, [pc, #28]	; (80038e4 <I2C_MasterRequestRead+0x198>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f888 	bl	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010008 	.word	0x00010008
 80038e4:	00010002 	.word	0x00010002

080038e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f8:	e048      	b.n	800398c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d044      	beq.n	800398c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fc69 	bl	80021d8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d139      	bne.n	800398c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10d      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	e00c      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	43da      	mvns	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	429a      	cmp	r2, r3
 800395c:	d116      	bne.n	800398c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e023      	b.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	0c1b      	lsrs	r3, r3, #16
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	e00c      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d093      	beq.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ea:	e071      	b.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d123      	bne.n	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e067      	b.n	8003b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d041      	beq.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7fe fbc4 	bl	80021d8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d136      	bne.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10c      	bne.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e00b      	b.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e021      	b.n	8003b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	0c1b      	lsrs	r3, r3, #16
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d10c      	bne.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e00b      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f47f af6d 	bne.w	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b28:	e034      	b.n	8003b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f8e3 	bl	8003cf6 <I2C_IsAcknowledgeFailed>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e034      	b.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d028      	beq.n	8003b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fe fb49 	bl	80021d8 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d11d      	bne.n	8003b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b80      	cmp	r3, #128	; 0x80
 8003b64:	d016      	beq.n	8003b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e007      	b.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d1c3      	bne.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	e034      	b.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f89b 	bl	8003cf6 <I2C_IsAcknowledgeFailed>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e034      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d028      	beq.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fb01 	bl	80021d8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11d      	bne.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d016      	beq.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d1c3      	bne.n	8003bba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c48:	e049      	b.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d119      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0210 	mvn.w	r2, #16
 8003c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e030      	b.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe faa4 	bl	80021d8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11d      	bne.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d016      	beq.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e007      	b.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d1ae      	bne.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d11b      	bne.n	8003d46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0204 	orr.w	r2, r3, #4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe f9c8 	bl	80021d8 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe f9c4 	bl	80021d8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f855 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe f928 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	08006474 	.word	0x08006474
 8003f18:	20000034 	.word	0x20000034
 8003f1c:	20000038 	.word	0x20000038

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000034 	.word	0x20000034

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	08006484 	.word	0x08006484

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f64:	f7ff ffdc 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08006484 	.word	0x08006484

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0ae      	sub	sp, #184	; 0xb8
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fae:	4bcb      	ldr	r3, [pc, #812]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	f200 8206 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x440>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	080043c9 	.word	0x080043c9
 8003fcc:	080043c9 	.word	0x080043c9
 8003fd0:	080043c9 	.word	0x080043c9
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	080043c9 	.word	0x080043c9
 8003fdc:	080043c9 	.word	0x080043c9
 8003fe0:	080043c9 	.word	0x080043c9
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	080043c9 	.word	0x080043c9
 8003fec:	080043c9 	.word	0x080043c9
 8003ff0:	080043c9 	.word	0x080043c9
 8003ff4:	080041f9 	.word	0x080041f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4bb9      	ldr	r3, [pc, #740]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ffe:	e1e7      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004000:	4bb8      	ldr	r3, [pc, #736]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004006:	e1e3      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4bb4      	ldr	r3, [pc, #720]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004014:	4bb1      	ldr	r3, [pc, #708]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d071      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4bae      	ldr	r3, [pc, #696]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004046:	4622      	mov	r2, r4
 8004048:	462b      	mov	r3, r5
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	0159      	lsls	r1, r3, #5
 8004054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004058:	0150      	lsls	r0, r2, #5
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4621      	mov	r1, r4
 8004060:	1a51      	subs	r1, r2, r1
 8004062:	6439      	str	r1, [r7, #64]	; 0x40
 8004064:	4629      	mov	r1, r5
 8004066:	eb63 0301 	sbc.w	r3, r3, r1
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004078:	4649      	mov	r1, r9
 800407a:	018b      	lsls	r3, r1, #6
 800407c:	4641      	mov	r1, r8
 800407e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004082:	4641      	mov	r1, r8
 8004084:	018a      	lsls	r2, r1, #6
 8004086:	4641      	mov	r1, r8
 8004088:	1a51      	subs	r1, r2, r1
 800408a:	63b9      	str	r1, [r7, #56]	; 0x38
 800408c:	4649      	mov	r1, r9
 800408e:	eb63 0301 	sbc.w	r3, r3, r1
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80040a0:	4649      	mov	r1, r9
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4641      	mov	r1, r8
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4622      	mov	r2, r4
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	462b      	mov	r3, r5
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040d0:	4629      	mov	r1, r5
 80040d2:	024b      	lsls	r3, r1, #9
 80040d4:	4621      	mov	r1, r4
 80040d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040da:	4621      	mov	r1, r4
 80040dc:	024a      	lsls	r2, r1, #9
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80040f4:	f7fc fcca 	bl	8000a8c <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004102:	e067      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b75      	ldr	r3, [pc, #468]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004110:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004114:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	67bb      	str	r3, [r7, #120]	; 0x78
 800411e:	2300      	movs	r3, #0
 8004120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004122:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	f04f 0000 	mov.w	r0, #0
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	0159      	lsls	r1, r3, #5
 8004134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004138:	0150      	lsls	r0, r2, #5
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4621      	mov	r1, r4
 8004140:	1a51      	subs	r1, r2, r1
 8004142:	62b9      	str	r1, [r7, #40]	; 0x28
 8004144:	4629      	mov	r1, r5
 8004146:	eb63 0301 	sbc.w	r3, r3, r1
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004158:	4649      	mov	r1, r9
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	4641      	mov	r1, r8
 800415e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004162:	4641      	mov	r1, r8
 8004164:	018a      	lsls	r2, r1, #6
 8004166:	4641      	mov	r1, r8
 8004168:	ebb2 0a01 	subs.w	sl, r2, r1
 800416c:	4649      	mov	r1, r9
 800416e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800417e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004186:	4692      	mov	sl, r2
 8004188:	469b      	mov	fp, r3
 800418a:	4623      	mov	r3, r4
 800418c:	eb1a 0303 	adds.w	r3, sl, r3
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	462b      	mov	r3, r5
 8004194:	eb4b 0303 	adc.w	r3, fp, r3
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041a6:	4629      	mov	r1, r5
 80041a8:	028b      	lsls	r3, r1, #10
 80041aa:	4621      	mov	r1, r4
 80041ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b0:	4621      	mov	r1, r4
 80041b2:	028a      	lsls	r2, r1, #10
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041bc:	2200      	movs	r2, #0
 80041be:	673b      	str	r3, [r7, #112]	; 0x70
 80041c0:	677a      	str	r2, [r7, #116]	; 0x74
 80041c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041c6:	f7fc fc61 	bl	8000a8c <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4613      	mov	r3, r2
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d4:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80041e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041f6:	e0eb      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d06b      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	2200      	movs	r2, #0
 8004218:	66bb      	str	r3, [r7, #104]	; 0x68
 800421a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
 8004224:	2300      	movs	r3, #0
 8004226:	667b      	str	r3, [r7, #100]	; 0x64
 8004228:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	0159      	lsls	r1, r3, #5
 800423a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423e:	0150      	lsls	r0, r2, #5
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4621      	mov	r1, r4
 8004246:	1a51      	subs	r1, r2, r1
 8004248:	61b9      	str	r1, [r7, #24]
 800424a:	4629      	mov	r1, r5
 800424c:	eb63 0301 	sbc.w	r3, r3, r1
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800425e:	4659      	mov	r1, fp
 8004260:	018b      	lsls	r3, r1, #6
 8004262:	4651      	mov	r1, sl
 8004264:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004268:	4651      	mov	r1, sl
 800426a:	018a      	lsls	r2, r1, #6
 800426c:	4651      	mov	r1, sl
 800426e:	ebb2 0801 	subs.w	r8, r2, r1
 8004272:	4659      	mov	r1, fp
 8004274:	eb63 0901 	sbc.w	r9, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428c:	4690      	mov	r8, r2
 800428e:	4699      	mov	r9, r3
 8004290:	4623      	mov	r3, r4
 8004292:	eb18 0303 	adds.w	r3, r8, r3
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	462b      	mov	r3, r5
 800429a:	eb49 0303 	adc.w	r3, r9, r3
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042ac:	4629      	mov	r1, r5
 80042ae:	024b      	lsls	r3, r1, #9
 80042b0:	4621      	mov	r1, r4
 80042b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b6:	4621      	mov	r1, r4
 80042b8:	024a      	lsls	r2, r1, #9
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c2:	2200      	movs	r2, #0
 80042c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80042c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042cc:	f7fc fbde 	bl	8000a8c <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042da:	e065      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x420>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	2200      	movs	r2, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	4611      	mov	r1, r2
 80042f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 80042fa:	2300      	movs	r3, #0
 80042fc:	657b      	str	r3, [r7, #84]	; 0x54
 80042fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004314:	0150      	lsls	r0, r2, #5
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4641      	mov	r1, r8
 800431c:	1a51      	subs	r1, r2, r1
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	4649      	mov	r1, r9
 8004322:	eb63 0301 	sbc.w	r3, r3, r1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004334:	4659      	mov	r1, fp
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	4651      	mov	r1, sl
 800433a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433e:	4651      	mov	r1, sl
 8004340:	018a      	lsls	r2, r1, #6
 8004342:	4651      	mov	r1, sl
 8004344:	1a54      	subs	r4, r2, r1
 8004346:	4659      	mov	r1, fp
 8004348:	eb63 0501 	sbc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	464b      	mov	r3, r9
 8004368:	eb45 0303 	adc.w	r3, r5, r3
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800437a:	4629      	mov	r1, r5
 800437c:	028b      	lsls	r3, r1, #10
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004384:	4621      	mov	r1, r4
 8004386:	028a      	lsls	r2, r1, #10
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004390:	2200      	movs	r2, #0
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
 8004394:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004396:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800439a:	f7fc fb77 	bl	8000a8c <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	0f1b      	lsrs	r3, r3, #28
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80043ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	37b8      	adds	r7, #184	; 0xb8
 80043d8:	46bd      	mov	sp, r7
 80043da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e28d      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8083 	beq.w	800450e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b04      	cmp	r3, #4
 8004412:	d019      	beq.n	8004448 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004414:	4b91      	ldr	r3, [pc, #580]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800441c:	2b08      	cmp	r3, #8
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004420:	4b8e      	ldr	r3, [pc, #568]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4b8b      	ldr	r3, [pc, #556]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4b84      	ldr	r3, [pc, #528]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05b      	beq.n	800450c <HAL_RCC_OscConfig+0x124>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d157      	bne.n	800450c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e25a      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x90>
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7b      	ldr	r2, [pc, #492]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xcc>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0xb4>
 8004482:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b73      	ldr	r3, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a72      	ldr	r2, [pc, #456]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xcc>
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b6c      	ldr	r3, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6b      	ldr	r2, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fe8c 	bl	80021d8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fd fe88 	bl	80021d8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e21f      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xdc>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fe78 	bl	80021d8 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fe74 	bl	80021d8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e20b      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x104>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d06f      	beq.n	80045fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800451a:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004526:	4b4d      	ldr	r3, [pc, #308]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800452e:	2b08      	cmp	r3, #8
 8004530:	d105      	bne.n	800453e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004532:	4b4a      	ldr	r3, [pc, #296]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454a:	4b44      	ldr	r3, [pc, #272]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b41      	ldr	r3, [pc, #260]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x186>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1d3      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4937      	ldr	r1, [pc, #220]	; (800465c <HAL_RCC_OscConfig+0x274>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e03a      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x278>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fd fe21 	bl	80021d8 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fd fe1d 	bl	80021d8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1b4      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4925      	ldr	r1, [pc, #148]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x278>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fe00 	bl	80021d8 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fd fdfc 	bl	80021d8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e193      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d036      	beq.n	8004674 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <HAL_RCC_OscConfig+0x27c>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd fde0 	bl	80021d8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461c:	f7fd fddc 	bl	80021d8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e173      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_OscConfig+0x274>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x234>
 800463a:	e01b      	b.n	8004674 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x27c>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd fdc9 	bl	80021d8 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	e00e      	b.n	8004668 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464a:	f7fd fdc5 	bl	80021d8 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d907      	bls.n	8004668 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e15c      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
 800465c:	40023800 	.word	0x40023800
 8004660:	42470000 	.word	0x42470000
 8004664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	4b8a      	ldr	r3, [pc, #552]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ea      	bne.n	800464a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8097 	beq.w	80047b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b83      	ldr	r3, [pc, #524]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b7f      	ldr	r3, [pc, #508]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a7e      	ldr	r2, [pc, #504]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b7c      	ldr	r3, [pc, #496]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b79      	ldr	r3, [pc, #484]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a75      	ldr	r2, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fd fd85 	bl	80021d8 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7fd fd81 	bl	80021d8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e118      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x4b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x31e>
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a65      	ldr	r2, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	e01c      	b.n	8004740 <HAL_RCC_OscConfig+0x358>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x340>
 800470e:	4b61      	ldr	r3, [pc, #388]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a60      	ldr	r2, [pc, #384]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b5e      	ldr	r3, [pc, #376]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0x358>
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a59      	ldr	r2, [pc, #356]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	4b57      	ldr	r3, [pc, #348]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd fd46 	bl	80021d8 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fd fd42 	bl	80021d8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0d7      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ee      	beq.n	8004750 <HAL_RCC_OscConfig+0x368>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fd fd30 	bl	80021d8 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	e00a      	b.n	8004792 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fd fd2c 	bl	80021d8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0c1      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	4b40      	ldr	r3, [pc, #256]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ee      	bne.n	800477c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80ad 	beq.w	8004914 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d060      	beq.n	8004888 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d145      	bne.n	800485a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd fd00 	bl	80021d8 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd fcfc 	bl	80021d8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e093      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	491b      	ldr	r1, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd fcd1 	bl	80021d8 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483a:	f7fd fccd 	bl	80021d8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e064      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x452>
 8004858:	e05c      	b.n	8004914 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <HAL_RCC_OscConfig+0x4b4>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fcba 	bl	80021d8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd fcb6 	bl	80021d8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04d      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x480>
 8004886:	e045      	b.n	8004914 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e040      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
 8004894:	40023800 	.word	0x40023800
 8004898:	40007000 	.word	0x40007000
 800489c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_RCC_OscConfig+0x538>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d030      	beq.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d129      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d122      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d8:	4293      	cmp	r3, r2
 80048da:	d119      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	3b01      	subs	r3, #1
 80048ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d10f      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800

08004924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e042      	b.n	80049bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd faa8 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f82b 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff fa7c 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7ff fa63 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b08:	f7fb ffc0 	bl	8000a8c <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9e:	f7fb ff75 	bl	8000a8c <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	; 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c5a:	f7fb ff17 	bl	8000a8c <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e106      	b.n	8004e9c <UART_SetConfig+0x4d8>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb feb6 	bl	8000a8c <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dba:	f7fb fe67 	bl	8000a8c <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	; 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	673b      	str	r3, [r7, #112]	; 0x70
 8004dee:	677a      	str	r2, [r7, #116]	; 0x74
 8004df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	464b      	mov	r3, r9
 8004e38:	460a      	mov	r2, r1
 8004e3a:	eb42 0303 	adc.w	r3, r2, r3
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e6a:	f7fb fe0f 	bl	8000a8c <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <std>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eba:	6083      	str	r3, [r0, #8]
 8004ebc:	8181      	strh	r1, [r0, #12]
 8004ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8004ec0:	81c2      	strh	r2, [r0, #14]
 8004ec2:	6183      	str	r3, [r0, #24]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	305c      	adds	r0, #92	; 0x5c
 8004eca:	f000 f9dc 	bl	8005286 <memset>
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <std+0x58>)
 8004ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <std+0x5c>)
 8004ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <std+0x60>)
 8004ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <std+0x64>)
 8004edc:	6323      	str	r3, [r4, #48]	; 0x30
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <std+0x68>)
 8004ee0:	6224      	str	r4, [r4, #32]
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d006      	beq.n	8004ef4 <std+0x48>
 8004ee6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004eea:	4294      	cmp	r4, r2
 8004eec:	d002      	beq.n	8004ef4 <std+0x48>
 8004eee:	33d0      	adds	r3, #208	; 0xd0
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d105      	bne.n	8004f00 <std+0x54>
 8004ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004efc:	f000 ba3c 	b.w	8005378 <__retarget_lock_init_recursive>
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	bf00      	nop
 8004f04:	08005201 	.word	0x08005201
 8004f08:	08005223 	.word	0x08005223
 8004f0c:	0800525b 	.word	0x0800525b
 8004f10:	0800527f 	.word	0x0800527f
 8004f14:	2000020c 	.word	0x2000020c

08004f18 <stdio_exit_handler>:
 8004f18:	4a02      	ldr	r2, [pc, #8]	; (8004f24 <stdio_exit_handler+0xc>)
 8004f1a:	4903      	ldr	r1, [pc, #12]	; (8004f28 <stdio_exit_handler+0x10>)
 8004f1c:	4803      	ldr	r0, [pc, #12]	; (8004f2c <stdio_exit_handler+0x14>)
 8004f1e:	f000 b869 	b.w	8004ff4 <_fwalk_sglue>
 8004f22:	bf00      	nop
 8004f24:	20000040 	.word	0x20000040
 8004f28:	08005ee5 	.word	0x08005ee5
 8004f2c:	2000004c 	.word	0x2000004c

08004f30 <cleanup_stdio>:
 8004f30:	6841      	ldr	r1, [r0, #4]
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <cleanup_stdio+0x34>)
 8004f34:	4299      	cmp	r1, r3
 8004f36:	b510      	push	{r4, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	d001      	beq.n	8004f40 <cleanup_stdio+0x10>
 8004f3c:	f000 ffd2 	bl	8005ee4 <_fflush_r>
 8004f40:	68a1      	ldr	r1, [r4, #8]
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <cleanup_stdio+0x38>)
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d002      	beq.n	8004f4e <cleanup_stdio+0x1e>
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 ffcb 	bl	8005ee4 <_fflush_r>
 8004f4e:	68e1      	ldr	r1, [r4, #12]
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <cleanup_stdio+0x3c>)
 8004f52:	4299      	cmp	r1, r3
 8004f54:	d004      	beq.n	8004f60 <cleanup_stdio+0x30>
 8004f56:	4620      	mov	r0, r4
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f000 bfc2 	b.w	8005ee4 <_fflush_r>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	bf00      	nop
 8004f64:	2000020c 	.word	0x2000020c
 8004f68:	20000274 	.word	0x20000274
 8004f6c:	200002dc 	.word	0x200002dc

08004f70 <global_stdio_init.part.0>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <global_stdio_init.part.0+0x30>)
 8004f74:	4c0b      	ldr	r4, [pc, #44]	; (8004fa4 <global_stdio_init.part.0+0x34>)
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <global_stdio_init.part.0+0x38>)
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2104      	movs	r1, #4
 8004f80:	f7ff ff94 	bl	8004eac <std>
 8004f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2109      	movs	r1, #9
 8004f8c:	f7ff ff8e 	bl	8004eac <std>
 8004f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f94:	2202      	movs	r2, #2
 8004f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9a:	2112      	movs	r1, #18
 8004f9c:	f7ff bf86 	b.w	8004eac <std>
 8004fa0:	20000344 	.word	0x20000344
 8004fa4:	2000020c 	.word	0x2000020c
 8004fa8:	08004f19 	.word	0x08004f19

08004fac <__sfp_lock_acquire>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__sfp_lock_acquire+0x8>)
 8004fae:	f000 b9e4 	b.w	800537a <__retarget_lock_acquire_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	2000034d 	.word	0x2000034d

08004fb8 <__sfp_lock_release>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sfp_lock_release+0x8>)
 8004fba:	f000 b9df 	b.w	800537c <__retarget_lock_release_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	2000034d 	.word	0x2000034d

08004fc4 <__sinit>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	f7ff fff0 	bl	8004fac <__sfp_lock_acquire>
 8004fcc:	6a23      	ldr	r3, [r4, #32]
 8004fce:	b11b      	cbz	r3, 8004fd8 <__sinit+0x14>
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd4:	f7ff bff0 	b.w	8004fb8 <__sfp_lock_release>
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <__sinit+0x28>)
 8004fda:	6223      	str	r3, [r4, #32]
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <__sinit+0x2c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f5      	bne.n	8004fd0 <__sinit+0xc>
 8004fe4:	f7ff ffc4 	bl	8004f70 <global_stdio_init.part.0>
 8004fe8:	e7f2      	b.n	8004fd0 <__sinit+0xc>
 8004fea:	bf00      	nop
 8004fec:	08004f31 	.word	0x08004f31
 8004ff0:	20000344 	.word	0x20000344

08004ff4 <_fwalk_sglue>:
 8004ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	4607      	mov	r7, r0
 8004ffa:	4688      	mov	r8, r1
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	2600      	movs	r6, #0
 8005000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005004:	f1b9 0901 	subs.w	r9, r9, #1
 8005008:	d505      	bpl.n	8005016 <_fwalk_sglue+0x22>
 800500a:	6824      	ldr	r4, [r4, #0]
 800500c:	2c00      	cmp	r4, #0
 800500e:	d1f7      	bne.n	8005000 <_fwalk_sglue+0xc>
 8005010:	4630      	mov	r0, r6
 8005012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d907      	bls.n	800502c <_fwalk_sglue+0x38>
 800501c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005020:	3301      	adds	r3, #1
 8005022:	d003      	beq.n	800502c <_fwalk_sglue+0x38>
 8005024:	4629      	mov	r1, r5
 8005026:	4638      	mov	r0, r7
 8005028:	47c0      	blx	r8
 800502a:	4306      	orrs	r6, r0
 800502c:	3568      	adds	r5, #104	; 0x68
 800502e:	e7e9      	b.n	8005004 <_fwalk_sglue+0x10>

08005030 <iprintf>:
 8005030:	b40f      	push	{r0, r1, r2, r3}
 8005032:	b507      	push	{r0, r1, r2, lr}
 8005034:	4906      	ldr	r1, [pc, #24]	; (8005050 <iprintf+0x20>)
 8005036:	ab04      	add	r3, sp, #16
 8005038:	6808      	ldr	r0, [r1, #0]
 800503a:	f853 2b04 	ldr.w	r2, [r3], #4
 800503e:	6881      	ldr	r1, [r0, #8]
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	f000 fc1f 	bl	8005884 <_vfiprintf_r>
 8005046:	b003      	add	sp, #12
 8005048:	f85d eb04 	ldr.w	lr, [sp], #4
 800504c:	b004      	add	sp, #16
 800504e:	4770      	bx	lr
 8005050:	20000098 	.word	0x20000098

08005054 <setbuf>:
 8005054:	fab1 f281 	clz	r2, r1
 8005058:	0952      	lsrs	r2, r2, #5
 800505a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505e:	0052      	lsls	r2, r2, #1
 8005060:	f000 b800 	b.w	8005064 <setvbuf>

08005064 <setvbuf>:
 8005064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005068:	461d      	mov	r5, r3
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <setvbuf+0x158>)
 800506c:	681f      	ldr	r7, [r3, #0]
 800506e:	4604      	mov	r4, r0
 8005070:	460e      	mov	r6, r1
 8005072:	4690      	mov	r8, r2
 8005074:	b127      	cbz	r7, 8005080 <setvbuf+0x1c>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	b913      	cbnz	r3, 8005080 <setvbuf+0x1c>
 800507a:	4638      	mov	r0, r7
 800507c:	f7ff ffa2 	bl	8004fc4 <__sinit>
 8005080:	f1b8 0f02 	cmp.w	r8, #2
 8005084:	d006      	beq.n	8005094 <setvbuf+0x30>
 8005086:	f1b8 0f01 	cmp.w	r8, #1
 800508a:	f200 8094 	bhi.w	80051b6 <setvbuf+0x152>
 800508e:	2d00      	cmp	r5, #0
 8005090:	f2c0 8091 	blt.w	80051b6 <setvbuf+0x152>
 8005094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005096:	07da      	lsls	r2, r3, #31
 8005098:	d405      	bmi.n	80050a6 <setvbuf+0x42>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	059b      	lsls	r3, r3, #22
 800509e:	d402      	bmi.n	80050a6 <setvbuf+0x42>
 80050a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050a2:	f000 f96a 	bl	800537a <__retarget_lock_acquire_recursive>
 80050a6:	4621      	mov	r1, r4
 80050a8:	4638      	mov	r0, r7
 80050aa:	f000 ff1b 	bl	8005ee4 <_fflush_r>
 80050ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b0:	b141      	cbz	r1, 80050c4 <setvbuf+0x60>
 80050b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d002      	beq.n	80050c0 <setvbuf+0x5c>
 80050ba:	4638      	mov	r0, r7
 80050bc:	f000 f960 	bl	8005380 <_free_r>
 80050c0:	2300      	movs	r3, #0
 80050c2:	6363      	str	r3, [r4, #52]	; 0x34
 80050c4:	2300      	movs	r3, #0
 80050c6:	61a3      	str	r3, [r4, #24]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	0618      	lsls	r0, r3, #24
 80050ce:	d503      	bpl.n	80050d8 <setvbuf+0x74>
 80050d0:	6921      	ldr	r1, [r4, #16]
 80050d2:	4638      	mov	r0, r7
 80050d4:	f000 f954 	bl	8005380 <_free_r>
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	f1b8 0f02 	cmp.w	r8, #2
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	d05f      	beq.n	80051aa <setvbuf+0x146>
 80050ea:	ab01      	add	r3, sp, #4
 80050ec:	466a      	mov	r2, sp
 80050ee:	4621      	mov	r1, r4
 80050f0:	4638      	mov	r0, r7
 80050f2:	f000 ff1f 	bl	8005f34 <__swhatbuf_r>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	4318      	orrs	r0, r3
 80050fa:	81a0      	strh	r0, [r4, #12]
 80050fc:	bb2d      	cbnz	r5, 800514a <setvbuf+0xe6>
 80050fe:	9d00      	ldr	r5, [sp, #0]
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f989 	bl	8005418 <malloc>
 8005106:	4606      	mov	r6, r0
 8005108:	2800      	cmp	r0, #0
 800510a:	d150      	bne.n	80051ae <setvbuf+0x14a>
 800510c:	f8dd 9000 	ldr.w	r9, [sp]
 8005110:	45a9      	cmp	r9, r5
 8005112:	d13e      	bne.n	8005192 <setvbuf+0x12e>
 8005114:	f04f 35ff 	mov.w	r5, #4294967295
 8005118:	2200      	movs	r2, #0
 800511a:	60a2      	str	r2, [r4, #8]
 800511c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005120:	6022      	str	r2, [r4, #0]
 8005122:	6122      	str	r2, [r4, #16]
 8005124:	2201      	movs	r2, #1
 8005126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512a:	6162      	str	r2, [r4, #20]
 800512c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	07d1      	lsls	r1, r2, #31
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	d404      	bmi.n	8005142 <setvbuf+0xde>
 8005138:	059b      	lsls	r3, r3, #22
 800513a:	d402      	bmi.n	8005142 <setvbuf+0xde>
 800513c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513e:	f000 f91d 	bl	800537c <__retarget_lock_release_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800514a:	2e00      	cmp	r6, #0
 800514c:	d0d8      	beq.n	8005100 <setvbuf+0x9c>
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	b913      	cbnz	r3, 8005158 <setvbuf+0xf4>
 8005152:	4638      	mov	r0, r7
 8005154:	f7ff ff36 	bl	8004fc4 <__sinit>
 8005158:	f1b8 0f01 	cmp.w	r8, #1
 800515c:	bf08      	it	eq
 800515e:	89a3      	ldrheq	r3, [r4, #12]
 8005160:	6026      	str	r6, [r4, #0]
 8005162:	bf04      	itt	eq
 8005164:	f043 0301 	orreq.w	r3, r3, #1
 8005168:	81a3      	strheq	r3, [r4, #12]
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f013 0208 	ands.w	r2, r3, #8
 8005170:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005174:	d01d      	beq.n	80051b2 <setvbuf+0x14e>
 8005176:	07da      	lsls	r2, r3, #31
 8005178:	bf41      	itttt	mi
 800517a:	2200      	movmi	r2, #0
 800517c:	426d      	negmi	r5, r5
 800517e:	60a2      	strmi	r2, [r4, #8]
 8005180:	61a5      	strmi	r5, [r4, #24]
 8005182:	bf58      	it	pl
 8005184:	60a5      	strpl	r5, [r4, #8]
 8005186:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005188:	f015 0501 	ands.w	r5, r5, #1
 800518c:	d0d4      	beq.n	8005138 <setvbuf+0xd4>
 800518e:	2500      	movs	r5, #0
 8005190:	e7d7      	b.n	8005142 <setvbuf+0xde>
 8005192:	4648      	mov	r0, r9
 8005194:	f000 f940 	bl	8005418 <malloc>
 8005198:	4606      	mov	r6, r0
 800519a:	2800      	cmp	r0, #0
 800519c:	d0ba      	beq.n	8005114 <setvbuf+0xb0>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	464d      	mov	r5, r9
 80051a8:	e7d1      	b.n	800514e <setvbuf+0xea>
 80051aa:	2500      	movs	r5, #0
 80051ac:	e7b4      	b.n	8005118 <setvbuf+0xb4>
 80051ae:	46a9      	mov	r9, r5
 80051b0:	e7f5      	b.n	800519e <setvbuf+0x13a>
 80051b2:	60a2      	str	r2, [r4, #8]
 80051b4:	e7e7      	b.n	8005186 <setvbuf+0x122>
 80051b6:	f04f 35ff 	mov.w	r5, #4294967295
 80051ba:	e7c2      	b.n	8005142 <setvbuf+0xde>
 80051bc:	20000098 	.word	0x20000098

080051c0 <siprintf>:
 80051c0:	b40e      	push	{r1, r2, r3}
 80051c2:	b500      	push	{lr}
 80051c4:	b09c      	sub	sp, #112	; 0x70
 80051c6:	ab1d      	add	r3, sp, #116	; 0x74
 80051c8:	9002      	str	r0, [sp, #8]
 80051ca:	9006      	str	r0, [sp, #24]
 80051cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051d0:	4809      	ldr	r0, [pc, #36]	; (80051f8 <siprintf+0x38>)
 80051d2:	9107      	str	r1, [sp, #28]
 80051d4:	9104      	str	r1, [sp, #16]
 80051d6:	4909      	ldr	r1, [pc, #36]	; (80051fc <siprintf+0x3c>)
 80051d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051dc:	9105      	str	r1, [sp, #20]
 80051de:	6800      	ldr	r0, [r0, #0]
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	a902      	add	r1, sp, #8
 80051e4:	f000 fa26 	bl	8005634 <_svfiprintf_r>
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	b01c      	add	sp, #112	; 0x70
 80051f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f4:	b003      	add	sp, #12
 80051f6:	4770      	bx	lr
 80051f8:	20000098 	.word	0x20000098
 80051fc:	ffff0208 	.word	0xffff0208

08005200 <__sread>:
 8005200:	b510      	push	{r4, lr}
 8005202:	460c      	mov	r4, r1
 8005204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005208:	f000 f868 	bl	80052dc <_read_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	bfab      	itete	ge
 8005210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005212:	89a3      	ldrhlt	r3, [r4, #12]
 8005214:	181b      	addge	r3, r3, r0
 8005216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800521a:	bfac      	ite	ge
 800521c:	6563      	strge	r3, [r4, #84]	; 0x54
 800521e:	81a3      	strhlt	r3, [r4, #12]
 8005220:	bd10      	pop	{r4, pc}

08005222 <__swrite>:
 8005222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005226:	461f      	mov	r7, r3
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	05db      	lsls	r3, r3, #23
 800522c:	4605      	mov	r5, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4616      	mov	r6, r2
 8005232:	d505      	bpl.n	8005240 <__swrite+0x1e>
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	2302      	movs	r3, #2
 800523a:	2200      	movs	r2, #0
 800523c:	f000 f83c 	bl	80052b8 <_lseek_r>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	4632      	mov	r2, r6
 800524e:	463b      	mov	r3, r7
 8005250:	4628      	mov	r0, r5
 8005252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	f000 b853 	b.w	8005300 <_write_r>

0800525a <__sseek>:
 800525a:	b510      	push	{r4, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005262:	f000 f829 	bl	80052b8 <_lseek_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	bf15      	itete	ne
 800526c:	6560      	strne	r0, [r4, #84]	; 0x54
 800526e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005276:	81a3      	strheq	r3, [r4, #12]
 8005278:	bf18      	it	ne
 800527a:	81a3      	strhne	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__sclose>:
 800527e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005282:	f000 b809 	b.w	8005298 <_close_r>

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <_close_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	; (80052b4 <_close_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fc fe8b 	bl	8001fbe <_close>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_close_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_close_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	20000348 	.word	0x20000348

080052b8 <_lseek_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d07      	ldr	r5, [pc, #28]	; (80052d8 <_lseek_r+0x20>)
 80052bc:	4604      	mov	r4, r0
 80052be:	4608      	mov	r0, r1
 80052c0:	4611      	mov	r1, r2
 80052c2:	2200      	movs	r2, #0
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f7fc fea0 	bl	800200c <_lseek>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_lseek_r+0x1e>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_lseek_r+0x1e>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	20000348 	.word	0x20000348

080052dc <_read_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4d07      	ldr	r5, [pc, #28]	; (80052fc <_read_r+0x20>)
 80052e0:	4604      	mov	r4, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	602a      	str	r2, [r5, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f7fc fe4a 	bl	8001f84 <_read>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_read_r+0x1e>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_read_r+0x1e>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000348 	.word	0x20000348

08005300 <_write_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	; (8005320 <_write_r+0x20>)
 8005304:	4604      	mov	r4, r0
 8005306:	4608      	mov	r0, r1
 8005308:	4611      	mov	r1, r2
 800530a:	2200      	movs	r2, #0
 800530c:	602a      	str	r2, [r5, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	f7fc fb76 	bl	8001a00 <_write>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_write_r+0x1e>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_write_r+0x1e>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000348 	.word	0x20000348

08005324 <__errno>:
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <__errno+0x8>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000098 	.word	0x20000098

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f000 ff80 	bl	8006248 <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	080064c8 	.word	0x080064c8
 800536c:	080064c8 	.word	0x080064c8
 8005370:	080064c8 	.word	0x080064c8
 8005374:	080064cc 	.word	0x080064cc

08005378 <__retarget_lock_init_recursive>:
 8005378:	4770      	bx	lr

0800537a <__retarget_lock_acquire_recursive>:
 800537a:	4770      	bx	lr

0800537c <__retarget_lock_release_recursive>:
 800537c:	4770      	bx	lr
	...

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f8e7 	bl	8005568 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 b8e2 	b.w	8005574 <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	440c      	add	r4, r1
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	20000350 	.word	0x20000350

08005418 <malloc>:
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <malloc+0xc>)
 800541a:	4601      	mov	r1, r0
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f000 b823 	b.w	8005468 <_malloc_r>
 8005422:	bf00      	nop
 8005424:	20000098 	.word	0x20000098

08005428 <sbrk_aligned>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4e0e      	ldr	r6, [pc, #56]	; (8005464 <sbrk_aligned+0x3c>)
 800542c:	460c      	mov	r4, r1
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	4605      	mov	r5, r0
 8005432:	b911      	cbnz	r1, 800543a <sbrk_aligned+0x12>
 8005434:	f000 feb2 	bl	800619c <_sbrk_r>
 8005438:	6030      	str	r0, [r6, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 fead 	bl	800619c <_sbrk_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d00a      	beq.n	800545c <sbrk_aligned+0x34>
 8005446:	1cc4      	adds	r4, r0, #3
 8005448:	f024 0403 	bic.w	r4, r4, #3
 800544c:	42a0      	cmp	r0, r4
 800544e:	d007      	beq.n	8005460 <sbrk_aligned+0x38>
 8005450:	1a21      	subs	r1, r4, r0
 8005452:	4628      	mov	r0, r5
 8005454:	f000 fea2 	bl	800619c <_sbrk_r>
 8005458:	3001      	adds	r0, #1
 800545a:	d101      	bne.n	8005460 <sbrk_aligned+0x38>
 800545c:	f04f 34ff 	mov.w	r4, #4294967295
 8005460:	4620      	mov	r0, r4
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	20000354 	.word	0x20000354

08005468 <_malloc_r>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	1ccd      	adds	r5, r1, #3
 800546e:	f025 0503 	bic.w	r5, r5, #3
 8005472:	3508      	adds	r5, #8
 8005474:	2d0c      	cmp	r5, #12
 8005476:	bf38      	it	cc
 8005478:	250c      	movcc	r5, #12
 800547a:	2d00      	cmp	r5, #0
 800547c:	4607      	mov	r7, r0
 800547e:	db01      	blt.n	8005484 <_malloc_r+0x1c>
 8005480:	42a9      	cmp	r1, r5
 8005482:	d905      	bls.n	8005490 <_malloc_r+0x28>
 8005484:	230c      	movs	r3, #12
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	2600      	movs	r6, #0
 800548a:	4630      	mov	r0, r6
 800548c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005490:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005564 <_malloc_r+0xfc>
 8005494:	f000 f868 	bl	8005568 <__malloc_lock>
 8005498:	f8d8 3000 	ldr.w	r3, [r8]
 800549c:	461c      	mov	r4, r3
 800549e:	bb5c      	cbnz	r4, 80054f8 <_malloc_r+0x90>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	f7ff ffc0 	bl	8005428 <sbrk_aligned>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	4604      	mov	r4, r0
 80054ac:	d155      	bne.n	800555a <_malloc_r+0xf2>
 80054ae:	f8d8 4000 	ldr.w	r4, [r8]
 80054b2:	4626      	mov	r6, r4
 80054b4:	2e00      	cmp	r6, #0
 80054b6:	d145      	bne.n	8005544 <_malloc_r+0xdc>
 80054b8:	2c00      	cmp	r4, #0
 80054ba:	d048      	beq.n	800554e <_malloc_r+0xe6>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	4631      	mov	r1, r6
 80054c0:	4638      	mov	r0, r7
 80054c2:	eb04 0903 	add.w	r9, r4, r3
 80054c6:	f000 fe69 	bl	800619c <_sbrk_r>
 80054ca:	4581      	cmp	r9, r0
 80054cc:	d13f      	bne.n	800554e <_malloc_r+0xe6>
 80054ce:	6821      	ldr	r1, [r4, #0]
 80054d0:	1a6d      	subs	r5, r5, r1
 80054d2:	4629      	mov	r1, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff ffa7 	bl	8005428 <sbrk_aligned>
 80054da:	3001      	adds	r0, #1
 80054dc:	d037      	beq.n	800554e <_malloc_r+0xe6>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	442b      	add	r3, r5
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	f8d8 3000 	ldr.w	r3, [r8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d038      	beq.n	800555e <_malloc_r+0xf6>
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	42a2      	cmp	r2, r4
 80054f0:	d12b      	bne.n	800554a <_malloc_r+0xe2>
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	e00f      	b.n	8005518 <_malloc_r+0xb0>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	1b52      	subs	r2, r2, r5
 80054fc:	d41f      	bmi.n	800553e <_malloc_r+0xd6>
 80054fe:	2a0b      	cmp	r2, #11
 8005500:	d917      	bls.n	8005532 <_malloc_r+0xca>
 8005502:	1961      	adds	r1, r4, r5
 8005504:	42a3      	cmp	r3, r4
 8005506:	6025      	str	r5, [r4, #0]
 8005508:	bf18      	it	ne
 800550a:	6059      	strne	r1, [r3, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	bf08      	it	eq
 8005510:	f8c8 1000 	streq.w	r1, [r8]
 8005514:	5162      	str	r2, [r4, r5]
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	4638      	mov	r0, r7
 800551a:	f104 060b 	add.w	r6, r4, #11
 800551e:	f000 f829 	bl	8005574 <__malloc_unlock>
 8005522:	f026 0607 	bic.w	r6, r6, #7
 8005526:	1d23      	adds	r3, r4, #4
 8005528:	1af2      	subs	r2, r6, r3
 800552a:	d0ae      	beq.n	800548a <_malloc_r+0x22>
 800552c:	1b9b      	subs	r3, r3, r6
 800552e:	50a3      	str	r3, [r4, r2]
 8005530:	e7ab      	b.n	800548a <_malloc_r+0x22>
 8005532:	42a3      	cmp	r3, r4
 8005534:	6862      	ldr	r2, [r4, #4]
 8005536:	d1dd      	bne.n	80054f4 <_malloc_r+0x8c>
 8005538:	f8c8 2000 	str.w	r2, [r8]
 800553c:	e7ec      	b.n	8005518 <_malloc_r+0xb0>
 800553e:	4623      	mov	r3, r4
 8005540:	6864      	ldr	r4, [r4, #4]
 8005542:	e7ac      	b.n	800549e <_malloc_r+0x36>
 8005544:	4634      	mov	r4, r6
 8005546:	6876      	ldr	r6, [r6, #4]
 8005548:	e7b4      	b.n	80054b4 <_malloc_r+0x4c>
 800554a:	4613      	mov	r3, r2
 800554c:	e7cc      	b.n	80054e8 <_malloc_r+0x80>
 800554e:	230c      	movs	r3, #12
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4638      	mov	r0, r7
 8005554:	f000 f80e 	bl	8005574 <__malloc_unlock>
 8005558:	e797      	b.n	800548a <_malloc_r+0x22>
 800555a:	6025      	str	r5, [r4, #0]
 800555c:	e7dc      	b.n	8005518 <_malloc_r+0xb0>
 800555e:	605b      	str	r3, [r3, #4]
 8005560:	deff      	udf	#255	; 0xff
 8005562:	bf00      	nop
 8005564:	20000350 	.word	0x20000350

08005568 <__malloc_lock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_lock+0x8>)
 800556a:	f7ff bf06 	b.w	800537a <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	2000034c 	.word	0x2000034c

08005574 <__malloc_unlock>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__malloc_unlock+0x8>)
 8005576:	f7ff bf01 	b.w	800537c <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	2000034c 	.word	0x2000034c

08005580 <__ssputs_r>:
 8005580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	688e      	ldr	r6, [r1, #8]
 8005586:	461f      	mov	r7, r3
 8005588:	42be      	cmp	r6, r7
 800558a:	680b      	ldr	r3, [r1, #0]
 800558c:	4682      	mov	sl, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4690      	mov	r8, r2
 8005592:	d82c      	bhi.n	80055ee <__ssputs_r+0x6e>
 8005594:	898a      	ldrh	r2, [r1, #12]
 8005596:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559a:	d026      	beq.n	80055ea <__ssputs_r+0x6a>
 800559c:	6965      	ldr	r5, [r4, #20]
 800559e:	6909      	ldr	r1, [r1, #16]
 80055a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a4:	eba3 0901 	sub.w	r9, r3, r1
 80055a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ac:	1c7b      	adds	r3, r7, #1
 80055ae:	444b      	add	r3, r9
 80055b0:	106d      	asrs	r5, r5, #1
 80055b2:	429d      	cmp	r5, r3
 80055b4:	bf38      	it	cc
 80055b6:	461d      	movcc	r5, r3
 80055b8:	0553      	lsls	r3, r2, #21
 80055ba:	d527      	bpl.n	800560c <__ssputs_r+0x8c>
 80055bc:	4629      	mov	r1, r5
 80055be:	f7ff ff53 	bl	8005468 <_malloc_r>
 80055c2:	4606      	mov	r6, r0
 80055c4:	b360      	cbz	r0, 8005620 <__ssputs_r+0xa0>
 80055c6:	6921      	ldr	r1, [r4, #16]
 80055c8:	464a      	mov	r2, r9
 80055ca:	f000 fdf7 	bl	80061bc <memcpy>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	6126      	str	r6, [r4, #16]
 80055dc:	6165      	str	r5, [r4, #20]
 80055de:	444e      	add	r6, r9
 80055e0:	eba5 0509 	sub.w	r5, r5, r9
 80055e4:	6026      	str	r6, [r4, #0]
 80055e6:	60a5      	str	r5, [r4, #8]
 80055e8:	463e      	mov	r6, r7
 80055ea:	42be      	cmp	r6, r7
 80055ec:	d900      	bls.n	80055f0 <__ssputs_r+0x70>
 80055ee:	463e      	mov	r6, r7
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	4632      	mov	r2, r6
 80055f4:	4641      	mov	r1, r8
 80055f6:	f000 fd95 	bl	8006124 <memmove>
 80055fa:	68a3      	ldr	r3, [r4, #8]
 80055fc:	1b9b      	subs	r3, r3, r6
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	4433      	add	r3, r6
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2000      	movs	r0, #0
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560c:	462a      	mov	r2, r5
 800560e:	f000 fde3 	bl	80061d8 <_realloc_r>
 8005612:	4606      	mov	r6, r0
 8005614:	2800      	cmp	r0, #0
 8005616:	d1e0      	bne.n	80055da <__ssputs_r+0x5a>
 8005618:	6921      	ldr	r1, [r4, #16]
 800561a:	4650      	mov	r0, sl
 800561c:	f7ff feb0 	bl	8005380 <_free_r>
 8005620:	230c      	movs	r3, #12
 8005622:	f8ca 3000 	str.w	r3, [sl]
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	e7e9      	b.n	8005608 <__ssputs_r+0x88>

08005634 <_svfiprintf_r>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	4698      	mov	r8, r3
 800563a:	898b      	ldrh	r3, [r1, #12]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	b09d      	sub	sp, #116	; 0x74
 8005640:	4607      	mov	r7, r0
 8005642:	460d      	mov	r5, r1
 8005644:	4614      	mov	r4, r2
 8005646:	d50e      	bpl.n	8005666 <_svfiprintf_r+0x32>
 8005648:	690b      	ldr	r3, [r1, #16]
 800564a:	b963      	cbnz	r3, 8005666 <_svfiprintf_r+0x32>
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	f7ff ff0b 	bl	8005468 <_malloc_r>
 8005652:	6028      	str	r0, [r5, #0]
 8005654:	6128      	str	r0, [r5, #16]
 8005656:	b920      	cbnz	r0, 8005662 <_svfiprintf_r+0x2e>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	e0d0      	b.n	8005804 <_svfiprintf_r+0x1d0>
 8005662:	2340      	movs	r3, #64	; 0x40
 8005664:	616b      	str	r3, [r5, #20]
 8005666:	2300      	movs	r3, #0
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	2320      	movs	r3, #32
 800566c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005670:	f8cd 800c 	str.w	r8, [sp, #12]
 8005674:	2330      	movs	r3, #48	; 0x30
 8005676:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800581c <_svfiprintf_r+0x1e8>
 800567a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567e:	f04f 0901 	mov.w	r9, #1
 8005682:	4623      	mov	r3, r4
 8005684:	469a      	mov	sl, r3
 8005686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800568a:	b10a      	cbz	r2, 8005690 <_svfiprintf_r+0x5c>
 800568c:	2a25      	cmp	r2, #37	; 0x25
 800568e:	d1f9      	bne.n	8005684 <_svfiprintf_r+0x50>
 8005690:	ebba 0b04 	subs.w	fp, sl, r4
 8005694:	d00b      	beq.n	80056ae <_svfiprintf_r+0x7a>
 8005696:	465b      	mov	r3, fp
 8005698:	4622      	mov	r2, r4
 800569a:	4629      	mov	r1, r5
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff ff6f 	bl	8005580 <__ssputs_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	f000 80a9 	beq.w	80057fa <_svfiprintf_r+0x1c6>
 80056a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056aa:	445a      	add	r2, fp
 80056ac:	9209      	str	r2, [sp, #36]	; 0x24
 80056ae:	f89a 3000 	ldrb.w	r3, [sl]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80a1 	beq.w	80057fa <_svfiprintf_r+0x1c6>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056c2:	f10a 0a01 	add.w	sl, sl, #1
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	9307      	str	r3, [sp, #28]
 80056ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ce:	931a      	str	r3, [sp, #104]	; 0x68
 80056d0:	4654      	mov	r4, sl
 80056d2:	2205      	movs	r2, #5
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	4850      	ldr	r0, [pc, #320]	; (800581c <_svfiprintf_r+0x1e8>)
 80056da:	f7fa fd99 	bl	8000210 <memchr>
 80056de:	9a04      	ldr	r2, [sp, #16]
 80056e0:	b9d8      	cbnz	r0, 800571a <_svfiprintf_r+0xe6>
 80056e2:	06d0      	lsls	r0, r2, #27
 80056e4:	bf44      	itt	mi
 80056e6:	2320      	movmi	r3, #32
 80056e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ec:	0711      	lsls	r1, r2, #28
 80056ee:	bf44      	itt	mi
 80056f0:	232b      	movmi	r3, #43	; 0x2b
 80056f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f6:	f89a 3000 	ldrb.w	r3, [sl]
 80056fa:	2b2a      	cmp	r3, #42	; 0x2a
 80056fc:	d015      	beq.n	800572a <_svfiprintf_r+0xf6>
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	4654      	mov	r4, sl
 8005702:	2000      	movs	r0, #0
 8005704:	f04f 0c0a 	mov.w	ip, #10
 8005708:	4621      	mov	r1, r4
 800570a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800570e:	3b30      	subs	r3, #48	; 0x30
 8005710:	2b09      	cmp	r3, #9
 8005712:	d94d      	bls.n	80057b0 <_svfiprintf_r+0x17c>
 8005714:	b1b0      	cbz	r0, 8005744 <_svfiprintf_r+0x110>
 8005716:	9207      	str	r2, [sp, #28]
 8005718:	e014      	b.n	8005744 <_svfiprintf_r+0x110>
 800571a:	eba0 0308 	sub.w	r3, r0, r8
 800571e:	fa09 f303 	lsl.w	r3, r9, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	46a2      	mov	sl, r4
 8005728:	e7d2      	b.n	80056d0 <_svfiprintf_r+0x9c>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	1d19      	adds	r1, r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9103      	str	r1, [sp, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfbb      	ittet	lt
 8005736:	425b      	neglt	r3, r3
 8005738:	f042 0202 	orrlt.w	r2, r2, #2
 800573c:	9307      	strge	r3, [sp, #28]
 800573e:	9307      	strlt	r3, [sp, #28]
 8005740:	bfb8      	it	lt
 8005742:	9204      	strlt	r2, [sp, #16]
 8005744:	7823      	ldrb	r3, [r4, #0]
 8005746:	2b2e      	cmp	r3, #46	; 0x2e
 8005748:	d10c      	bne.n	8005764 <_svfiprintf_r+0x130>
 800574a:	7863      	ldrb	r3, [r4, #1]
 800574c:	2b2a      	cmp	r3, #42	; 0x2a
 800574e:	d134      	bne.n	80057ba <_svfiprintf_r+0x186>
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	9203      	str	r2, [sp, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	bfb8      	it	lt
 800575c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005760:	3402      	adds	r4, #2
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800582c <_svfiprintf_r+0x1f8>
 8005768:	7821      	ldrb	r1, [r4, #0]
 800576a:	2203      	movs	r2, #3
 800576c:	4650      	mov	r0, sl
 800576e:	f7fa fd4f 	bl	8000210 <memchr>
 8005772:	b138      	cbz	r0, 8005784 <_svfiprintf_r+0x150>
 8005774:	9b04      	ldr	r3, [sp, #16]
 8005776:	eba0 000a 	sub.w	r0, r0, sl
 800577a:	2240      	movs	r2, #64	; 0x40
 800577c:	4082      	lsls	r2, r0
 800577e:	4313      	orrs	r3, r2
 8005780:	3401      	adds	r4, #1
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005788:	4825      	ldr	r0, [pc, #148]	; (8005820 <_svfiprintf_r+0x1ec>)
 800578a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800578e:	2206      	movs	r2, #6
 8005790:	f7fa fd3e 	bl	8000210 <memchr>
 8005794:	2800      	cmp	r0, #0
 8005796:	d038      	beq.n	800580a <_svfiprintf_r+0x1d6>
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <_svfiprintf_r+0x1f0>)
 800579a:	bb1b      	cbnz	r3, 80057e4 <_svfiprintf_r+0x1b0>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	3307      	adds	r3, #7
 80057a0:	f023 0307 	bic.w	r3, r3, #7
 80057a4:	3308      	adds	r3, #8
 80057a6:	9303      	str	r3, [sp, #12]
 80057a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057aa:	4433      	add	r3, r6
 80057ac:	9309      	str	r3, [sp, #36]	; 0x24
 80057ae:	e768      	b.n	8005682 <_svfiprintf_r+0x4e>
 80057b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b4:	460c      	mov	r4, r1
 80057b6:	2001      	movs	r0, #1
 80057b8:	e7a6      	b.n	8005708 <_svfiprintf_r+0xd4>
 80057ba:	2300      	movs	r3, #0
 80057bc:	3401      	adds	r4, #1
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	4619      	mov	r1, r3
 80057c2:	f04f 0c0a 	mov.w	ip, #10
 80057c6:	4620      	mov	r0, r4
 80057c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057cc:	3a30      	subs	r2, #48	; 0x30
 80057ce:	2a09      	cmp	r2, #9
 80057d0:	d903      	bls.n	80057da <_svfiprintf_r+0x1a6>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c6      	beq.n	8005764 <_svfiprintf_r+0x130>
 80057d6:	9105      	str	r1, [sp, #20]
 80057d8:	e7c4      	b.n	8005764 <_svfiprintf_r+0x130>
 80057da:	fb0c 2101 	mla	r1, ip, r1, r2
 80057de:	4604      	mov	r4, r0
 80057e0:	2301      	movs	r3, #1
 80057e2:	e7f0      	b.n	80057c6 <_svfiprintf_r+0x192>
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	462a      	mov	r2, r5
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <_svfiprintf_r+0x1f4>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	4638      	mov	r0, r7
 80057f0:	f3af 8000 	nop.w
 80057f4:	1c42      	adds	r2, r0, #1
 80057f6:	4606      	mov	r6, r0
 80057f8:	d1d6      	bne.n	80057a8 <_svfiprintf_r+0x174>
 80057fa:	89ab      	ldrh	r3, [r5, #12]
 80057fc:	065b      	lsls	r3, r3, #25
 80057fe:	f53f af2d 	bmi.w	800565c <_svfiprintf_r+0x28>
 8005802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005804:	b01d      	add	sp, #116	; 0x74
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	ab03      	add	r3, sp, #12
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	462a      	mov	r2, r5
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <_svfiprintf_r+0x1f4>)
 8005812:	a904      	add	r1, sp, #16
 8005814:	4638      	mov	r0, r7
 8005816:	f000 f9bd 	bl	8005b94 <_printf_i>
 800581a:	e7eb      	b.n	80057f4 <_svfiprintf_r+0x1c0>
 800581c:	0800648c 	.word	0x0800648c
 8005820:	08006496 	.word	0x08006496
 8005824:	00000000 	.word	0x00000000
 8005828:	08005581 	.word	0x08005581
 800582c:	08006492 	.word	0x08006492

08005830 <__sfputc_r>:
 8005830:	6893      	ldr	r3, [r2, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	b410      	push	{r4}
 8005838:	6093      	str	r3, [r2, #8]
 800583a:	da08      	bge.n	800584e <__sfputc_r+0x1e>
 800583c:	6994      	ldr	r4, [r2, #24]
 800583e:	42a3      	cmp	r3, r4
 8005840:	db01      	blt.n	8005846 <__sfputc_r+0x16>
 8005842:	290a      	cmp	r1, #10
 8005844:	d103      	bne.n	800584e <__sfputc_r+0x1e>
 8005846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800584a:	f000 bbd5 	b.w	8005ff8 <__swbuf_r>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	1c58      	adds	r0, r3, #1
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	7019      	strb	r1, [r3, #0]
 8005856:	4608      	mov	r0, r1
 8005858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800585c:	4770      	bx	lr

0800585e <__sfputs_r>:
 800585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005860:	4606      	mov	r6, r0
 8005862:	460f      	mov	r7, r1
 8005864:	4614      	mov	r4, r2
 8005866:	18d5      	adds	r5, r2, r3
 8005868:	42ac      	cmp	r4, r5
 800586a:	d101      	bne.n	8005870 <__sfputs_r+0x12>
 800586c:	2000      	movs	r0, #0
 800586e:	e007      	b.n	8005880 <__sfputs_r+0x22>
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	463a      	mov	r2, r7
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff ffda 	bl	8005830 <__sfputc_r>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d1f3      	bne.n	8005868 <__sfputs_r+0xa>
 8005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005884 <_vfiprintf_r>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	460d      	mov	r5, r1
 800588a:	b09d      	sub	sp, #116	; 0x74
 800588c:	4614      	mov	r4, r2
 800588e:	4698      	mov	r8, r3
 8005890:	4606      	mov	r6, r0
 8005892:	b118      	cbz	r0, 800589c <_vfiprintf_r+0x18>
 8005894:	6a03      	ldr	r3, [r0, #32]
 8005896:	b90b      	cbnz	r3, 800589c <_vfiprintf_r+0x18>
 8005898:	f7ff fb94 	bl	8004fc4 <__sinit>
 800589c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	d405      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a2:	89ab      	ldrh	r3, [r5, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058aa:	f7ff fd66 	bl	800537a <__retarget_lock_acquire_recursive>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	d501      	bpl.n	80058b8 <_vfiprintf_r+0x34>
 80058b4:	692b      	ldr	r3, [r5, #16]
 80058b6:	b99b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x5c>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 fbda 	bl	8006074 <__swsetup_r>
 80058c0:	b170      	cbz	r0, 80058e0 <_vfiprintf_r+0x5c>
 80058c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058c4:	07dc      	lsls	r4, r3, #31
 80058c6:	d504      	bpl.n	80058d2 <_vfiprintf_r+0x4e>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b01d      	add	sp, #116	; 0x74
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	0598      	lsls	r0, r3, #22
 80058d6:	d4f7      	bmi.n	80058c8 <_vfiprintf_r+0x44>
 80058d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058da:	f7ff fd4f 	bl	800537c <__retarget_lock_release_recursive>
 80058de:	e7f3      	b.n	80058c8 <_vfiprintf_r+0x44>
 80058e0:	2300      	movs	r3, #0
 80058e2:	9309      	str	r3, [sp, #36]	; 0x24
 80058e4:	2320      	movs	r3, #32
 80058e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ee:	2330      	movs	r3, #48	; 0x30
 80058f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005aa4 <_vfiprintf_r+0x220>
 80058f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058f8:	f04f 0901 	mov.w	r9, #1
 80058fc:	4623      	mov	r3, r4
 80058fe:	469a      	mov	sl, r3
 8005900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005904:	b10a      	cbz	r2, 800590a <_vfiprintf_r+0x86>
 8005906:	2a25      	cmp	r2, #37	; 0x25
 8005908:	d1f9      	bne.n	80058fe <_vfiprintf_r+0x7a>
 800590a:	ebba 0b04 	subs.w	fp, sl, r4
 800590e:	d00b      	beq.n	8005928 <_vfiprintf_r+0xa4>
 8005910:	465b      	mov	r3, fp
 8005912:	4622      	mov	r2, r4
 8005914:	4629      	mov	r1, r5
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ffa1 	bl	800585e <__sfputs_r>
 800591c:	3001      	adds	r0, #1
 800591e:	f000 80a9 	beq.w	8005a74 <_vfiprintf_r+0x1f0>
 8005922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005924:	445a      	add	r2, fp
 8005926:	9209      	str	r2, [sp, #36]	; 0x24
 8005928:	f89a 3000 	ldrb.w	r3, [sl]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80a1 	beq.w	8005a74 <_vfiprintf_r+0x1f0>
 8005932:	2300      	movs	r3, #0
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800593c:	f10a 0a01 	add.w	sl, sl, #1
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005948:	931a      	str	r3, [sp, #104]	; 0x68
 800594a:	4654      	mov	r4, sl
 800594c:	2205      	movs	r2, #5
 800594e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005952:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <_vfiprintf_r+0x220>)
 8005954:	f7fa fc5c 	bl	8000210 <memchr>
 8005958:	9a04      	ldr	r2, [sp, #16]
 800595a:	b9d8      	cbnz	r0, 8005994 <_vfiprintf_r+0x110>
 800595c:	06d1      	lsls	r1, r2, #27
 800595e:	bf44      	itt	mi
 8005960:	2320      	movmi	r3, #32
 8005962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005966:	0713      	lsls	r3, r2, #28
 8005968:	bf44      	itt	mi
 800596a:	232b      	movmi	r3, #43	; 0x2b
 800596c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005970:	f89a 3000 	ldrb.w	r3, [sl]
 8005974:	2b2a      	cmp	r3, #42	; 0x2a
 8005976:	d015      	beq.n	80059a4 <_vfiprintf_r+0x120>
 8005978:	9a07      	ldr	r2, [sp, #28]
 800597a:	4654      	mov	r4, sl
 800597c:	2000      	movs	r0, #0
 800597e:	f04f 0c0a 	mov.w	ip, #10
 8005982:	4621      	mov	r1, r4
 8005984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005988:	3b30      	subs	r3, #48	; 0x30
 800598a:	2b09      	cmp	r3, #9
 800598c:	d94d      	bls.n	8005a2a <_vfiprintf_r+0x1a6>
 800598e:	b1b0      	cbz	r0, 80059be <_vfiprintf_r+0x13a>
 8005990:	9207      	str	r2, [sp, #28]
 8005992:	e014      	b.n	80059be <_vfiprintf_r+0x13a>
 8005994:	eba0 0308 	sub.w	r3, r0, r8
 8005998:	fa09 f303 	lsl.w	r3, r9, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	46a2      	mov	sl, r4
 80059a2:	e7d2      	b.n	800594a <_vfiprintf_r+0xc6>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	1d19      	adds	r1, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbb      	ittet	lt
 80059b0:	425b      	neglt	r3, r3
 80059b2:	f042 0202 	orrlt.w	r2, r2, #2
 80059b6:	9307      	strge	r3, [sp, #28]
 80059b8:	9307      	strlt	r3, [sp, #28]
 80059ba:	bfb8      	it	lt
 80059bc:	9204      	strlt	r2, [sp, #16]
 80059be:	7823      	ldrb	r3, [r4, #0]
 80059c0:	2b2e      	cmp	r3, #46	; 0x2e
 80059c2:	d10c      	bne.n	80059de <_vfiprintf_r+0x15a>
 80059c4:	7863      	ldrb	r3, [r4, #1]
 80059c6:	2b2a      	cmp	r3, #42	; 0x2a
 80059c8:	d134      	bne.n	8005a34 <_vfiprintf_r+0x1b0>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	1d1a      	adds	r2, r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	9203      	str	r2, [sp, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfb8      	it	lt
 80059d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80059da:	3402      	adds	r4, #2
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ab4 <_vfiprintf_r+0x230>
 80059e2:	7821      	ldrb	r1, [r4, #0]
 80059e4:	2203      	movs	r2, #3
 80059e6:	4650      	mov	r0, sl
 80059e8:	f7fa fc12 	bl	8000210 <memchr>
 80059ec:	b138      	cbz	r0, 80059fe <_vfiprintf_r+0x17a>
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	eba0 000a 	sub.w	r0, r0, sl
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	4082      	lsls	r2, r0
 80059f8:	4313      	orrs	r3, r2
 80059fa:	3401      	adds	r4, #1
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a02:	4829      	ldr	r0, [pc, #164]	; (8005aa8 <_vfiprintf_r+0x224>)
 8005a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a08:	2206      	movs	r2, #6
 8005a0a:	f7fa fc01 	bl	8000210 <memchr>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d03f      	beq.n	8005a92 <_vfiprintf_r+0x20e>
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <_vfiprintf_r+0x228>)
 8005a14:	bb1b      	cbnz	r3, 8005a5e <_vfiprintf_r+0x1da>
 8005a16:	9b03      	ldr	r3, [sp, #12]
 8005a18:	3307      	adds	r3, #7
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	3308      	adds	r3, #8
 8005a20:	9303      	str	r3, [sp, #12]
 8005a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a24:	443b      	add	r3, r7
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	e768      	b.n	80058fc <_vfiprintf_r+0x78>
 8005a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a2e:	460c      	mov	r4, r1
 8005a30:	2001      	movs	r0, #1
 8005a32:	e7a6      	b.n	8005982 <_vfiprintf_r+0xfe>
 8005a34:	2300      	movs	r3, #0
 8005a36:	3401      	adds	r4, #1
 8005a38:	9305      	str	r3, [sp, #20]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f04f 0c0a 	mov.w	ip, #10
 8005a40:	4620      	mov	r0, r4
 8005a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a46:	3a30      	subs	r2, #48	; 0x30
 8005a48:	2a09      	cmp	r2, #9
 8005a4a:	d903      	bls.n	8005a54 <_vfiprintf_r+0x1d0>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0c6      	beq.n	80059de <_vfiprintf_r+0x15a>
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	e7c4      	b.n	80059de <_vfiprintf_r+0x15a>
 8005a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a58:	4604      	mov	r4, r0
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e7f0      	b.n	8005a40 <_vfiprintf_r+0x1bc>
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <_vfiprintf_r+0x22c>)
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f3af 8000 	nop.w
 8005a6e:	4607      	mov	r7, r0
 8005a70:	1c78      	adds	r0, r7, #1
 8005a72:	d1d6      	bne.n	8005a22 <_vfiprintf_r+0x19e>
 8005a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <_vfiprintf_r+0x202>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	059a      	lsls	r2, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_vfiprintf_r+0x202>
 8005a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a82:	f7ff fc7b 	bl	800537c <__retarget_lock_release_recursive>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	065b      	lsls	r3, r3, #25
 8005a8a:	f53f af1d 	bmi.w	80058c8 <_vfiprintf_r+0x44>
 8005a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a90:	e71c      	b.n	80058cc <_vfiprintf_r+0x48>
 8005a92:	ab03      	add	r3, sp, #12
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	462a      	mov	r2, r5
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <_vfiprintf_r+0x22c>)
 8005a9a:	a904      	add	r1, sp, #16
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f879 	bl	8005b94 <_printf_i>
 8005aa2:	e7e4      	b.n	8005a6e <_vfiprintf_r+0x1ea>
 8005aa4:	0800648c 	.word	0x0800648c
 8005aa8:	08006496 	.word	0x08006496
 8005aac:	00000000 	.word	0x00000000
 8005ab0:	0800585f 	.word	0x0800585f
 8005ab4:	08006492 	.word	0x08006492

08005ab8 <_printf_common>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	4616      	mov	r6, r2
 8005abe:	4699      	mov	r9, r3
 8005ac0:	688a      	ldr	r2, [r1, #8]
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bfb8      	it	lt
 8005acc:	4613      	movlt	r3, r2
 8005ace:	6033      	str	r3, [r6, #0]
 8005ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	b10a      	cbz	r2, 8005ade <_printf_common+0x26>
 8005ada:	3301      	adds	r3, #1
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	0699      	lsls	r1, r3, #26
 8005ae2:	bf42      	ittt	mi
 8005ae4:	6833      	ldrmi	r3, [r6, #0]
 8005ae6:	3302      	addmi	r3, #2
 8005ae8:	6033      	strmi	r3, [r6, #0]
 8005aea:	6825      	ldr	r5, [r4, #0]
 8005aec:	f015 0506 	ands.w	r5, r5, #6
 8005af0:	d106      	bne.n	8005b00 <_printf_common+0x48>
 8005af2:	f104 0a19 	add.w	sl, r4, #25
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	6832      	ldr	r2, [r6, #0]
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	42ab      	cmp	r3, r5
 8005afe:	dc26      	bgt.n	8005b4e <_printf_common+0x96>
 8005b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b04:	1e13      	subs	r3, r2, #0
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	bf18      	it	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	0692      	lsls	r2, r2, #26
 8005b0e:	d42b      	bmi.n	8005b68 <_printf_common+0xb0>
 8005b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b14:	4649      	mov	r1, r9
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d01e      	beq.n	8005b5c <_printf_common+0xa4>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	6922      	ldr	r2, [r4, #16]
 8005b22:	f003 0306 	and.w	r3, r3, #6
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	bf02      	ittt	eq
 8005b2a:	68e5      	ldreq	r5, [r4, #12]
 8005b2c:	6833      	ldreq	r3, [r6, #0]
 8005b2e:	1aed      	subeq	r5, r5, r3
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	bf0c      	ite	eq
 8005b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b38:	2500      	movne	r5, #0
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	bfc4      	itt	gt
 8005b3e:	1a9b      	subgt	r3, r3, r2
 8005b40:	18ed      	addgt	r5, r5, r3
 8005b42:	2600      	movs	r6, #0
 8005b44:	341a      	adds	r4, #26
 8005b46:	42b5      	cmp	r5, r6
 8005b48:	d11a      	bne.n	8005b80 <_printf_common+0xc8>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e008      	b.n	8005b60 <_printf_common+0xa8>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4649      	mov	r1, r9
 8005b54:	4638      	mov	r0, r7
 8005b56:	47c0      	blx	r8
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d103      	bne.n	8005b64 <_printf_common+0xac>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7c6      	b.n	8005af6 <_printf_common+0x3e>
 8005b68:	18e1      	adds	r1, r4, r3
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	2030      	movs	r0, #48	; 0x30
 8005b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b72:	4422      	add	r2, r4
 8005b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	e7c7      	b.n	8005b10 <_printf_common+0x58>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4622      	mov	r2, r4
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d0e6      	beq.n	8005b5c <_printf_common+0xa4>
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7d9      	b.n	8005b46 <_printf_common+0x8e>
	...

08005b94 <_printf_i>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	7e0f      	ldrb	r7, [r1, #24]
 8005b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4691      	mov	r9, r2
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005baa:	d807      	bhi.n	8005bbc <_printf_i+0x28>
 8005bac:	2f62      	cmp	r7, #98	; 0x62
 8005bae:	d80a      	bhi.n	8005bc6 <_printf_i+0x32>
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	f000 80d4 	beq.w	8005d5e <_printf_i+0x1ca>
 8005bb6:	2f58      	cmp	r7, #88	; 0x58
 8005bb8:	f000 80c0 	beq.w	8005d3c <_printf_i+0x1a8>
 8005bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc4:	e03a      	b.n	8005c3c <_printf_i+0xa8>
 8005bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bca:	2b15      	cmp	r3, #21
 8005bcc:	d8f6      	bhi.n	8005bbc <_printf_i+0x28>
 8005bce:	a101      	add	r1, pc, #4	; (adr r1, 8005bd4 <_printf_i+0x40>)
 8005bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005bbd 	.word	0x08005bbd
 8005be0:	08005bbd 	.word	0x08005bbd
 8005be4:	08005bbd 	.word	0x08005bbd
 8005be8:	08005bbd 	.word	0x08005bbd
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005bbd 	.word	0x08005bbd
 8005bf4:	08005bbd 	.word	0x08005bbd
 8005bf8:	08005bbd 	.word	0x08005bbd
 8005bfc:	08005bbd 	.word	0x08005bbd
 8005c00:	08005d45 	.word	0x08005d45
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005cff 	.word	0x08005cff
 8005c0c:	08005bbd 	.word	0x08005bbd
 8005c10:	08005bbd 	.word	0x08005bbd
 8005c14:	08005d67 	.word	0x08005d67
 8005c18:	08005bbd 	.word	0x08005bbd
 8005c1c:	08005c6d 	.word	0x08005c6d
 8005c20:	08005bbd 	.word	0x08005bbd
 8005c24:	08005bbd 	.word	0x08005bbd
 8005c28:	08005d07 	.word	0x08005d07
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e09f      	b.n	8005d80 <_printf_i+0x1ec>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	0607      	lsls	r7, r0, #24
 8005c46:	f103 0104 	add.w	r1, r3, #4
 8005c4a:	6029      	str	r1, [r5, #0]
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0xbe>
 8005c4e:	681e      	ldr	r6, [r3, #0]
 8005c50:	e003      	b.n	8005c5a <_printf_i+0xc6>
 8005c52:	0646      	lsls	r6, r0, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0xba>
 8005c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	da03      	bge.n	8005c66 <_printf_i+0xd2>
 8005c5e:	232d      	movs	r3, #45	; 0x2d
 8005c60:	4276      	negs	r6, r6
 8005c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c66:	485a      	ldr	r0, [pc, #360]	; (8005dd0 <_printf_i+0x23c>)
 8005c68:	230a      	movs	r3, #10
 8005c6a:	e012      	b.n	8005c92 <_printf_i+0xfe>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6029      	str	r1, [r5, #0]
 8005c74:	0605      	lsls	r5, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xe8>
 8005c78:	681e      	ldr	r6, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xee>
 8005c7c:	0641      	lsls	r1, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe4>
 8005c80:	881e      	ldrh	r6, [r3, #0]
 8005c82:	4853      	ldr	r0, [pc, #332]	; (8005dd0 <_printf_i+0x23c>)
 8005c84:	2f6f      	cmp	r7, #111	; 0x6f
 8005c86:	bf0c      	ite	eq
 8005c88:	2308      	moveq	r3, #8
 8005c8a:	230a      	movne	r3, #10
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6865      	ldr	r5, [r4, #4]
 8005c94:	60a5      	str	r5, [r4, #8]
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90e      	cbnz	r6, 8005ca8 <_printf_i+0x114>
 8005ca4:	2d00      	cmp	r5, #0
 8005ca6:	d04b      	beq.n	8005d40 <_printf_i+0x1ac>
 8005ca8:	4615      	mov	r5, r2
 8005caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cae:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb8:	4637      	mov	r7, r6
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460e      	mov	r6, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x116>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x148>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07de      	lsls	r6, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x148>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	; 0x30
 8005cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cdc:	1b52      	subs	r2, r2, r5
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee4 	bl	8005ab8 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14a      	bne.n	8005d8a <_printf_i+0x1f6>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f043 0320 	orr.w	r3, r3, #32
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	4833      	ldr	r0, [pc, #204]	; (8005dd4 <_printf_i+0x240>)
 8005d08:	2778      	movs	r7, #120	; 0x78
 8005d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6829      	ldr	r1, [r5, #0]
 8005d12:	061f      	lsls	r7, r3, #24
 8005d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d18:	d402      	bmi.n	8005d20 <_printf_i+0x18c>
 8005d1a:	065f      	lsls	r7, r3, #25
 8005d1c:	bf48      	it	mi
 8005d1e:	b2b6      	uxthmi	r6, r6
 8005d20:	07df      	lsls	r7, r3, #31
 8005d22:	bf48      	it	mi
 8005d24:	f043 0320 	orrmi.w	r3, r3, #32
 8005d28:	6029      	str	r1, [r5, #0]
 8005d2a:	bf48      	it	mi
 8005d2c:	6023      	strmi	r3, [r4, #0]
 8005d2e:	b91e      	cbnz	r6, 8005d38 <_printf_i+0x1a4>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	f023 0320 	bic.w	r3, r3, #32
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	2310      	movs	r3, #16
 8005d3a:	e7a7      	b.n	8005c8c <_printf_i+0xf8>
 8005d3c:	4824      	ldr	r0, [pc, #144]	; (8005dd0 <_printf_i+0x23c>)
 8005d3e:	e7e4      	b.n	8005d0a <_printf_i+0x176>
 8005d40:	4615      	mov	r5, r2
 8005d42:	e7bd      	b.n	8005cc0 <_printf_i+0x12c>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	6826      	ldr	r6, [r4, #0]
 8005d48:	6961      	ldr	r1, [r4, #20]
 8005d4a:	1d18      	adds	r0, r3, #4
 8005d4c:	6028      	str	r0, [r5, #0]
 8005d4e:	0635      	lsls	r5, r6, #24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	d501      	bpl.n	8005d58 <_printf_i+0x1c4>
 8005d54:	6019      	str	r1, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <_printf_i+0x1ca>
 8005d58:	0670      	lsls	r0, r6, #25
 8005d5a:	d5fb      	bpl.n	8005d54 <_printf_i+0x1c0>
 8005d5c:	8019      	strh	r1, [r3, #0]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	4615      	mov	r5, r2
 8005d64:	e7bc      	b.n	8005ce0 <_printf_i+0x14c>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	602a      	str	r2, [r5, #0]
 8005d6c:	681d      	ldr	r5, [r3, #0]
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	2100      	movs	r1, #0
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7fa fa4c 	bl	8000210 <memchr>
 8005d78:	b108      	cbz	r0, 8005d7e <_printf_i+0x1ea>
 8005d7a:	1b40      	subs	r0, r0, r5
 8005d7c:	6060      	str	r0, [r4, #4]
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	2300      	movs	r3, #0
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	e7aa      	b.n	8005ce0 <_printf_i+0x14c>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	47d0      	blx	sl
 8005d94:	3001      	adds	r0, #1
 8005d96:	d0ad      	beq.n	8005cf4 <_printf_i+0x160>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	079b      	lsls	r3, r3, #30
 8005d9c:	d413      	bmi.n	8005dc6 <_printf_i+0x232>
 8005d9e:	68e0      	ldr	r0, [r4, #12]
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	4298      	cmp	r0, r3
 8005da4:	bfb8      	it	lt
 8005da6:	4618      	movlt	r0, r3
 8005da8:	e7a6      	b.n	8005cf8 <_printf_i+0x164>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4632      	mov	r2, r6
 8005dae:	4649      	mov	r1, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	47d0      	blx	sl
 8005db4:	3001      	adds	r0, #1
 8005db6:	d09d      	beq.n	8005cf4 <_printf_i+0x160>
 8005db8:	3501      	adds	r5, #1
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	1a5b      	subs	r3, r3, r1
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	dcf2      	bgt.n	8005daa <_printf_i+0x216>
 8005dc4:	e7eb      	b.n	8005d9e <_printf_i+0x20a>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	f104 0619 	add.w	r6, r4, #25
 8005dcc:	e7f5      	b.n	8005dba <_printf_i+0x226>
 8005dce:	bf00      	nop
 8005dd0:	0800649d 	.word	0x0800649d
 8005dd4:	080064ae 	.word	0x080064ae

08005dd8 <__sflush_r>:
 8005dd8:	898a      	ldrh	r2, [r1, #12]
 8005dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	4605      	mov	r5, r0
 8005de0:	0710      	lsls	r0, r2, #28
 8005de2:	460c      	mov	r4, r1
 8005de4:	d458      	bmi.n	8005e98 <__sflush_r+0xc0>
 8005de6:	684b      	ldr	r3, [r1, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dc05      	bgt.n	8005df8 <__sflush_r+0x20>
 8005dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dc02      	bgt.n	8005df8 <__sflush_r+0x20>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	d0f9      	beq.n	8005df2 <__sflush_r+0x1a>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e04:	682f      	ldr	r7, [r5, #0]
 8005e06:	6a21      	ldr	r1, [r4, #32]
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	d032      	beq.n	8005e72 <__sflush_r+0x9a>
 8005e0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	075a      	lsls	r2, r3, #29
 8005e12:	d505      	bpl.n	8005e20 <__sflush_r+0x48>
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	1ac0      	subs	r0, r0, r3
 8005e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e1a:	b10b      	cbz	r3, 8005e20 <__sflush_r+0x48>
 8005e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e1e:	1ac0      	subs	r0, r0, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	4602      	mov	r2, r0
 8005e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e26:	6a21      	ldr	r1, [r4, #32]
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b0      	blx	r6
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	d106      	bne.n	8005e40 <__sflush_r+0x68>
 8005e32:	6829      	ldr	r1, [r5, #0]
 8005e34:	291d      	cmp	r1, #29
 8005e36:	d82b      	bhi.n	8005e90 <__sflush_r+0xb8>
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <__sflush_r+0x108>)
 8005e3a:	410a      	asrs	r2, r1
 8005e3c:	07d6      	lsls	r6, r2, #31
 8005e3e:	d427      	bmi.n	8005e90 <__sflush_r+0xb8>
 8005e40:	2200      	movs	r2, #0
 8005e42:	6062      	str	r2, [r4, #4]
 8005e44:	04d9      	lsls	r1, r3, #19
 8005e46:	6922      	ldr	r2, [r4, #16]
 8005e48:	6022      	str	r2, [r4, #0]
 8005e4a:	d504      	bpl.n	8005e56 <__sflush_r+0x7e>
 8005e4c:	1c42      	adds	r2, r0, #1
 8005e4e:	d101      	bne.n	8005e54 <__sflush_r+0x7c>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b903      	cbnz	r3, 8005e56 <__sflush_r+0x7e>
 8005e54:	6560      	str	r0, [r4, #84]	; 0x54
 8005e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e58:	602f      	str	r7, [r5, #0]
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d0c9      	beq.n	8005df2 <__sflush_r+0x1a>
 8005e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e62:	4299      	cmp	r1, r3
 8005e64:	d002      	beq.n	8005e6c <__sflush_r+0x94>
 8005e66:	4628      	mov	r0, r5
 8005e68:	f7ff fa8a 	bl	8005380 <_free_r>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	6360      	str	r0, [r4, #52]	; 0x34
 8005e70:	e7c0      	b.n	8005df4 <__sflush_r+0x1c>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b0      	blx	r6
 8005e78:	1c41      	adds	r1, r0, #1
 8005e7a:	d1c8      	bne.n	8005e0e <__sflush_r+0x36>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0c5      	beq.n	8005e0e <__sflush_r+0x36>
 8005e82:	2b1d      	cmp	r3, #29
 8005e84:	d001      	beq.n	8005e8a <__sflush_r+0xb2>
 8005e86:	2b16      	cmp	r3, #22
 8005e88:	d101      	bne.n	8005e8e <__sflush_r+0xb6>
 8005e8a:	602f      	str	r7, [r5, #0]
 8005e8c:	e7b1      	b.n	8005df2 <__sflush_r+0x1a>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	e7ad      	b.n	8005df4 <__sflush_r+0x1c>
 8005e98:	690f      	ldr	r7, [r1, #16]
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	d0a9      	beq.n	8005df2 <__sflush_r+0x1a>
 8005e9e:	0793      	lsls	r3, r2, #30
 8005ea0:	680e      	ldr	r6, [r1, #0]
 8005ea2:	bf08      	it	eq
 8005ea4:	694b      	ldreq	r3, [r1, #20]
 8005ea6:	600f      	str	r7, [r1, #0]
 8005ea8:	bf18      	it	ne
 8005eaa:	2300      	movne	r3, #0
 8005eac:	eba6 0807 	sub.w	r8, r6, r7
 8005eb0:	608b      	str	r3, [r1, #8]
 8005eb2:	f1b8 0f00 	cmp.w	r8, #0
 8005eb6:	dd9c      	ble.n	8005df2 <__sflush_r+0x1a>
 8005eb8:	6a21      	ldr	r1, [r4, #32]
 8005eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ebc:	4643      	mov	r3, r8
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b0      	blx	r6
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	dc06      	bgt.n	8005ed6 <__sflush_r+0xfe>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e78e      	b.n	8005df4 <__sflush_r+0x1c>
 8005ed6:	4407      	add	r7, r0
 8005ed8:	eba8 0800 	sub.w	r8, r8, r0
 8005edc:	e7e9      	b.n	8005eb2 <__sflush_r+0xda>
 8005ede:	bf00      	nop
 8005ee0:	dfbffffe 	.word	0xdfbffffe

08005ee4 <_fflush_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	690b      	ldr	r3, [r1, #16]
 8005ee8:	4605      	mov	r5, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	b913      	cbnz	r3, 8005ef4 <_fflush_r+0x10>
 8005eee:	2500      	movs	r5, #0
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	b118      	cbz	r0, 8005efe <_fflush_r+0x1a>
 8005ef6:	6a03      	ldr	r3, [r0, #32]
 8005ef8:	b90b      	cbnz	r3, 8005efe <_fflush_r+0x1a>
 8005efa:	f7ff f863 	bl	8004fc4 <__sinit>
 8005efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f3      	beq.n	8005eee <_fflush_r+0xa>
 8005f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f08:	07d0      	lsls	r0, r2, #31
 8005f0a:	d404      	bmi.n	8005f16 <_fflush_r+0x32>
 8005f0c:	0599      	lsls	r1, r3, #22
 8005f0e:	d402      	bmi.n	8005f16 <_fflush_r+0x32>
 8005f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f12:	f7ff fa32 	bl	800537a <__retarget_lock_acquire_recursive>
 8005f16:	4628      	mov	r0, r5
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f7ff ff5d 	bl	8005dd8 <__sflush_r>
 8005f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f20:	07da      	lsls	r2, r3, #31
 8005f22:	4605      	mov	r5, r0
 8005f24:	d4e4      	bmi.n	8005ef0 <_fflush_r+0xc>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	059b      	lsls	r3, r3, #22
 8005f2a:	d4e1      	bmi.n	8005ef0 <_fflush_r+0xc>
 8005f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f2e:	f7ff fa25 	bl	800537c <__retarget_lock_release_recursive>
 8005f32:	e7dd      	b.n	8005ef0 <_fflush_r+0xc>

08005f34 <__swhatbuf_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	460c      	mov	r4, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	b096      	sub	sp, #88	; 0x58
 8005f40:	4615      	mov	r5, r2
 8005f42:	461e      	mov	r6, r3
 8005f44:	da0d      	bge.n	8005f62 <__swhatbuf_r+0x2e>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	bf0c      	ite	eq
 8005f52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f56:	2340      	movne	r3, #64	; 0x40
 8005f58:	2000      	movs	r0, #0
 8005f5a:	6031      	str	r1, [r6, #0]
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	b016      	add	sp, #88	; 0x58
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	466a      	mov	r2, sp
 8005f64:	f000 f8f8 	bl	8006158 <_fstat_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	dbec      	blt.n	8005f46 <__swhatbuf_r+0x12>
 8005f6c:	9901      	ldr	r1, [sp, #4]
 8005f6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f76:	4259      	negs	r1, r3
 8005f78:	4159      	adcs	r1, r3
 8005f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7e:	e7eb      	b.n	8005f58 <__swhatbuf_r+0x24>

08005f80 <__smakebuf_r>:
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f84:	079d      	lsls	r5, r3, #30
 8005f86:	4606      	mov	r6, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	d507      	bpl.n	8005f9c <__smakebuf_r+0x1c>
 8005f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	ab01      	add	r3, sp, #4
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f7ff ffc8 	bl	8005f34 <__swhatbuf_r>
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff fa5d 	bl	8005468 <_malloc_r>
 8005fae:	b948      	cbnz	r0, 8005fc4 <__smakebuf_r+0x44>
 8005fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb4:	059a      	lsls	r2, r3, #22
 8005fb6:	d4ef      	bmi.n	8005f98 <__smakebuf_r+0x18>
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	e7e3      	b.n	8005f8c <__smakebuf_r+0xc>
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	6020      	str	r0, [r4, #0]
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	6163      	str	r3, [r4, #20]
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	6120      	str	r0, [r4, #16]
 8005fd6:	b15b      	cbz	r3, 8005ff0 <__smakebuf_r+0x70>
 8005fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 f8cd 	bl	800617c <_isatty_r>
 8005fe2:	b128      	cbz	r0, 8005ff0 <__smakebuf_r+0x70>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	431d      	orrs	r5, r3
 8005ff4:	81a5      	strh	r5, [r4, #12]
 8005ff6:	e7cf      	b.n	8005f98 <__smakebuf_r+0x18>

08005ff8 <__swbuf_r>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4605      	mov	r5, r0
 8006000:	b118      	cbz	r0, 800600a <__swbuf_r+0x12>
 8006002:	6a03      	ldr	r3, [r0, #32]
 8006004:	b90b      	cbnz	r3, 800600a <__swbuf_r+0x12>
 8006006:	f7fe ffdd 	bl	8004fc4 <__sinit>
 800600a:	69a3      	ldr	r3, [r4, #24]
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	071a      	lsls	r2, r3, #28
 8006012:	d525      	bpl.n	8006060 <__swbuf_r+0x68>
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	b31b      	cbz	r3, 8006060 <__swbuf_r+0x68>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	6922      	ldr	r2, [r4, #16]
 800601c:	1a98      	subs	r0, r3, r2
 800601e:	6963      	ldr	r3, [r4, #20]
 8006020:	b2f6      	uxtb	r6, r6
 8006022:	4283      	cmp	r3, r0
 8006024:	4637      	mov	r7, r6
 8006026:	dc04      	bgt.n	8006032 <__swbuf_r+0x3a>
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f7ff ff5a 	bl	8005ee4 <_fflush_r>
 8006030:	b9e0      	cbnz	r0, 800606c <__swbuf_r+0x74>
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	3b01      	subs	r3, #1
 8006036:	60a3      	str	r3, [r4, #8]
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	701e      	strb	r6, [r3, #0]
 8006040:	6962      	ldr	r2, [r4, #20]
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	429a      	cmp	r2, r3
 8006046:	d004      	beq.n	8006052 <__swbuf_r+0x5a>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	07db      	lsls	r3, r3, #31
 800604c:	d506      	bpl.n	800605c <__swbuf_r+0x64>
 800604e:	2e0a      	cmp	r6, #10
 8006050:	d104      	bne.n	800605c <__swbuf_r+0x64>
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f7ff ff45 	bl	8005ee4 <_fflush_r>
 800605a:	b938      	cbnz	r0, 800606c <__swbuf_r+0x74>
 800605c:	4638      	mov	r0, r7
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006060:	4621      	mov	r1, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 f806 	bl	8006074 <__swsetup_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	d0d5      	beq.n	8006018 <__swbuf_r+0x20>
 800606c:	f04f 37ff 	mov.w	r7, #4294967295
 8006070:	e7f4      	b.n	800605c <__swbuf_r+0x64>
	...

08006074 <__swsetup_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <__swsetup_r+0xac>)
 8006078:	4605      	mov	r5, r0
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	460c      	mov	r4, r1
 800607e:	b118      	cbz	r0, 8006088 <__swsetup_r+0x14>
 8006080:	6a03      	ldr	r3, [r0, #32]
 8006082:	b90b      	cbnz	r3, 8006088 <__swsetup_r+0x14>
 8006084:	f7fe ff9e 	bl	8004fc4 <__sinit>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800608e:	0718      	lsls	r0, r3, #28
 8006090:	d422      	bmi.n	80060d8 <__swsetup_r+0x64>
 8006092:	06d9      	lsls	r1, r3, #27
 8006094:	d407      	bmi.n	80060a6 <__swsetup_r+0x32>
 8006096:	2309      	movs	r3, #9
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e034      	b.n	8006110 <__swsetup_r+0x9c>
 80060a6:	0758      	lsls	r0, r3, #29
 80060a8:	d512      	bpl.n	80060d0 <__swsetup_r+0x5c>
 80060aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ac:	b141      	cbz	r1, 80060c0 <__swsetup_r+0x4c>
 80060ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d002      	beq.n	80060bc <__swsetup_r+0x48>
 80060b6:	4628      	mov	r0, r5
 80060b8:	f7ff f962 	bl	8005380 <_free_r>
 80060bc:	2300      	movs	r3, #0
 80060be:	6363      	str	r3, [r4, #52]	; 0x34
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060c6:	81a3      	strh	r3, [r4, #12]
 80060c8:	2300      	movs	r3, #0
 80060ca:	6063      	str	r3, [r4, #4]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f043 0308 	orr.w	r3, r3, #8
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	b94b      	cbnz	r3, 80060f0 <__swsetup_r+0x7c>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e6:	d003      	beq.n	80060f0 <__swsetup_r+0x7c>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff ff48 	bl	8005f80 <__smakebuf_r>
 80060f0:	89a0      	ldrh	r0, [r4, #12]
 80060f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f6:	f010 0301 	ands.w	r3, r0, #1
 80060fa:	d00a      	beq.n	8006112 <__swsetup_r+0x9e>
 80060fc:	2300      	movs	r3, #0
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	6963      	ldr	r3, [r4, #20]
 8006102:	425b      	negs	r3, r3
 8006104:	61a3      	str	r3, [r4, #24]
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	b943      	cbnz	r3, 800611c <__swsetup_r+0xa8>
 800610a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800610e:	d1c4      	bne.n	800609a <__swsetup_r+0x26>
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	0781      	lsls	r1, r0, #30
 8006114:	bf58      	it	pl
 8006116:	6963      	ldrpl	r3, [r4, #20]
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	e7f4      	b.n	8006106 <__swsetup_r+0x92>
 800611c:	2000      	movs	r0, #0
 800611e:	e7f7      	b.n	8006110 <__swsetup_r+0x9c>
 8006120:	20000098 	.word	0x20000098

08006124 <memmove>:
 8006124:	4288      	cmp	r0, r1
 8006126:	b510      	push	{r4, lr}
 8006128:	eb01 0402 	add.w	r4, r1, r2
 800612c:	d902      	bls.n	8006134 <memmove+0x10>
 800612e:	4284      	cmp	r4, r0
 8006130:	4623      	mov	r3, r4
 8006132:	d807      	bhi.n	8006144 <memmove+0x20>
 8006134:	1e43      	subs	r3, r0, #1
 8006136:	42a1      	cmp	r1, r4
 8006138:	d008      	beq.n	800614c <memmove+0x28>
 800613a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800613e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006142:	e7f8      	b.n	8006136 <memmove+0x12>
 8006144:	4402      	add	r2, r0
 8006146:	4601      	mov	r1, r0
 8006148:	428a      	cmp	r2, r1
 800614a:	d100      	bne.n	800614e <memmove+0x2a>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006156:	e7f7      	b.n	8006148 <memmove+0x24>

08006158 <_fstat_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	; (8006178 <_fstat_r+0x20>)
 800615c:	2300      	movs	r3, #0
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	4611      	mov	r1, r2
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f7fb ff36 	bl	8001fd6 <_fstat>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	d102      	bne.n	8006174 <_fstat_r+0x1c>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	b103      	cbz	r3, 8006174 <_fstat_r+0x1c>
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	bd38      	pop	{r3, r4, r5, pc}
 8006176:	bf00      	nop
 8006178:	20000348 	.word	0x20000348

0800617c <_isatty_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_isatty_r+0x1c>)
 8006180:	2300      	movs	r3, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fb ff35 	bl	8001ff6 <_isatty>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_isatty_r+0x1a>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_isatty_r+0x1a>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000348 	.word	0x20000348

0800619c <_sbrk_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_sbrk_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fb ff3e 	bl	8002028 <_sbrk>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_sbrk_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_sbrk_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000348 	.word	0x20000348

080061bc <memcpy>:
 80061bc:	440a      	add	r2, r1
 80061be:	4291      	cmp	r1, r2
 80061c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061c4:	d100      	bne.n	80061c8 <memcpy+0xc>
 80061c6:	4770      	bx	lr
 80061c8:	b510      	push	{r4, lr}
 80061ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d2:	4291      	cmp	r1, r2
 80061d4:	d1f9      	bne.n	80061ca <memcpy+0xe>
 80061d6:	bd10      	pop	{r4, pc}

080061d8 <_realloc_r>:
 80061d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061dc:	4680      	mov	r8, r0
 80061de:	4614      	mov	r4, r2
 80061e0:	460e      	mov	r6, r1
 80061e2:	b921      	cbnz	r1, 80061ee <_realloc_r+0x16>
 80061e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e8:	4611      	mov	r1, r2
 80061ea:	f7ff b93d 	b.w	8005468 <_malloc_r>
 80061ee:	b92a      	cbnz	r2, 80061fc <_realloc_r+0x24>
 80061f0:	f7ff f8c6 	bl	8005380 <_free_r>
 80061f4:	4625      	mov	r5, r4
 80061f6:	4628      	mov	r0, r5
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	f000 f81b 	bl	8006236 <_malloc_usable_size_r>
 8006200:	4284      	cmp	r4, r0
 8006202:	4607      	mov	r7, r0
 8006204:	d802      	bhi.n	800620c <_realloc_r+0x34>
 8006206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800620a:	d812      	bhi.n	8006232 <_realloc_r+0x5a>
 800620c:	4621      	mov	r1, r4
 800620e:	4640      	mov	r0, r8
 8006210:	f7ff f92a 	bl	8005468 <_malloc_r>
 8006214:	4605      	mov	r5, r0
 8006216:	2800      	cmp	r0, #0
 8006218:	d0ed      	beq.n	80061f6 <_realloc_r+0x1e>
 800621a:	42bc      	cmp	r4, r7
 800621c:	4622      	mov	r2, r4
 800621e:	4631      	mov	r1, r6
 8006220:	bf28      	it	cs
 8006222:	463a      	movcs	r2, r7
 8006224:	f7ff ffca 	bl	80061bc <memcpy>
 8006228:	4631      	mov	r1, r6
 800622a:	4640      	mov	r0, r8
 800622c:	f7ff f8a8 	bl	8005380 <_free_r>
 8006230:	e7e1      	b.n	80061f6 <_realloc_r+0x1e>
 8006232:	4635      	mov	r5, r6
 8006234:	e7df      	b.n	80061f6 <_realloc_r+0x1e>

08006236 <_malloc_usable_size_r>:
 8006236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623a:	1f18      	subs	r0, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	bfbc      	itt	lt
 8006240:	580b      	ldrlt	r3, [r1, r0]
 8006242:	18c0      	addlt	r0, r0, r3
 8006244:	4770      	bx	lr
	...

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
