
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  08007e78  08007e78  00017e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800854c  0800854c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008554  08008554  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800855c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000208  08008764  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008764  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5a8  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd1  00000000  00000000  0002e823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0d  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251e2  00000000  00000000  00032b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aad  00000000  00000000  00057d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3fc  00000000  00000000  0006b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004620  00000000  00000000  00145bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e5c 	.word	0x08007e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08007e5c 	.word	0x08007e5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 8000ef8:	2300      	movs	r3, #0
 8000efa:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <SendToLCD+0x24>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 8000f06:	e009      	b.n	8000f1c <SendToLCD+0x38>
			buffer[0] = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	727b      	strb	r3, [r7, #9]
		break;
 8000f10:	e004      	b.n	8000f1c <SendToLCD+0x38>
			buffer[0] = 0x40;
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	727b      	strb	r3, [r7, #9]
		break;
 8000f1a:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f953 	bl	80011cc <TransmitI2CDataToLCD>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000f30:	68fb      	ldr	r3, [r7, #12]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <InitializeLCD>:

static void InitializeLCD(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 8000f46:	f000 f8f9 	bl	800113c <InitializeLCDI2C>
 8000f4a:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffc8 	bl	8000ee4 <SendToLCD>
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f001 f9d4 	bl	8002304 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8000f5c:	2138      	movs	r1, #56	; 0x38
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffc0 	bl	8000ee4 <SendToLCD>
 8000f64:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f66:	2032      	movs	r0, #50	; 0x32
 8000f68:	f001 f9cc 	bl	8002304 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ffb8 	bl	8000ee4 <SendToLCD>
 8000f74:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f76:	2032      	movs	r0, #50	; 0x32
 8000f78:	f001 f9c4 	bl	8002304 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ffb0 	bl	8000ee4 <SendToLCD>
 8000f84:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f86:	2032      	movs	r0, #50	; 0x32
 8000f88:	f001 f9bc 	bl	8002304 <HAL_Delay>

	ASSERT(lcd_state != LCD_OK);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <InitializeLCD+0x64>
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <InitializeLCD+0x90>)
 8000f94:	236f      	movs	r3, #111	; 0x6f
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <InitializeLCD+0x94>)
 8000f98:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <InitializeLCD+0x98>)
 8000f9a:	f004 fd39 	bl	8005a10 <iprintf>
 8000f9e:	e7fe      	b.n	8000f9e <InitializeLCD+0x62>

	HAL_Delay(1000);
 8000fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa4:	f001 f9ae 	bl	8002304 <HAL_Delay>

	lcd_state = ClearLCD();
 8000fa8:	f000 f870 	bl	800108c <ClearLCD>
 8000fac:	6078      	str	r0, [r7, #4]

	ASSERT(lcd_state != LCD_OK);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <InitializeLCD+0x86>
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <InitializeLCD+0x90>)
 8000fb6:	2375      	movs	r3, #117	; 0x75
 8000fb8:	4905      	ldr	r1, [pc, #20]	; (8000fd0 <InitializeLCD+0x94>)
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <InitializeLCD+0x98>)
 8000fbc:	f004 fd28 	bl	8005a10 <iprintf>
 8000fc0:	e7fe      	b.n	8000fc0 <InitializeLCD+0x84>
	(void)lcd_state;
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08007e8c 	.word	0x08007e8c
 8000fd0:	08007e9c 	.word	0x08007e9c
 8000fd4:	08007ea0 	.word	0x08007ea0

08000fd8 <SendDataToLCD>:

static int SendDataToLCD(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 8000fe6:	e011      	b.n	800100c <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <SendDataToLCD+0x54>)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff ff76 	bl	8000ee4 <SendToLCD>
 8000ff8:	6078      	str	r0, [r7, #4]
		i++;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	dc08      	bgt.n	800101e <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <SendDataToLCD+0x54>)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e7      	bne.n	8000fe8 <SendDataToLCD+0x10>
 8001018:	e002      	b.n	8001020 <SendDataToLCD+0x48>
			break;
 800101a:	bf00      	nop
 800101c:	e000      	b.n	8001020 <SendDataToLCD+0x48>
		{
			break;
 800101e:	bf00      	nop
		}
	}

	return lcd_state;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000

08001030 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	72fb      	strb	r3, [r7, #11]

	switch (row)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <MoveLCDCursor+0x20>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d007      	beq.n	800105e <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 800104e:	e00d      	b.n	800106c <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001058:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 800105a:	72fb      	strb	r3, [r7, #11]
		break;
 800105c:	e006      	b.n	800106c <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001066:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8001068:	72fb      	strb	r3, [r7, #11]
		break;
 800106a:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	4619      	mov	r1, r3
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff37 	bl	8000ee4 <SendToLCD>
 8001076:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 800107e:	2305      	movs	r3, #5
 8001080:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <ClearLCD>:

static int ClearLCD(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 8001092:	2101      	movs	r1, #1
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff25 	bl	8000ee4 <SendToLCD>
 800109a:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f001 f931 	bl	8002304 <HAL_Delay>

	if (lcd_state != LCD_OK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 80010a8:	2304      	movs	r3, #4
 80010aa:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	return &lcd_interface;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <GetLCDInterface+0x10>)
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <InitializeLCDI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeLCDI2CGPIOPins(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN_LCD | I2C_SDA_PIN_LCD;
 80010ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f2:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 8001100:	2304      	movs	r3, #4
 8001102:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_LCD, &gpio);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <InitializeLCDI2CGPIOPins+0x6c>)
 800110c:	f001 fcec 	bl	8002ae8 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <InitializeLCDI2CGPIOPins+0x68>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	InitializeLCDI2CGPIOPins();
 8001142:	f7ff ffc3 	bl	80010cc <InitializeLCDI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <InitializeLCDI2C+0x80>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <InitializeLCDI2C+0x80>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <InitializeLCDI2C+0x80>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001164:	2210      	movs	r2, #16
 8001166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <InitializeLCDI2C+0x84>)
 800116c:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <InitializeLCDI2C+0x88>)
 800116e:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <InitializeLCDI2C+0x8c>)
 8001174:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <InitializeLCDI2C+0x84>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <InitializeLCDI2C+0x84>)
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <InitializeLCDI2C+0x84>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <InitializeLCDI2C+0x84>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <InitializeLCDI2C+0x84>)
 80011a4:	f001 fe66 	bl	8002e74 <HAL_I2C_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	20000224 	.word	0x20000224
 80011c4:	40005400 	.word	0x40005400
 80011c8:	000186a0 	.word	0x000186a0

080011cc <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2302      	movs	r3, #2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	217c      	movs	r1, #124	; 0x7c
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <TransmitI2CDataToLCD+0x2c>)
 80011e0:	f001 ff8c 	bl	80030fc <HAL_I2C_Master_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS_LCD,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e000      	b.n	80011f0 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000224 	.word	0x20000224

080011fc <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 8001202:	f7ff ff59 	bl	80010b8 <GetLCDInterface>
 8001206:	6078      	str	r0, [r7, #4]

	ASSERT(plcd == NULL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <LCDInit+0x20>
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LCDInit+0x3c>)
 8001210:	2316      	movs	r3, #22
 8001212:	490a      	ldr	r1, [pc, #40]	; (800123c <LCDInit+0x40>)
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <LCDInit+0x44>)
 8001216:	f004 fbfb 	bl	8005a10 <iprintf>
 800121a:	e7fe      	b.n	800121a <LCDInit+0x1e>

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2210      	movs	r2, #16
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 fd1f 	bl	8005c66 <memset>

	plcd->init();
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4798      	blx	r3
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	08007ed8 	.word	0x08007ed8
 800123c:	08007ee8 	.word	0x08007ee8
 8001240:	08007eec 	.word	0x08007eec

08001244 <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af02      	add	r7, sp, #8
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 8001254:	f7ff ff30 	bl	80010b8 <GetLCDInterface>
 8001258:	6138      	str	r0, [r7, #16]

	ASSERT(plcd == NULL);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d106      	bne.n	800126e <LCDWriteData+0x2a>
 8001260:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <LCDWriteData+0x80>)
 8001262:	2322      	movs	r3, #34	; 0x22
 8001264:	4918      	ldr	r1, [pc, #96]	; (80012c8 <LCDWriteData+0x84>)
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <LCDWriteData+0x88>)
 8001268:	f004 fbd2 	bl	8005a10 <iprintf>
 800126c:	e7fe      	b.n	800126c <LCDWriteData+0x28>

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	dc02      	bgt.n	800127a <LCDWriteData+0x36>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	dd08      	ble.n	800128c <LCDWriteData+0x48>
		 (col >= LCD_MAX_NUMBER_OF_COLUMNS) )
	{
		LOG_ERR("Krivo postavljeni red ili stupac"
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <LCDWriteData+0x80>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4911      	ldr	r1, [pc, #68]	; (80012c8 <LCDWriteData+0x84>)
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <LCDWriteData+0x8c>)
 8001286:	f004 fbc3 	bl	8005a10 <iprintf>
				"\n\tRedak: %d"
				"\n\rStupac: %d",
				row, col);
		return;
 800128a:	e017      	b.n	80012bc <LCDWriteData+0x78>
	}

	sprintf(plcd->buffer, pdata);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fc85 	bl	8005ba0 <siprintf>

	//lcd_state = plcd->clear_data();
	lcd_state = plcd->move_cursor(row, col);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	4798      	blx	r3
 80012a0:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4798      	blx	r3
 80012a8:	6178      	str	r0, [r7, #20]

	if (lcd_state != LCD_OK)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <LCDWriteData+0x78>
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <LCDWriteData+0x80>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <LCDWriteData+0x84>)
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <LCDWriteData+0x90>)
 80012b8:	f004 fbaa 	bl	8005a10 <iprintf>
				"\n\tError: %d",
				lcd_state);
	}
}
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08007ed8 	.word	0x08007ed8
 80012c8:	08007ee8 	.word	0x08007ee8
 80012cc:	08007eec 	.word	0x08007eec
 80012d0:	08007f10 	.word	0x08007f10
 80012d4:	08007f58 	.word	0x08007f58

080012d8 <LCDClearScreen>:

void LCDClearScreen(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
	lcd_t *plcd = GetLCDInterface();
 80012e2:	f7ff fee9 	bl	80010b8 <GetLCDInterface>
 80012e6:	6038      	str	r0, [r7, #0]

	ASSERT(plcd == NULL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <LCDClearScreen+0x24>
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <LCDClearScreen+0x48>)
 80012f0:	2341      	movs	r3, #65	; 0x41
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <LCDClearScreen+0x4c>)
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LCDClearScreen+0x50>)
 80012f6:	f004 fb8b 	bl	8005a10 <iprintf>
 80012fa:	e7fe      	b.n	80012fa <LCDClearScreen+0x22>

	lcd_state = plcd->clear_data();
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	4798      	blx	r3
 8001302:	6078      	str	r0, [r7, #4]

	if (lcd_state != LCD_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <LCDClearScreen+0x3e>
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <LCDClearScreen+0x48>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4905      	ldr	r1, [pc, #20]	; (8001324 <LCDClearScreen+0x4c>)
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <LCDClearScreen+0x54>)
 8001312:	f004 fb7d 	bl	8005a10 <iprintf>
				"\n\tError: %d",
				lcd_state);
	}
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	08007ed8 	.word	0x08007ed8
 8001324:	08007ee8 	.word	0x08007ee8
 8001328:	08007eec 	.word	0x08007eec
 800132c:	08007f58 	.word	0x08007f58

08001330 <FlashWriteLog>:
  * @brief  Function for writing a value to flash
  * @param  val - Value to be written in flash
  * @retval 0 if successful
  */
int FlashWriteLog(uint32_t input_val)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	int retval = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
	uint32_t MemoryProgramStatus = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
	uint32_t data32 = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	int index = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]


    /* Check how many values are already written and fill the array with them */

	uint32_t Address = FLASH_USER_START_ADDR;
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <FlashWriteLog+0x168>)
 800134a:	613b      	str	r3, [r7, #16]

	while (Address < FLASH_VALUES_END_ADDR)
 800134c:	e011      	b.n	8001372 <FlashWriteLog+0x42>
	  {
	    data32 = *(uint32_t *)Address;
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]

	    if (data32 != 0xFFFFFFFF)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135a:	d00f      	beq.n	800137c <FlashWriteLog+0x4c>
	    {
	      values[index] = data32;
 800135c:	494f      	ldr	r1, [pc, #316]	; (800149c <FlashWriteLog+0x16c>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      index++;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
	      Address = Address + 4;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	3304      	adds	r3, #4
 8001370:	613b      	str	r3, [r7, #16]
	while (Address < FLASH_VALUES_END_ADDR)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <FlashWriteLog+0x170>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d9e9      	bls.n	800134e <FlashWriteLog+0x1e>
 800137a:	e000      	b.n	800137e <FlashWriteLog+0x4e>
	    }

	    else break;
 800137c:	bf00      	nop



	/* Add the new value to the array so we can write them to flash */

	if (index <= 9)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b09      	cmp	r3, #9
 8001382:	dc05      	bgt.n	8001390 <FlashWriteLog+0x60>
	{
		/* The array is not full yet, we can just append the value */
		values[index] = input_val;
 8001384:	4945      	ldr	r1, [pc, #276]	; (800149c <FlashWriteLog+0x16c>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800138e:	e016      	b.n	80013be <FlashWriteLog+0x8e>
	}
	else
	{
		/* The array is full, we must shift all values to save the latest 10 logs */
		index = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

		while (index < 9)
 8001394:	e00b      	b.n	80013ae <FlashWriteLog+0x7e>
		{
			values[index] = values[index+1];
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	4a40      	ldr	r2, [pc, #256]	; (800149c <FlashWriteLog+0x16c>)
 800139c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a0:	493e      	ldr	r1, [pc, #248]	; (800149c <FlashWriteLog+0x16c>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
		while (index < 9)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	ddf0      	ble.n	8001396 <FlashWriteLog+0x66>
		}

		/* Finally, write the new value at the 10th place in the array */
		values[index] = input_val;
 80013b4:	4939      	ldr	r1, [pc, #228]	; (800149c <FlashWriteLog+0x16c>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]




  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 80013be:	f001 f8ff 	bl	80025c0 <HAL_FLASH_Unlock>


  /* Erase the flash sector that will be used */
  FlashErase();
 80013c2:	f000 f8ad 	bl	8001520 <FlashErase>



  /* Program the user Flash area word by word */

  Address = FLASH_USER_START_ADDR;
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <FlashWriteLog+0x168>)
 80013c8:	613b      	str	r3, [r7, #16]
  index = 0;;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

  while ((Address < FLASH_VALUES_END_ADDR) && (values[index] != 0))
 80013ce:	e01d      	b.n	800140c <FlashWriteLog+0xdc>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *(uint32_t *)&values[index]) == HAL_OK)
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <FlashWriteLog+0x16c>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	2200      	movs	r2, #0
 80013da:	461c      	mov	r4, r3
 80013dc:	4615      	mov	r5, r2
 80013de:	4622      	mov	r2, r4
 80013e0:	462b      	mov	r3, r5
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	2002      	movs	r0, #2
 80013e6:	f001 f897 	bl	8002518 <HAL_FLASH_Program>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d106      	bne.n	80013fe <FlashWriteLog+0xce>
    {
      Address = Address + 4;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3304      	adds	r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
      index++;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e006      	b.n	800140c <FlashWriteLog+0xdc>
    }
   else
    {
      /* Error occurred while writing data in Flash memory */
	  LOG_ERR("Upisivanje u flash nije bilo uspjesno\n");
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <FlashWriteLog+0x174>)
 8001400:	461a      	mov	r2, r3
 8001402:	4929      	ldr	r1, [pc, #164]	; (80014a8 <FlashWriteLog+0x178>)
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <FlashWriteLog+0x17c>)
 8001406:	f004 fb03 	bl	8005a10 <iprintf>
      while (1)
 800140a:	e7fe      	b.n	800140a <FlashWriteLog+0xda>
  while ((Address < FLASH_VALUES_END_ADDR) && (values[index] != 0))
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <FlashWriteLog+0x170>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d805      	bhi.n	8001420 <FlashWriteLog+0xf0>
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <FlashWriteLog+0x16c>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1d7      	bne.n	80013d0 <FlashWriteLog+0xa0>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) */
  HAL_FLASH_Lock();
 8001420:	f001 f8f0 	bl	8002604 <HAL_FLASH_Lock>


  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly */
  Address = FLASH_USER_START_ADDR;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <FlashWriteLog+0x168>)
 8001426:	613b      	str	r3, [r7, #16]
  index = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  MemoryProgramStatus = 0x0;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]

  while (Address < FLASH_VALUES_END_ADDR)
 8001430:	e016      	b.n	8001460 <FlashWriteLog+0x130>
  {
    data32 = *(uint32_t *)Address;
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]

    if ((data32 != values[index]) && (data32 != 0xFFFFFFFF))
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <FlashWriteLog+0x16c>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	429a      	cmp	r2, r3
 8001444:	d006      	beq.n	8001454 <FlashWriteLog+0x124>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d002      	beq.n	8001454 <FlashWriteLog+0x124>
    {
      MemoryProgramStatus++;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3301      	adds	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
    }
    Address = Address + 4;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	3304      	adds	r3, #4
 8001458:	613b      	str	r3, [r7, #16]
    index++;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
  while (Address < FLASH_VALUES_END_ADDR)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <FlashWriteLog+0x170>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d9e4      	bls.n	8001432 <FlashWriteLog+0x102>
  }

  /*Check if there is an issue to program data*/
  if (MemoryProgramStatus == 0)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <FlashWriteLog+0x14c>
  {
    /* No error detected */
	  LOG_ERR("Upisivanje u flash obavljeno uspjesno\n");
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <FlashWriteLog+0x174>)
 8001470:	461a      	mov	r2, r3
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <FlashWriteLog+0x178>)
 8001474:	480e      	ldr	r0, [pc, #56]	; (80014b0 <FlashWriteLog+0x180>)
 8001476:	f004 facb 	bl	8005a10 <iprintf>
 800147a:	e007      	b.n	800148c <FlashWriteLog+0x15c>
  }
  else
  {
    /* Error detected */
	  LOG_ERR("Upisivanje u flash nije bilo uspjesno\n");
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <FlashWriteLog+0x174>)
 800147e:	461a      	mov	r2, r3
 8001480:	4909      	ldr	r1, [pc, #36]	; (80014a8 <FlashWriteLog+0x178>)
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <FlashWriteLog+0x17c>)
 8001484:	f004 fac4 	bl	8005a10 <iprintf>
	  retval = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
  }
  return retval;
 800148c:	69fb      	ldr	r3, [r7, #28]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bdb0      	pop	{r4, r5, r7, pc}
 8001496:	bf00      	nop
 8001498:	08010000 	.word	0x08010000
 800149c:	20000278 	.word	0x20000278
 80014a0:	08010027 	.word	0x08010027
 80014a4:	08007fae 	.word	0x08007fae
 80014a8:	08007fb8 	.word	0x08007fb8
 80014ac:	08007fbc 	.word	0x08007fbc
 80014b0:	08007ff4 	.word	0x08007ff4

080014b4 <FlashReadLogs>:
  * @brief  Reads the last 10 logs from flash
  * @param  None
  * @retval none
  */
void FlashReadLogs(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	uint32_t Address = FLASH_USER_START_ADDR;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <FlashReadLogs+0x54>)
 80014bc:	607b      	str	r3, [r7, #4]
	uint32_t data32 = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]

	LOG_INFO("Prethodna mjerenje iznose:\n");
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <FlashReadLogs+0x58>)
 80014c4:	461a      	mov	r2, r3
 80014c6:	4912      	ldr	r1, [pc, #72]	; (8001510 <FlashReadLogs+0x5c>)
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <FlashReadLogs+0x60>)
 80014ca:	f004 faa1 	bl	8005a10 <iprintf>

	while (Address < FLASH_VALUES_END_ADDR)
 80014ce:	e012      	b.n	80014f6 <FlashReadLogs+0x42>
	{
		data32 = *(uint32_t *)Address;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	603b      	str	r3, [r7, #0]

		if ((data32 != 0) && (data32 != 0xFFFFFFFF))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <FlashReadLogs+0x4a>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d00c      	beq.n	80014fe <FlashReadLogs+0x4a>
		{
		    Address = Address + 4;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	607b      	str	r3, [r7, #4]
		    LOG_INFO("%lu\n", data32);
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <FlashReadLogs+0x58>)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <FlashReadLogs+0x5c>)
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <FlashReadLogs+0x64>)
 80014f2:	f004 fa8d 	bl	8005a10 <iprintf>
	while (Address < FLASH_VALUES_END_ADDR)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <FlashReadLogs+0x68>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d9e8      	bls.n	80014d0 <FlashReadLogs+0x1c>
		}

		else break;
	}
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08010000 	.word	0x08010000
 800150c:	08007fae 	.word	0x08007fae
 8001510:	0800802c 	.word	0x0800802c
 8001514:	08008030 	.word	0x08008030
 8001518:	0800805c 	.word	0x0800805c
 800151c:	08010027 	.word	0x08010027

08001520 <FlashErase>:
  * @brief  Erases the flash sector
  * @param  None
  * @retval 0 - successful
  */
static int FlashErase(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	int retval = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
	uint32_t SECTORError = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]

	/* Erase the user Flash area
	   (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) */

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <FlashErase+0x54>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <FlashErase+0x54>)
 8001536:	2202      	movs	r2, #2
 8001538:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FIRST_SECTOR;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <FlashErase+0x54>)
 800153c:	2204      	movs	r2, #4
 800153e:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = NBOFSECTORS;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <FlashErase+0x54>)
 8001542:	2201      	movs	r2, #1
 8001544:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	   you have to make sure that these data are rewritten before they are accessed during code
	   execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	   DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <FlashErase+0x54>)
 800154c:	f001 f9aa 	bl	80028a4 <HAL_FLASHEx_Erase>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <FlashErase+0x48>
	/*
	 Error occurred while sector erase.
	 SECTORError will contain the faulty sector and then to know the code error on this sector,
	 user can call function 'HAL_FLASH_GetError()'
	*/
	LOG_ERR("Brisanje flash sektora broj %u nije bilo uspjesno\n", (uint16_t)SECTORError);
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <FlashErase+0x58>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <FlashErase+0x5c>)
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <FlashErase+0x60>)
 8001560:	f004 fa56 	bl	8005a10 <iprintf>
	retval = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
	}

	return retval;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002a0 	.word	0x200002a0
 8001578:	08007fae 	.word	0x08007fae
 800157c:	08007fb8 	.word	0x08007fb8
 8001580:	08008074 	.word	0x08008074

08001584 <log_uart_init>:
void log_uart_init_pins(UART_HandleTypeDef* huart);

UART_HandleTypeDef log_uart_handle;

void log_uart_init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	__HAL_RCC_USART2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <log_uart_init+0x7c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <log_uart_init+0x7c>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <log_uart_init+0x7c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

	log_uart_handle.Instance 			= USART2;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <log_uart_init+0x80>)
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <log_uart_init+0x84>)
 80015aa:	601a      	str	r2, [r3, #0]
	log_uart_handle.Init.BaudRate 		= 921600;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <log_uart_init+0x80>)
 80015ae:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80015b2:	605a      	str	r2, [r3, #4]
	log_uart_handle.Init.WordLength 	= UART_WORDLENGTH_8B;
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <log_uart_init+0x80>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	log_uart_handle.Init.StopBits 		= UART_STOPBITS_1;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <log_uart_init+0x80>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
	log_uart_handle.Init.Parity 		= UART_PARITY_EVEN;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <log_uart_init+0x80>)
 80015c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c6:	611a      	str	r2, [r3, #16]
	log_uart_handle.Init.Mode 			= UART_MODE_TX;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <log_uart_init+0x80>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	615a      	str	r2, [r3, #20]
	log_uart_handle.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <log_uart_init+0x80>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
	log_uart_handle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <log_uart_init+0x80>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&log_uart_handle) != HAL_OK)
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <log_uart_init+0x80>)
 80015dc:	f003 fa2c 	bl	8004a38 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d000      	beq.n	80015e8 <log_uart_init+0x64>
	{
		while(1);
 80015e6:	e7fe      	b.n	80015e6 <log_uart_init+0x62>
	 * Pojasnjenje na netu:
	 * 	That specific invocation of setbuf sets stdout to be unbuffered - By default,
	 * 	it's usually line-buffered (whatever gets written to stdout gets flushed to
	 * 	the screen when there's a newline), but after that call there's no buffer and
	 * 	anything you write goes directly to the console.*/
	setbuf(stdout, NULL);
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <log_uart_init+0x88>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fa1f 	bl	8005a34 <setbuf>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	200002b4 	.word	0x200002b4
 8001608:	40004400 	.word	0x40004400
 800160c:	20000098 	.word	0x20000098

08001610 <_write>:

int _write(int file, char *ptr, int len)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	(void)file;

	for (int i=0; i<len; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00f      	b.n	8001642 <_write+0x32>
	{
		while(!(USART2->SR & USART_SR_TXE));
 8001622:	bf00      	nop
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <_write+0x48>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f9      	beq.n	8001624 <_write+0x14>

		USART2->DR = (uint8_t)ptr[i];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_write+0x48>)
 800163a:	605a      	str	r2, [r3, #4]
	for (int i=0; i<len; i++)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbeb      	blt.n	8001622 <_write+0x12>
	}

	return len;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40004400 	.word	0x40004400

0800165c <InitializeAHT20>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]

	HAL_Delay(20);
 8001666:	2014      	movs	r0, #20
 8001668:	f000 fe4c 	bl	8002304 <HAL_Delay>

	aht20_state = InitializeAHT20I2C();
 800166c:	f000 f996 	bl	800199c <InitializeAHT20I2C>
 8001670:	6078      	str	r0, [r7, #4]

	ASSERT(aht20_state != AHT20_OK);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <InitializeAHT20+0x2a>
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <InitializeAHT20+0x64>)
 800167a:	2339      	movs	r3, #57	; 0x39
 800167c:	4911      	ldr	r1, [pc, #68]	; (80016c4 <InitializeAHT20+0x68>)
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <InitializeAHT20+0x6c>)
 8001680:	f004 f9c6 	bl	8005a10 <iprintf>
 8001684:	e7fe      	b.n	8001684 <InitializeAHT20+0x28>

	HAL_Delay(40);
 8001686:	2028      	movs	r0, #40	; 0x28
 8001688:	f000 fe3c 	bl	8002304 <HAL_Delay>

	/* Initialize the sensor until calibration is successful */
	while(AHT20_checkCalibration() == false)
 800168c:	e002      	b.n	8001694 <InitializeAHT20+0x38>
	{
		aht20_state = AHT20_sensorInit();
 800168e:	f000 f81d 	bl	80016cc <AHT20_sensorInit>
 8001692:	6078      	str	r0, [r7, #4]
	while(AHT20_checkCalibration() == false)
 8001694:	f000 f838 	bl	8001708 <AHT20_checkCalibration>
 8001698:	4603      	mov	r3, r0
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f4      	bne.n	800168e <InitializeAHT20+0x32>
	}

	ASSERT(aht20_state != AHT20_OK);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <InitializeAHT20+0x5c>
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <InitializeAHT20+0x64>)
 80016ac:	2343      	movs	r3, #67	; 0x43
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <InitializeAHT20+0x68>)
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <InitializeAHT20+0x6c>)
 80016b2:	f004 f9ad 	bl	8005a10 <iprintf>
 80016b6:	e7fe      	b.n	80016b6 <InitializeAHT20+0x5a>

}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080080d6 	.word	0x080080d6
 80016c4:	080080e8 	.word	0x080080e8
 80016c8:	080080ec 	.word	0x080080ec

080016cc <AHT20_sensorInit>:

static int AHT20_sensorInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	/* reg[3] holds the initialization sequence */
	int aht20_state = AHT20_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]

	uint8_t reg[3] = {0xBE, 0x08, 0x00};
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <AHT20_sensorInit+0x38>)
 80016d8:	463b      	mov	r3, r7
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	4611      	mov	r1, r2
 80016de:	8019      	strh	r1, [r3, #0]
 80016e0:	3302      	adds	r3, #2
 80016e2:	0c12      	lsrs	r2, r2, #16
 80016e4:	701a      	strb	r2, [r3, #0]
	aht20_state = TransmitI2CDataToAHT20(reg, 3);
 80016e6:	463b      	mov	r3, r7
 80016e8:	2103      	movs	r1, #3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f99e 	bl	8001a2c <TransmitI2CDataToAHT20>
 80016f0:	6078      	str	r0, [r7, #4]
	HAL_Delay(10); // Wait 10ms for initialization
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 fe06 	bl	8002304 <HAL_Delay>

	return aht20_state;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	08008110 	.word	0x08008110

08001708 <AHT20_checkCalibration>:

static bool AHT20_checkCalibration(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    uint8_t statusReg = 0x71; // Command for checking calibration
 800170e:	2371      	movs	r3, #113	; 0x71
 8001710:	71fb      	strb	r3, [r7, #7]
    uint8_t cal; // Result byte
    TransmitI2CDataToAHT20(&statusReg, 1);
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	2101      	movs	r1, #1
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f988 	bl	8001a2c <TransmitI2CDataToAHT20>
    ReceiveI2CDataFromAHT20(&cal, 1);
 800171c:	1dbb      	adds	r3, r7, #6
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f99f 	bl	8001a64 <ReceiveI2CDataFromAHT20>

    return ((cal >> 3) & 1) == 1; // Check if 4th bit is equal to 1 (calibration successful)
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <AHT20_triggerMeasurement>:

void AHT20_triggerMeasurement(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

    while(AHT20_checkCalibration() == false)
 800174e:	e002      	b.n	8001756 <AHT20_triggerMeasurement+0x12>
    {
    	aht20_state = AHT20_sensorInit();
 8001750:	f7ff ffbc 	bl	80016cc <AHT20_sensorInit>
 8001754:	6178      	str	r0, [r7, #20]
    while(AHT20_checkCalibration() == false)
 8001756:	f7ff ffd7 	bl	8001708 <AHT20_checkCalibration>
 800175a:	4603      	mov	r3, r0
 800175c:	f083 0301 	eor.w	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f4      	bne.n	8001750 <AHT20_triggerMeasurement+0xc>
    }

    // Commands for triggering the measurement
    uint8_t measureCommand[3] = {0xAC, 0x33, 0x00};
 8001766:	4a42      	ldr	r2, [pc, #264]	; (8001870 <AHT20_triggerMeasurement+0x12c>)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4611      	mov	r1, r2
 8001770:	8019      	strh	r1, [r3, #0]
 8001772:	3302      	adds	r3, #2
 8001774:	0c12      	lsrs	r2, r2, #16
 8001776:	701a      	strb	r2, [r3, #0]
    uint8_t status; // result status
    uint8_t data[6]; // data array

    TransmitI2CDataToAHT20(measureCommand, 3);
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2103      	movs	r1, #3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f954 	bl	8001a2c <TransmitI2CDataToAHT20>
    HAL_Delay(80); // Wait for measurement
 8001784:	2050      	movs	r0, #80	; 0x50
 8001786:	f000 fdbd 	bl	8002304 <HAL_Delay>

    ReceiveI2CDataFromAHT20(&status, 1); // Read status byte
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f968 	bl	8001a64 <ReceiveI2CDataFromAHT20>

    // Wait for status to be ready before continuing
    while (((status >> 7) & 1) != 0)
 8001794:	e004      	b.n	80017a0 <AHT20_triggerMeasurement+0x5c>
    {
        ReceiveI2CDataFromAHT20(&status, 1);
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	2101      	movs	r1, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f962 	bl	8001a64 <ReceiveI2CDataFromAHT20>
    while (((status >> 7) & 1) != 0)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	09db      	lsrs	r3, r3, #7
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f3      	bne.n	8001796 <AHT20_triggerMeasurement+0x52>
    }

    aht20_state = ReceiveI2CDataFromAHT20(data, 6); // Read all data
 80017ae:	463b      	mov	r3, r7
 80017b0:	2106      	movs	r1, #6
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f956 	bl	8001a64 <ReceiveI2CDataFromAHT20>
 80017b8:	6178      	str	r0, [r7, #20]

    ASSERT(aht20_state != AHT20_OK);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <AHT20_triggerMeasurement+0x8a>
 80017c0:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <AHT20_triggerMeasurement+0x130>)
 80017c2:	2378      	movs	r3, #120	; 0x78
 80017c4:	492c      	ldr	r1, [pc, #176]	; (8001878 <AHT20_triggerMeasurement+0x134>)
 80017c6:	482d      	ldr	r0, [pc, #180]	; (800187c <AHT20_triggerMeasurement+0x138>)
 80017c8:	f004 f922 	bl	8005a10 <iprintf>
 80017cc:	e7fe      	b.n	80017cc <AHT20_triggerMeasurement+0x88>

    // Check the AHT20 datasheet for a clearer understanding, bytes data[1],[2], and half of
    // data[3] represent humidity, the other half of data[3] and data[4] and [5] represent temperature
    // The formulas for conversion to units of Celsius and Relative Humidity can be found there as well

    uint32_t humidity = data[1];
 80017ce:	787b      	ldrb	r3, [r7, #1]
 80017d0:	613b      	str	r3, [r7, #16]
    humidity <<= 8;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	613b      	str	r3, [r7, #16]
    humidity |= data[2];
 80017d8:	78bb      	ldrb	r3, [r7, #2]
 80017da:	461a      	mov	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
    humidity <<= 4;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
    humidity |= data[3] >> 4;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]

    AHT20_interface.hum_val = ((float)humidity * 100) / 1048576;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001800:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001880 <AHT20_triggerMeasurement+0x13c>
 8001804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001808:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001884 <AHT20_triggerMeasurement+0x140>
 800180c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <AHT20_triggerMeasurement+0x144>)
 8001812:	edc3 7a04 	vstr	s15, [r3, #16]

    uint32_t temp = data[3] & 0x0F;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	60fb      	str	r3, [r7, #12]
    temp |= data[4];
 8001824:	793b      	ldrb	r3, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	60fb      	str	r3, [r7, #12]
    temp |= data[5];
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

    AHT20_interface.temp_val = ((float)temp * 200 / 1048576) - 50;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001848:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800188c <AHT20_triggerMeasurement+0x148>
 800184c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001850:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001884 <AHT20_triggerMeasurement+0x140>
 8001854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001858:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001890 <AHT20_triggerMeasurement+0x14c>
 800185c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <AHT20_triggerMeasurement+0x144>)
 8001862:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	08008114 	.word	0x08008114
 8001874:	080080d6 	.word	0x080080d6
 8001878:	080080e8 	.word	0x080080e8
 800187c:	080080ec 	.word	0x080080ec
 8001880:	42c80000 	.word	0x42c80000
 8001884:	49800000 	.word	0x49800000
 8001888:	20000020 	.word	0x20000020
 800188c:	43480000 	.word	0x43480000
 8001890:	42480000 	.word	0x42480000

08001894 <GetTemperatureValue>:

static int GetTemperatureValue(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 8001898:	f7ff ff54 	bl	8001744 <AHT20_triggerMeasurement>

	return AHT20_interface.temp_val;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <GetTemperatureValue+0x1c>)
 800189e:	edd3 7a03 	vldr	s15, [r3, #12]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000020 	.word	0x20000020

080018b4 <GetHumidityValue>:

static int GetHumidityValue(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 80018b8:	f7ff ff44 	bl	8001744 <AHT20_triggerMeasurement>

	return AHT20_interface.hum_val;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <GetHumidityValue+0x1c>)
 80018be:	edd3 7a04 	vldr	s15, [r3, #16]
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 3a90 	vmov	r3, s15
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000020 	.word	0x20000020

080018d4 <GetAHT20Interface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

AHT20_t *GetAHT20Interface(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	return &AHT20_interface;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <GetAHT20Interface+0x10>)
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000020 	.word	0x20000020

080018e8 <InitializeAHT20I2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20I2CGPIOPins(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
	//   PC9     ------> I2C3_SDA
	//   PA8     ------> I2C3_SCL

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SDA_PIN_AHT20;
 8001926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192a:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8001934:	2312      	movs	r3, #18
 8001936:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8001938:	2304      	movs	r3, #4
 800193a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SDA, &gpio);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	4814      	ldr	r0, [pc, #80]	; (8001994 <InitializeAHT20I2CGPIOPins+0xac>)
 8001944:	f001 f8d0 	bl	8002ae8 <HAL_GPIO_Init>

	gpio.Pin 		= I2C_SCL_PIN_AHT20;
 8001948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194c:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 800195a:	2304      	movs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SCL, &gpio);
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <InitializeAHT20I2CGPIOPins+0xb0>)
 8001966:	f001 f8bf 	bl	8002ae8 <HAL_GPIO_Init>

	__HAL_RCC_I2C3_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 8001974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <InitializeAHT20I2CGPIOPins+0xa8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020000 	.word	0x40020000

0800199c <InitializeAHT20I2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeAHT20I2C(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	InitializeAHT20I2CGPIOPins();
 80019a2:	f7ff ffa1 	bl	80018e8 <InitializeAHT20I2CGPIOPins>

	__I2C3_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <InitializeAHT20I2C+0x80>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <InitializeAHT20I2C+0x80>)
 80019b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <InitializeAHT20I2C+0x80>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

	i2chandle2.Mode 				= HAL_I2C_MODE_MASTER;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019c4:	2210      	movs	r2, #16
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle2.Instance 			= I2C3;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <InitializeAHT20I2C+0x88>)
 80019ce:	601a      	str	r2, [r3, #0]
	i2chandle2.Init.ClockSpeed 		= 100000;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <InitializeAHT20I2C+0x8c>)
 80019d4:	605a      	str	r2, [r3, #4]
	i2chandle2.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
	i2chandle2.Init.OwnAddress1 	= 0x00;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
	i2chandle2.Init.OwnAddress2		= 0x00;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
	i2chandle2.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
	i2chandle2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
	i2chandle2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
	i2chandle2.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <InitializeAHT20I2C+0x84>)
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle2) != HAL_OK)
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <InitializeAHT20I2C+0x84>)
 8001a04:	f001 fa36 	bl	8002e74 <HAL_I2C_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <InitializeAHT20I2C+0x76>
	{
		return AHT20_ERROR_I2C_NOT_INITALIZED;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <InitializeAHT20I2C+0x78>
	}

	return AHT20_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	200002fc 	.word	0x200002fc
 8001a24:	40005c00 	.word	0x40005c00
 8001a28:	000186a0 	.word	0x000186a0

08001a2c <TransmitI2CDataToAHT20>:

int TransmitI2CDataToAHT20(uint8_t *pdata, uint8_t length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&i2chandle2,
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2264      	movs	r2, #100	; 0x64
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	2170      	movs	r1, #112	; 0x70
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <TransmitI2CDataToAHT20+0x34>)
 8001a46:	f001 fb59 	bl	80030fc <HAL_I2C_Master_Transmit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <TransmitI2CDataToAHT20+0x28>
								(I2C_SLAVE_ADDRESS_AHT20 << 1),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e000      	b.n	8001a56 <TransmitI2CDataToAHT20+0x2a>
	}

	return AHT20_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002fc 	.word	0x200002fc

08001a64 <ReceiveI2CDataFromAHT20>:

int ReceiveI2CDataFromAHT20(uint8_t *pdata, uint8_t length)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Receive(&i2chandle2,
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2264      	movs	r2, #100	; 0x64
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	2171      	movs	r1, #113	; 0x71
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <ReceiveI2CDataFromAHT20+0x34>)
 8001a7e:	f001 fc3b 	bl	80032f8 <HAL_I2C_Master_Receive>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <ReceiveI2CDataFromAHT20+0x28>
								((I2C_SLAVE_ADDRESS_AHT20 << 1) | 0x01),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <ReceiveI2CDataFromAHT20+0x2a>
	}

	return AHT20_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002fc 	.word	0x200002fc

08001a9c <AHT20Init>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void AHT20Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 8001aa2:	f7ff ff17 	bl	80018d4 <GetAHT20Interface>
 8001aa6:	6078      	str	r0, [r7, #4]

	ASSERT(paht20 == NULL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <AHT20Init+0x20>
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <AHT20Init+0x30>)
 8001ab0:	2316      	movs	r3, #22
 8001ab2:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <AHT20Init+0x34>)
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <AHT20Init+0x38>)
 8001ab6:	f003 ffab 	bl	8005a10 <iprintf>
 8001aba:	e7fe      	b.n	8001aba <AHT20Init+0x1e>

	paht20->init();
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4798      	blx	r3
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08008136 	.word	0x08008136
 8001ad0:	08008148 	.word	0x08008148
 8001ad4:	0800814c 	.word	0x0800814c

08001ad8 <AHT20_GetTemp>:

int AHT20_GetTemp(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 8001ade:	f7ff fef9 	bl	80018d4 <GetAHT20Interface>
 8001ae2:	6078      	str	r0, [r7, #4]

	ASSERT(paht20 == NULL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <AHT20_GetTemp+0x20>
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <AHT20_GetTemp+0x30>)
 8001aec:	231f      	movs	r3, #31
 8001aee:	4907      	ldr	r1, [pc, #28]	; (8001b0c <AHT20_GetTemp+0x34>)
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <AHT20_GetTemp+0x38>)
 8001af2:	f003 ff8d 	bl	8005a10 <iprintf>
 8001af6:	e7fe      	b.n	8001af6 <AHT20_GetTemp+0x1e>

	return paht20->get_temp();
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4798      	blx	r3
 8001afe:	4603      	mov	r3, r0

}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08008136 	.word	0x08008136
 8001b0c:	08008148 	.word	0x08008148
 8001b10:	0800814c 	.word	0x0800814c

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f000 fb82 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 f87c 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f000 f8e8 	bl	8001cf4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  ADC1_Init();
  LCDInit();
 8001b24:	f7ff fb6a 	bl	80011fc <LCDInit>
  AHT20Init();
 8001b28:	f7ff ffb8 	bl	8001a9c <AHT20Init>
  log_uart_init();
 8001b2c:	f7ff fd2a 	bl	8001584 <log_uart_init>

  FlashReadLogs();
 8001b30:	f7ff fcc0 	bl	80014b4 <FlashReadLogs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	WaitForButton();
 8001b34:	f000 f802 	bl	8001b3c <WaitForButton>
 8001b38:	e7fc      	b.n	8001b34 <main+0x20>
	...

08001b3c <WaitForButton>:
/**
  * @brief Waits for a button press
  * @retval None
  */
void WaitForButton(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	// If button pin value = 0, someone pressed the button
	if (HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == 0)
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	480a      	ldr	r0, [pc, #40]	; (8001b70 <WaitForButton+0x34>)
 8001b46:	f001 f963 	bl	8002e10 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <WaitForButton+0x30>
	{

	HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fbd7 	bl	8002304 <HAL_Delay>

	while (HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) != 1)
 8001b56:	bf00      	nop
 8001b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <WaitForButton+0x34>)
 8001b5e:	f001 f957 	bl	8002e10 <HAL_GPIO_ReadPin>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d1f7      	bne.n	8001b58 <WaitForButton+0x1c>
		{
			// Wait for the user to release the button
		}
	// A rising edge happened, now the temperature value can be read

	TemperatureToLCD();
 8001b68:	f000 f804 	bl	8001b74 <TemperatureToLCD>
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40020800 	.word	0x40020800

08001b74 <TemperatureToLCD>:
/**
  * @brief Reads temperature value and prints it to LCD
  * @retval None
  */
void TemperatureToLCD(void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af02      	add	r7, sp, #8
	float temperature =  AHT20_GetTemp();
 8001b7a:	f7ff ffad 	bl	8001ad8 <AHT20_GetTemp>
 8001b7e:	ee07 0a90 	vmov	s15, r0
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	edc7 7a05 	vstr	s15, [r7, #20]

	LCDClearScreen();
 8001b8a:	f7ff fba5 	bl	80012d8 <LCDClearScreen>

	char pdata[14];
	sprintf(pdata, "%s", "Iznos temp:");
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <TemperatureToLCD+0x8c>)
 8001b92:	491c      	ldr	r1, [pc, #112]	; (8001c04 <TemperatureToLCD+0x90>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f803 	bl	8005ba0 <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fb4f 	bl	8001244 <LCDWriteData>

	sprintf(pdata, "%f", temperature);
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7fe fcee 	bl	8000588 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	1d38      	adds	r0, r7, #4
 8001bb2:	4915      	ldr	r1, [pc, #84]	; (8001c08 <TemperatureToLCD+0x94>)
 8001bb4:	f003 fff4 	bl	8005ba0 <siprintf>
	LCDWriteData(1,0,&pdata[0]);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff fb40 	bl	8001244 <LCDWriteData>

	FlashWriteLog(temperature);
 8001bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7ff fbae 	bl	8001330 <FlashWriteLog>

	HAL_Delay(1000);
 8001bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd8:	f000 fb94 	bl	8002304 <HAL_Delay>

	LOG_ERR("Iznos temperature: %f\n", temperature);
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <TemperatureToLCD+0x98>)
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7fe fcd2 	bl	8000588 <__aeabi_f2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bec:	4622      	mov	r2, r4
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <TemperatureToLCD+0x9c>)
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <TemperatureToLCD+0xa0>)
 8001bf2:	f003 ff0d 	bl	8005a10 <iprintf>
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	08008170 	.word	0x08008170
 8001c04:	0800817c 	.word	0x0800817c
 8001c08:	08008180 	.word	0x08008180
 8001c0c:	08008190 	.word	0x08008190
 8001c10:	08008198 	.word	0x08008198
 8001c14:	0800819c 	.word	0x0800819c

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	2234      	movs	r2, #52	; 0x34
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 f81d 	bl	8005c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <SystemClock_Config+0xd4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <SystemClock_Config+0xd4>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <SystemClock_Config+0xd4>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <SystemClock_Config+0xd8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <SystemClock_Config+0xd8>)
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <SystemClock_Config+0xd8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c80:	2310      	movs	r3, #16
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c84:	2302      	movs	r3, #2
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c96:	2304      	movs	r3, #4
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fc28 	bl	80044fc <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cb2:	f000 f88f 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 f8c8 	bl	8003e68 <HAL_RCC_ClockConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cde:	f000 f879 	bl	8001dd4 <Error_Handler>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3750      	adds	r7, #80	; 0x50
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_GPIO_Init+0xd4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4813      	ldr	r0, [pc, #76]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d80:	f001 f85e 	bl	8002e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_GPIO_Init+0xdc>)
 8001d9e:	f000 fea3 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001da2:	2320      	movs	r3, #32
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001dba:	f000 fe95 	bl	8002ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <Error_Handler+0x8>
	...

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f000 fb46 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <HAL_I2C_MspInit+0x128>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12d      	bne.n	8001eae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4835      	ldr	r0, [pc, #212]	; (8001f60 <HAL_I2C_MspInit+0x130>)
 8001e8c:	f000 fe2c 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001eac:	e050      	b.n	8001f50 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <HAL_I2C_MspInit+0x134>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d14b      	bne.n	8001f50 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef6:	2312      	movs	r3, #18
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f02:	2304      	movs	r3, #4
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4816      	ldr	r0, [pc, #88]	; (8001f68 <HAL_I2C_MspInit+0x138>)
 8001f0e:	f000 fdeb 	bl	8002ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f24:	2304      	movs	r3, #4
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480f      	ldr	r0, [pc, #60]	; (8001f6c <HAL_I2C_MspInit+0x13c>)
 8001f30:	f000 fdda 	bl	8002ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001f3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_I2C_MspInit+0x12c>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3730      	adds	r7, #48	; 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40005c00 	.word	0x40005c00
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_UART_MspInit+0x84>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d12b      	bne.n	8001fea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_UART_MspInit+0x8c>)
 8001fe6:	f000 fd7f 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002004:	e7fe      	b.n	8002004 <NMI_Handler+0x4>

08002006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler+0x4>

08002012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <UsageFault_Handler+0x4>

0800201e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204c:	f000 f93a 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	f003 fe4d 	bl	8005d0c <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002096:	e7fe      	b.n	8002096 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
  }

  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	605a      	str	r2, [r3, #4]
  return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f003 fdce 	bl	8005d0c <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20020000 	.word	0x20020000
 800219c:	00000400 	.word	0x00000400
 80021a0:	20000350 	.word	0x20000350
 80021a4:	200004c8 	.word	0x200004c8

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021d0:	f7ff ffea 	bl	80021a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d6:	490d      	ldr	r1, [pc, #52]	; (800220c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021ec:	4c0a      	ldr	r4, [pc, #40]	; (8002218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f003 fd8d 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7ff fc89 	bl	8001b14 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002210:	0800855c 	.word	0x0800855c
  ldr r2, =_sbss
 8002214:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002218:	200004c4 	.word	0x200004c4

0800221c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_Init+0x40>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_Init+0x40>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x40>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f931 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	2000      	movs	r0, #0
 8002250:	f000 f808 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fdc4 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f93b 	bl	80024fe <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 f911 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000034 	.word	0x20000034
 80022bc:	2000003c 	.word	0x2000003c
 80022c0:	20000038 	.word	0x20000038

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000003c 	.word	0x2000003c
 80022e8:	20000354 	.word	0x20000354

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000354 	.word	0x20000354

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffde 	bl	80022ec <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000003c 	.word	0x2000003c

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff47 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5c 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_FLASH_Program+0xa0>)
 800252c:	7e1b      	ldrb	r3, [r3, #24]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_FLASH_Program+0x1e>
 8002532:	2302      	movs	r3, #2
 8002534:	e03b      	b.n	80025ae <HAL_FLASH_Program+0x96>
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_FLASH_Program+0xa0>)
 8002538:	2201      	movs	r2, #1
 800253a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800253c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002540:	f000 f870 	bl	8002624 <FLASH_WaitForLastOperation>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12b      	bne.n	80025a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002554:	783b      	ldrb	r3, [r7, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	68b8      	ldr	r0, [r7, #8]
 800255a:	f000 f91b 	bl	8002794 <FLASH_Program_Byte>
 800255e:	e016      	b.n	800258e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	f000 f8ee 	bl	800274c <FLASH_Program_HalfWord>
 8002570:	e00d      	b.n	800258e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d105      	bne.n	8002584 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	68b8      	ldr	r0, [r7, #8]
 800257e:	f000 f8c3 	bl	8002708 <FLASH_Program_Word>
 8002582:	e004      	b.n	800258e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002588:	68b8      	ldr	r0, [r7, #8]
 800258a:	f000 f88b 	bl	80026a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800258e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002592:	f000 f847 	bl	8002624 <FLASH_WaitForLastOperation>
 8002596:	4603      	mov	r3, r0
 8002598:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_FLASH_Program+0xa4>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_FLASH_Program+0xa4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_FLASH_Program+0xa0>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000358 	.word	0x20000358
 80025bc:	40023c00 	.word	0x40023c00

080025c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_FLASH_Unlock+0x38>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da0b      	bge.n	80025ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_FLASH_Unlock+0x38>)
 80025d4:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_FLASH_Unlock+0x3c>)
 80025d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_FLASH_Unlock+0x38>)
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_FLASH_Unlock+0x40>)
 80025dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_FLASH_Unlock+0x38>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da01      	bge.n	80025ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80025ea:	79fb      	ldrb	r3, [r7, #7]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	45670123 	.word	0x45670123
 8002600:	cdef89ab 	.word	0xcdef89ab

08002604 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_FLASH_Lock+0x1c>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_FLASH_Lock+0x1c>)
 800260e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002612:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40023c00 	.word	0x40023c00

08002624 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <FLASH_WaitForLastOperation+0x78>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002636:	f7ff fe59 	bl	80022ec <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800263c:	e010      	b.n	8002660 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d00c      	beq.n	8002660 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <FLASH_WaitForLastOperation+0x38>
 800264c:	f7ff fe4e 	bl	80022ec <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	d201      	bcs.n	8002660 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e019      	b.n	8002694 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <FLASH_WaitForLastOperation+0x7c>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e8      	bne.n	800263e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <FLASH_WaitForLastOperation+0x7c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <FLASH_WaitForLastOperation+0x7c>)
 800267a:	2201      	movs	r2, #1
 800267c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <FLASH_WaitForLastOperation+0x7c>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800268a:	f000 f8a5 	bl	80027d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
  
}  
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000358 	.word	0x20000358
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a13      	ldr	r2, [pc, #76]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4a10      	ldr	r2, [pc, #64]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <FLASH_Program_DoubleWord+0x60>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80026da:	f3bf 8f6f 	isb	sy
}
 80026de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80026e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	000a      	movs	r2, r1
 80026ee:	2300      	movs	r3, #0
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	3104      	adds	r1, #4
 80026f4:	4613      	mov	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40023c00 	.word	0x40023c00

08002708 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <FLASH_Program_Word+0x40>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <FLASH_Program_Word+0x40>)
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <FLASH_Program_Word+0x40>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <FLASH_Program_Word+0x40>)
 8002724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002728:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <FLASH_Program_Word+0x40>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <FLASH_Program_Word+0x40>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40023c00 	.word	0x40023c00

0800274c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	4a09      	ldr	r2, [pc, #36]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <FLASH_Program_HalfWord+0x44>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	801a      	strh	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00

08002794 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <FLASH_Program_Byte+0x40>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	701a      	strb	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <FLASH_SetErrorCode+0xc4>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 80027f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80027f4:	4b29      	ldr	r3, [pc, #164]	; (800289c <FLASH_SetErrorCode+0xc4>)
 80027f6:	2210      	movs	r2, #16
 80027f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80027fa:	4b28      	ldr	r3, [pc, #160]	; (800289c <FLASH_SetErrorCode+0xc4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002810:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002814:	2220      	movs	r2, #32
 8002816:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <FLASH_SetErrorCode+0xc4>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 800282e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 800284c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 800286a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <FLASH_SetErrorCode+0xc4>)
 800286e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002872:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <FLASH_SetErrorCode+0xc4>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <FLASH_SetErrorCode+0xc8>)
 800288a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <FLASH_SetErrorCode+0xc4>)
 800288e:	2202      	movs	r2, #2
 8002890:	60da      	str	r2, [r3, #12]
  }
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	20000358 	.word	0x20000358

080028a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_FLASHEx_Erase+0xd8>)
 80028b8:	7e1b      	ldrb	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_FLASHEx_Erase+0x1e>
 80028be:	2302      	movs	r3, #2
 80028c0:	e058      	b.n	8002974 <HAL_FLASHEx_Erase+0xd0>
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_FLASHEx_Erase+0xd8>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028cc:	f7ff feaa 	bl	8002624 <FLASH_WaitForLastOperation>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d148      	bne.n	800296c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 f844 	bl	8002984 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002900:	f7ff fe90 	bl	8002624 <FLASH_WaitForLastOperation>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_FLASHEx_Erase+0xdc>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_FLASHEx_Erase+0xdc>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6113      	str	r3, [r2, #16]
 8002914:	e028      	b.n	8002968 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	e01c      	b.n	8002958 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4619      	mov	r1, r3
 8002926:	68b8      	ldr	r0, [r7, #8]
 8002928:	f000 f850 	bl	80029cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800292c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002930:	f7ff fe78 	bl	8002624 <FLASH_WaitForLastOperation>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_FLASHEx_Erase+0xdc>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_FLASHEx_Erase+0xdc>)
 800293e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002942:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	601a      	str	r2, [r3, #0]
          break;
 8002950:	e00a      	b.n	8002968 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3301      	adds	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4413      	add	r3, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3da      	bcc.n	800291e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002968:	f000 f878 	bl	8002a5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_FLASHEx_Erase+0xd8>)
 800296e:	2200      	movs	r2, #0
 8002970:	761a      	strb	r2, [r3, #24]

  return status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000358 	.word	0x20000358
 8002980:	40023c00 	.word	0x40023c00

08002984 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <FLASH_MassErase+0x44>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <FLASH_MassErase+0x44>)
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <FLASH_MassErase+0x44>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <FLASH_MassErase+0x44>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <FLASH_MassErase+0x44>)
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4313      	orrs	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <FLASH_MassErase+0x44>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6113      	str	r3, [r2, #16]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00

080029cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e010      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d103      	bne.n	80029f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e009      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d103      	bne.n	8002a04 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6113      	str	r3, [r2, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002a60:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d017      	beq.n	8002a9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <FLASH_FlushCaches+0x88>)
 8002ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad6:	6013      	str	r3, [r2, #0]
  }
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e165      	b.n	8002dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8154 	bne.w	8002dca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80ae 	beq.w	8002dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_GPIO_Init+0x308>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_GPIO_Init+0x314>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	; (8002e00 <HAL_GPIO_Init+0x318>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x206>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_GPIO_Init+0x320>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x202>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f ae96 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40013c00 	.word	0x40013c00

08002e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e001      	b.n	8002e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e50:	787b      	ldrb	r3, [r7, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e5c:	e003      	b.n	8002e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	041a      	lsls	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	619a      	str	r2, [r3, #24]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e12b      	b.n	80030de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe ffc8 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f001 f8b8 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a81      	ldr	r2, [pc, #516]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d807      	bhi.n	8002ef8 <HAL_I2C_Init+0x84>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a80      	ldr	r2, [pc, #512]	; (80030ec <HAL_I2C_Init+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e006      	b.n	8002f06 <HAL_I2C_Init+0x92>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a7d      	ldr	r2, [pc, #500]	; (80030f0 <HAL_I2C_Init+0x27c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0e7      	b.n	80030de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a78      	ldr	r2, [pc, #480]	; (80030f4 <HAL_I2C_Init+0x280>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a6a      	ldr	r2, [pc, #424]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d802      	bhi.n	8002f48 <HAL_I2C_Init+0xd4>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	e009      	b.n	8002f5c <HAL_I2C_Init+0xe8>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	4a69      	ldr	r2, [pc, #420]	; (80030f8 <HAL_I2C_Init+0x284>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	495c      	ldr	r1, [pc, #368]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d819      	bhi.n	8002fb0 <HAL_I2C_Init+0x13c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e59      	subs	r1, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f90:	400b      	ands	r3, r1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_I2C_Init+0x138>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e59      	subs	r1, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	e051      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e04f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <HAL_I2C_Init+0x168>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	440b      	add	r3, r1
 8002fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e012      	b.n	8003002 <HAL_I2C_Init+0x18e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Init+0x196>
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_I2C_Init+0x1bc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e58      	subs	r0, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	440b      	add	r3, r1
 8003020:	fbb0 f3f3 	udiv	r3, r0, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6809      	ldr	r1, [r1, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800307e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6911      	ldr	r1, [r2, #16]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	000186a0 	.word	0x000186a0
 80030ec:	001e847f 	.word	0x001e847f
 80030f0:	003d08ff 	.word	0x003d08ff
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
 800310c:	4613      	mov	r3, r2
 800310e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff f8ec 	bl	80022ec <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	f040 80e0 	bne.w	80032e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2319      	movs	r3, #25
 800312a:	2201      	movs	r2, #1
 800312c:	4970      	ldr	r1, [pc, #448]	; (80032f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fc64 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e0d3      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2C_Master_Transmit+0x50>
 8003148:	2302      	movs	r3, #2
 800314a:	e0cc      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d007      	beq.n	8003172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2221      	movs	r2, #33	; 0x21
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2210      	movs	r2, #16
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	893a      	ldrh	r2, [r7, #8]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 face 	bl	800375c <I2C_MasterRequestWrite>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08d      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031e0:	e066      	b.n	80032b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fd22 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d107      	bne.n	800320a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11b      	bne.n	8003284 <HAL_I2C_Master_Transmit+0x188>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	6a39      	ldr	r1, [r7, #32]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fd19 	bl	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b04      	cmp	r3, #4
 800329a:	d107      	bne.n	80032ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e01a      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d194      	bne.n	80031e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	00100002 	.word	0x00100002
 80032f4:	ffff0000 	.word	0xffff0000

080032f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	461a      	mov	r2, r3
 8003304:	460b      	mov	r3, r1
 8003306:	817b      	strh	r3, [r7, #10]
 8003308:	4613      	mov	r3, r2
 800330a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7fe ffee 	bl	80022ec <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	f040 8217 	bne.w	800374e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2319      	movs	r3, #25
 8003326:	2201      	movs	r2, #1
 8003328:	497c      	ldr	r1, [pc, #496]	; (800351c <HAL_I2C_Master_Receive+0x224>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fb66 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	e20a      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2C_Master_Receive+0x50>
 8003344:	2302      	movs	r3, #2
 8003346:	e203      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d007      	beq.n	800336e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2222      	movs	r2, #34	; 0x22
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2210      	movs	r2, #16
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	893a      	ldrh	r2, [r7, #8]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_I2C_Master_Receive+0x228>)
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa52 	bl	8003860 <I2C_MasterRequestRead>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1c4      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e198      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11b      	bne.n	8003436 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e178      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b02      	cmp	r3, #2
 800343c:	d11b      	bne.n	8003476 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	e158      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800349c:	e144      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	f200 80f1 	bhi.w	800368a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d123      	bne.n	80034f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fc4b 	bl	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e145      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f6:	e117      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d14e      	bne.n	800359e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	2200      	movs	r2, #0
 8003508:	4906      	ldr	r1, [pc, #24]	; (8003524 <HAL_I2C_Master_Receive+0x22c>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fa76 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e11a      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
 800351a:	bf00      	nop
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000
 8003524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800359c:	e0c4      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2200      	movs	r2, #0
 80035a6:	496c      	ldr	r1, [pc, #432]	; (8003758 <HAL_I2C_Master_Receive+0x460>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fa27 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cb      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	4955      	ldr	r1, [pc, #340]	; (8003758 <HAL_I2C_Master_Receive+0x460>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f9f9 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e09d      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003688:	e04e      	b.n	8003728 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fb5e 	bl	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e058      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d124      	bne.n	8003728 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f aeb6 	bne.w	800349e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
  }
}
 8003750:	4618      	mov	r0, r3
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	00010004 	.word	0x00010004

0800375c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d006      	beq.n	8003786 <I2C_MasterRequestWrite+0x2a>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <I2C_MasterRequestWrite+0x2a>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00b      	b.n	80037b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2b12      	cmp	r3, #18
 800379e:	d107      	bne.n	80037b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f91d 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d103      	bne.n	80037e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e035      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e01b      	b.n	8003838 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	11db      	asrs	r3, r3, #7
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f063 030f 	orn	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <I2C_MasterRequestWrite+0xfc>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f966 	bl	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e010      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <I2C_MasterRequestWrite+0x100>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f956 	bl	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	00010008 	.word	0x00010008
 800385c:	00010002 	.word	0x00010002

08003860 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003884:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d006      	beq.n	800389a <I2C_MasterRequestRead+0x3a>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <I2C_MasterRequestRead+0x3a>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e00b      	b.n	80038c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2b11      	cmp	r3, #17
 80038b2:	d107      	bne.n	80038c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f893 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ea:	d103      	bne.n	80038f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e079      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d108      	bne.n	8003914 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003902:	897b      	ldrh	r3, [r7, #10]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	e05f      	b.n	80039d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	11db      	asrs	r3, r3, #7
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0306 	and.w	r3, r3, #6
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f063 030f 	orn	r3, r3, #15
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4930      	ldr	r1, [pc, #192]	; (80039f4 <I2C_MasterRequestRead+0x194>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f8dc 	bl	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e054      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4929      	ldr	r1, [pc, #164]	; (80039f8 <I2C_MasterRequestRead+0x198>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8cc 	bl	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e044      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003986:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f831 	bl	80039fc <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ae:	d103      	bne.n	80039b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e017      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	11db      	asrs	r3, r3, #7
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f063 030e 	orn	r3, r3, #14
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <I2C_MasterRequestRead+0x198>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f888 	bl	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	00010008 	.word	0x00010008
 80039f8:	00010002 	.word	0x00010002

080039fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a0c:	e048      	b.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d044      	beq.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe fc69 	bl	80022ec <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d139      	bne.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10d      	bne.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4013      	ands	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	e00c      	b.n	8003a6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d116      	bne.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e023      	b.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d10d      	bne.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	e00c      	b.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d093      	beq.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afe:	e071      	b.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d123      	bne.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f043 0204 	orr.w	r2, r3, #4
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e067      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d041      	beq.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b60:	f7fe fbc4 	bl	80022ec <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d136      	bne.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10c      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e00b      	b.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e021      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10c      	bne.n	8003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e00b      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af6d 	bne.w	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c3c:	e034      	b.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f8e3 	bl	8003e0a <I2C_IsAcknowledgeFailed>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e034      	b.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d028      	beq.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fe fb49 	bl	80022ec <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11d      	bne.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d016      	beq.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e007      	b.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d1c3      	bne.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f89b 	bl	8003e0a <I2C_IsAcknowledgeFailed>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e034      	b.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d028      	beq.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe fb01 	bl	80022ec <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11d      	bne.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d016      	beq.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e007      	b.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d1c3      	bne.n	8003cce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d5c:	e049      	b.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d119      	bne.n	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0210 	mvn.w	r2, #16
 8003d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e030      	b.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da0:	f7fe faa4 	bl	80022ec <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11d      	bne.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d016      	beq.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e007      	b.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d1ae      	bne.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d11b      	bne.n	8003e5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe f9c8 	bl	80022ec <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe f9c4 	bl	80022ec <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f855 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f928 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	080081c4 	.word	0x080081c4
 800402c:	20000034 	.word	0x20000034
 8004030:	20000038 	.word	0x20000038

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000034 	.word	0x20000034

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004050:	f7ff fff0 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	080081d4 	.word	0x080081d4

08004074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004078:	f7ff ffdc 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0b5b      	lsrs	r3, r3, #13
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	080081d4 	.word	0x080081d4

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0ae      	sub	sp, #184	; 0xb8
 80040a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c2:	4bcb      	ldr	r3, [pc, #812]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	f200 8206 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x440>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	080044dd 	.word	0x080044dd
 80040e0:	080044dd 	.word	0x080044dd
 80040e4:	080044dd 	.word	0x080044dd
 80040e8:	08004115 	.word	0x08004115
 80040ec:	080044dd 	.word	0x080044dd
 80040f0:	080044dd 	.word	0x080044dd
 80040f4:	080044dd 	.word	0x080044dd
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	080044dd 	.word	0x080044dd
 8004100:	080044dd 	.word	0x080044dd
 8004104:	080044dd 	.word	0x080044dd
 8004108:	0800430d 	.word	0x0800430d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4bb9      	ldr	r3, [pc, #740]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004112:	e1e7      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004114:	4bb8      	ldr	r3, [pc, #736]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800411a:	e1e3      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4bb4      	ldr	r3, [pc, #720]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004128:	4bb1      	ldr	r3, [pc, #708]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d071      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4bae      	ldr	r3, [pc, #696]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004140:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6439      	str	r1, [r7, #64]	; 0x40
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800418c:	4649      	mov	r1, r9
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4641      	mov	r1, r8
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4641      	mov	r1, r8
 800419c:	1a51      	subs	r1, r2, r1
 800419e:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a0:	4649      	mov	r1, r9
 80041a2:	eb63 0301 	sbc.w	r3, r3, r1
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041b4:	4649      	mov	r1, r9
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4641      	mov	r1, r8
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4622      	mov	r2, r4
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	462b      	mov	r3, r5
 80041d0:	460a      	mov	r2, r1
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041e4:	4629      	mov	r1, r5
 80041e6:	024b      	lsls	r3, r1, #9
 80041e8:	4621      	mov	r1, r4
 80041ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ee:	4621      	mov	r1, r4
 80041f0:	024a      	lsls	r2, r1, #9
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004208:	f7fc fcee 	bl	8000be8 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004216:	e067      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004218:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
 8004232:	2300      	movs	r3, #0
 8004234:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f04f 0000 	mov.w	r0, #0
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	0159      	lsls	r1, r3, #5
 8004248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424c:	0150      	lsls	r0, r2, #5
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4621      	mov	r1, r4
 8004254:	1a51      	subs	r1, r2, r1
 8004256:	62b9      	str	r1, [r7, #40]	; 0x28
 8004258:	4629      	mov	r1, r5
 800425a:	eb63 0301 	sbc.w	r3, r3, r1
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800426c:	4649      	mov	r1, r9
 800426e:	018b      	lsls	r3, r1, #6
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004276:	4641      	mov	r1, r8
 8004278:	018a      	lsls	r2, r1, #6
 800427a:	4641      	mov	r1, r8
 800427c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004280:	4649      	mov	r1, r9
 8004282:	eb63 0b01 	sbc.w	fp, r3, r1
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429a:	4692      	mov	sl, r2
 800429c:	469b      	mov	fp, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	eb1a 0303 	adds.w	r3, sl, r3
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	462b      	mov	r3, r5
 80042a8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042ba:	4629      	mov	r1, r5
 80042bc:	028b      	lsls	r3, r1, #10
 80042be:	4621      	mov	r1, r4
 80042c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c4:	4621      	mov	r1, r4
 80042c6:	028a      	lsls	r2, r1, #10
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042d0:	2200      	movs	r2, #0
 80042d2:	673b      	str	r3, [r7, #112]	; 0x70
 80042d4:	677a      	str	r2, [r7, #116]	; 0x74
 80042d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042da:	f7fc fc85 	bl	8000be8 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4613      	mov	r3, r2
 80042e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800430a:	e0eb      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004318:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d06b      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	2200      	movs	r2, #0
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
 800432e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	663b      	str	r3, [r7, #96]	; 0x60
 8004338:	2300      	movs	r3, #0
 800433a:	667b      	str	r3, [r7, #100]	; 0x64
 800433c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0159      	lsls	r1, r3, #5
 800434e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004352:	0150      	lsls	r0, r2, #5
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4621      	mov	r1, r4
 800435a:	1a51      	subs	r1, r2, r1
 800435c:	61b9      	str	r1, [r7, #24]
 800435e:	4629      	mov	r1, r5
 8004360:	eb63 0301 	sbc.w	r3, r3, r1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004372:	4659      	mov	r1, fp
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	4651      	mov	r1, sl
 8004378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437c:	4651      	mov	r1, sl
 800437e:	018a      	lsls	r2, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ebb2 0801 	subs.w	r8, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0901 	sbc.w	r9, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a0:	4690      	mov	r8, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	eb18 0303 	adds.w	r3, r8, r3
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb49 0303 	adc.w	r3, r9, r3
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	024b      	lsls	r3, r1, #9
 80043c4:	4621      	mov	r1, r4
 80043c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ca:	4621      	mov	r1, r4
 80043cc:	024a      	lsls	r2, r1, #9
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d6:	2200      	movs	r2, #0
 80043d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043e0:	f7fc fc02 	bl	8000be8 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ee:	e065      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x420>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	4618      	mov	r0, r3
 8004406:	4611      	mov	r1, r2
 8004408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
 8004412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004416:	4642      	mov	r2, r8
 8004418:	464b      	mov	r3, r9
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4641      	mov	r1, r8
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4649      	mov	r1, r9
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004448:	4659      	mov	r1, fp
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004452:	4651      	mov	r1, sl
 8004454:	018a      	lsls	r2, r1, #6
 8004456:	4651      	mov	r1, sl
 8004458:	1a54      	subs	r4, r2, r1
 800445a:	4659      	mov	r1, fp
 800445c:	eb63 0501 	sbc.w	r5, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	464b      	mov	r3, r9
 800447c:	eb45 0303 	adc.w	r3, r5, r3
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448e:	4629      	mov	r1, r5
 8004490:	028b      	lsls	r3, r1, #10
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004498:	4621      	mov	r1, r4
 800449a:	028a      	lsls	r2, r1, #10
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a4:	2200      	movs	r2, #0
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ae:	f7fc fb9b 	bl	8000be8 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4613      	mov	r3, r2
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044da:	e003      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	37b8      	adds	r7, #184	; 0xb8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e28d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8083 	beq.w	8004622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b04      	cmp	r3, #4
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004528:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004530:	2b08      	cmp	r3, #8
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004534:	4b8e      	ldr	r3, [pc, #568]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x124>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e25a      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x90>
 800457e:	4b7c      	ldr	r3, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7b      	ldr	r2, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0xb4>
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b73      	ldr	r3, [pc, #460]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a72      	ldr	r2, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fe8c 	bl	80022ec <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fe88 	bl	80022ec <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e21f      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xdc>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fe78 	bl	80022ec <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd fe74 	bl	80022ec <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e20b      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b57      	ldr	r3, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x104>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800463a:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004642:	2b08      	cmp	r3, #8
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d11c      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1d3      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	e03a      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd fe21 	bl	80022ec <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fd fe1d 	bl	80022ec <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e1b4      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4925      	ldr	r1, [pc, #148]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	e015      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd fe00 	bl	80022ec <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fd fdfc 	bl	80022ec <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e193      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d036      	beq.n	8004788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fde0 	bl	80022ec <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004730:	f7fd fddc 	bl	80022ec <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e173      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x234>
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd fdc9 	bl	80022ec <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475e:	f7fd fdc5 	bl	80022ec <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e15c      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8097 	beq.w	80048c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a7e      	ldr	r2, [pc, #504]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b7c      	ldr	r3, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a75      	ldr	r2, [pc, #468]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd fd85 	bl	80022ec <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd fd81 	bl	80022ec <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e118      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x31e>
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x340>
 8004822:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a60      	ldr	r2, [pc, #384]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
 800482e:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800483c:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a59      	ldr	r2, [pc, #356]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a56      	ldr	r2, [pc, #344]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fd46 	bl	80022ec <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fd42 	bl	80022ec <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0d7      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x368>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd fd30 	bl	80022ec <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd fd2c 	bl	80022ec <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0c1      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80ad 	beq.w	8004a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d060      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d145      	bne.n	800496e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd fd00 	bl	80022ec <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd fcfc 	bl	80022ec <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e093      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fcd1 	bl	80022ec <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fccd 	bl	80022ec <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e064      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x452>
 800496c:	e05c      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fcba 	bl	80022ec <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd fcb6 	bl	80022ec <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
 800499a:	e045      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e040      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCC_OscConfig+0x538>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d030      	beq.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d129      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d122      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d119      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10f      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e042      	b.n	8004ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fa86 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f82b 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b0c0      	sub	sp, #256	; 0x100
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	ea40 0301 	orr.w	r3, r0, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b30:	f021 010c 	bic.w	r1, r1, #12
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	6999      	ldr	r1, [r3, #24]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	ea40 0301 	orr.w	r3, r0, r1
 8004b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <UART_SetConfig+0x2cc>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <UART_SetConfig+0xa0>
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b8d      	ldr	r3, [pc, #564]	; (8004da8 <UART_SetConfig+0x2d0>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7ff fa7c 	bl	8004074 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b80:	e003      	b.n	8004b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b82:	f7ff fa63 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8004b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	f040 810c 	bne.w	8004db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eb12 0801 	adds.w	r8, r2, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb43 0901 	adc.w	r9, r3, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bda:	4690      	mov	r8, r2
 8004bdc:	4699      	mov	r9, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	eb18 0303 	adds.w	r3, r8, r3
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be8:	462b      	mov	r3, r5
 8004bea:	eb49 0303 	adc.w	r3, r9, r3
 8004bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c06:	460b      	mov	r3, r1
 8004c08:	18db      	adds	r3, r3, r3
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
 8004c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c1c:	f7fb ffe4 	bl	8000be8 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b61      	ldr	r3, [pc, #388]	; (8004dac <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c50:	4641      	mov	r1, r8
 8004c52:	eb12 0a01 	adds.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	4692      	mov	sl, r2
 8004c72:	469b      	mov	fp, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	eb4b 0303 	adc.w	r3, fp, r3
 8004c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8004caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb2:	f7fb ff99 	bl	8000be8 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <UART_SetConfig+0x2d4>)
 8004cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce0:	441c      	add	r4, r3
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6e:	f7fb ff3b 	bl	8000be8 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	; 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	3332      	adds	r3, #50	; 0x32
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <UART_SetConfig+0x2d4>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0207 	and.w	r2, r3, #7
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4422      	add	r2, r4
 8004d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da0:	e106      	b.n	8004fb0 <UART_SetConfig+0x4d8>
 8004da2:	bf00      	nop
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40011400 	.word	0x40011400
 8004dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6239      	str	r1, [r7, #32]
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0501 	adc.w	r5, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df8:	464b      	mov	r3, r9
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1e:	4629      	mov	r1, r5
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4621      	mov	r1, r4
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e30:	f7fb feda 	bl	8000be8 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	61b9      	str	r1, [r7, #24]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6139      	str	r1, [r7, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	008b      	lsls	r3, r1, #2
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	008a      	lsls	r2, r1, #2
 8004eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ece:	f7fb fe8b 	bl	8000be8 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eda:	fba3 2301 	umull	r2, r3, r3, r1
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2264      	movs	r2, #100	; 0x64
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	1acb      	subs	r3, r1, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef8:	441c      	add	r4, r3
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
 8004f02:	677a      	str	r2, [r7, #116]	; 0x74
 8004f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	415b      	adcs	r3, r3
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5e:	667a      	str	r2, [r7, #100]	; 0x64
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	008b      	lsls	r3, r1, #2
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f76:	4641      	mov	r1, r8
 8004f78:	008a      	lsls	r2, r1, #2
 8004f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7e:	f7fb fe33 	bl	8000be8 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x4e4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <__cvt>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	ec55 4b10 	vmov	r4, r5, d0
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	460e      	mov	r6, r1
 8004fcc:	4619      	mov	r1, r3
 8004fce:	462b      	mov	r3, r5
 8004fd0:	bfbb      	ittet	lt
 8004fd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fd6:	461d      	movlt	r5, r3
 8004fd8:	2300      	movge	r3, #0
 8004fda:	232d      	movlt	r3, #45	; 0x2d
 8004fdc:	700b      	strb	r3, [r1, #0]
 8004fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fe4:	4691      	mov	r9, r2
 8004fe6:	f023 0820 	bic.w	r8, r3, #32
 8004fea:	bfbc      	itt	lt
 8004fec:	4622      	movlt	r2, r4
 8004fee:	4614      	movlt	r4, r2
 8004ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ff4:	d005      	beq.n	8005002 <__cvt+0x42>
 8004ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ffa:	d100      	bne.n	8004ffe <__cvt+0x3e>
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	2102      	movs	r1, #2
 8005000:	e000      	b.n	8005004 <__cvt+0x44>
 8005002:	2103      	movs	r1, #3
 8005004:	ab03      	add	r3, sp, #12
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	ab02      	add	r3, sp, #8
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	ec45 4b10 	vmov	d0, r4, r5
 8005010:	4653      	mov	r3, sl
 8005012:	4632      	mov	r2, r6
 8005014:	f000 ff30 	bl	8005e78 <_dtoa_r>
 8005018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800501c:	4607      	mov	r7, r0
 800501e:	d102      	bne.n	8005026 <__cvt+0x66>
 8005020:	f019 0f01 	tst.w	r9, #1
 8005024:	d022      	beq.n	800506c <__cvt+0xac>
 8005026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800502a:	eb07 0906 	add.w	r9, r7, r6
 800502e:	d110      	bne.n	8005052 <__cvt+0x92>
 8005030:	783b      	ldrb	r3, [r7, #0]
 8005032:	2b30      	cmp	r3, #48	; 0x30
 8005034:	d10a      	bne.n	800504c <__cvt+0x8c>
 8005036:	2200      	movs	r2, #0
 8005038:	2300      	movs	r3, #0
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb fd63 	bl	8000b08 <__aeabi_dcmpeq>
 8005042:	b918      	cbnz	r0, 800504c <__cvt+0x8c>
 8005044:	f1c6 0601 	rsb	r6, r6, #1
 8005048:	f8ca 6000 	str.w	r6, [sl]
 800504c:	f8da 3000 	ldr.w	r3, [sl]
 8005050:	4499      	add	r9, r3
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f7fb fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800505e:	b108      	cbz	r0, 8005064 <__cvt+0xa4>
 8005060:	f8cd 900c 	str.w	r9, [sp, #12]
 8005064:	2230      	movs	r2, #48	; 0x30
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	454b      	cmp	r3, r9
 800506a:	d307      	bcc.n	800507c <__cvt+0xbc>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005070:	1bdb      	subs	r3, r3, r7
 8005072:	4638      	mov	r0, r7
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	b004      	add	sp, #16
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	1c59      	adds	r1, r3, #1
 800507e:	9103      	str	r1, [sp, #12]
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e7f0      	b.n	8005066 <__cvt+0xa6>

08005084 <__exponent>:
 8005084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005086:	4603      	mov	r3, r0
 8005088:	2900      	cmp	r1, #0
 800508a:	bfb8      	it	lt
 800508c:	4249      	neglt	r1, r1
 800508e:	f803 2b02 	strb.w	r2, [r3], #2
 8005092:	bfb4      	ite	lt
 8005094:	222d      	movlt	r2, #45	; 0x2d
 8005096:	222b      	movge	r2, #43	; 0x2b
 8005098:	2909      	cmp	r1, #9
 800509a:	7042      	strb	r2, [r0, #1]
 800509c:	dd2a      	ble.n	80050f4 <__exponent+0x70>
 800509e:	f10d 0207 	add.w	r2, sp, #7
 80050a2:	4617      	mov	r7, r2
 80050a4:	260a      	movs	r6, #10
 80050a6:	4694      	mov	ip, r2
 80050a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80050ac:	fb06 1415 	mls	r4, r6, r5, r1
 80050b0:	3430      	adds	r4, #48	; 0x30
 80050b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050b6:	460c      	mov	r4, r1
 80050b8:	2c63      	cmp	r4, #99	; 0x63
 80050ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80050be:	4629      	mov	r1, r5
 80050c0:	dcf1      	bgt.n	80050a6 <__exponent+0x22>
 80050c2:	3130      	adds	r1, #48	; 0x30
 80050c4:	f1ac 0402 	sub.w	r4, ip, #2
 80050c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050cc:	1c41      	adds	r1, r0, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	42ba      	cmp	r2, r7
 80050d2:	d30a      	bcc.n	80050ea <__exponent+0x66>
 80050d4:	f10d 0209 	add.w	r2, sp, #9
 80050d8:	eba2 020c 	sub.w	r2, r2, ip
 80050dc:	42bc      	cmp	r4, r7
 80050de:	bf88      	it	hi
 80050e0:	2200      	movhi	r2, #0
 80050e2:	4413      	add	r3, r2
 80050e4:	1a18      	subs	r0, r3, r0
 80050e6:	b003      	add	sp, #12
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050f2:	e7ed      	b.n	80050d0 <__exponent+0x4c>
 80050f4:	2330      	movs	r3, #48	; 0x30
 80050f6:	3130      	adds	r1, #48	; 0x30
 80050f8:	7083      	strb	r3, [r0, #2]
 80050fa:	70c1      	strb	r1, [r0, #3]
 80050fc:	1d03      	adds	r3, r0, #4
 80050fe:	e7f1      	b.n	80050e4 <__exponent+0x60>

08005100 <_printf_float>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ed2d 8b02 	vpush	{d8}
 8005108:	b08d      	sub	sp, #52	; 0x34
 800510a:	460c      	mov	r4, r1
 800510c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005110:	4616      	mov	r6, r2
 8005112:	461f      	mov	r7, r3
 8005114:	4605      	mov	r5, r0
 8005116:	f000 fdaf 	bl	8005c78 <_localeconv_r>
 800511a:	f8d0 a000 	ldr.w	sl, [r0]
 800511e:	4650      	mov	r0, sl
 8005120:	f7fb f8c6 	bl	80002b0 <strlen>
 8005124:	2300      	movs	r3, #0
 8005126:	930a      	str	r3, [sp, #40]	; 0x28
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	f8d8 3000 	ldr.w	r3, [r8]
 8005130:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005134:	3307      	adds	r3, #7
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	f103 0208 	add.w	r2, r3, #8
 800513e:	f8c8 2000 	str.w	r2, [r8]
 8005142:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005150:	ee08 0a10 	vmov	s16, r0
 8005154:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800515c:	4b9e      	ldr	r3, [pc, #632]	; (80053d8 <_printf_float+0x2d8>)
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	f7fb fd03 	bl	8000b6c <__aeabi_dcmpun>
 8005166:	bb88      	cbnz	r0, 80051cc <_printf_float+0xcc>
 8005168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800516c:	4b9a      	ldr	r3, [pc, #616]	; (80053d8 <_printf_float+0x2d8>)
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	f7fb fcdd 	bl	8000b30 <__aeabi_dcmple>
 8005176:	bb48      	cbnz	r0, 80051cc <_printf_float+0xcc>
 8005178:	2200      	movs	r2, #0
 800517a:	2300      	movs	r3, #0
 800517c:	4640      	mov	r0, r8
 800517e:	4649      	mov	r1, r9
 8005180:	f7fb fccc 	bl	8000b1c <__aeabi_dcmplt>
 8005184:	b110      	cbz	r0, 800518c <_printf_float+0x8c>
 8005186:	232d      	movs	r3, #45	; 0x2d
 8005188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800518c:	4a93      	ldr	r2, [pc, #588]	; (80053dc <_printf_float+0x2dc>)
 800518e:	4b94      	ldr	r3, [pc, #592]	; (80053e0 <_printf_float+0x2e0>)
 8005190:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005194:	bf94      	ite	ls
 8005196:	4690      	movls	r8, r2
 8005198:	4698      	movhi	r8, r3
 800519a:	2303      	movs	r3, #3
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	9b05      	ldr	r3, [sp, #20]
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	f04f 0900 	mov.w	r9, #0
 80051aa:	9700      	str	r7, [sp, #0]
 80051ac:	4633      	mov	r3, r6
 80051ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f9da 	bl	800556c <_printf_common>
 80051b8:	3001      	adds	r0, #1
 80051ba:	f040 8090 	bne.w	80052de <_printf_float+0x1de>
 80051be:	f04f 30ff 	mov.w	r0, #4294967295
 80051c2:	b00d      	add	sp, #52	; 0x34
 80051c4:	ecbd 8b02 	vpop	{d8}
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	f7fb fcca 	bl	8000b6c <__aeabi_dcmpun>
 80051d8:	b140      	cbz	r0, 80051ec <_printf_float+0xec>
 80051da:	464b      	mov	r3, r9
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfbc      	itt	lt
 80051e0:	232d      	movlt	r3, #45	; 0x2d
 80051e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051e6:	4a7f      	ldr	r2, [pc, #508]	; (80053e4 <_printf_float+0x2e4>)
 80051e8:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <_printf_float+0x2e8>)
 80051ea:	e7d1      	b.n	8005190 <_printf_float+0x90>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051f2:	9206      	str	r2, [sp, #24]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	d13f      	bne.n	8005278 <_printf_float+0x178>
 80051f8:	2306      	movs	r3, #6
 80051fa:	6063      	str	r3, [r4, #4]
 80051fc:	9b05      	ldr	r3, [sp, #20]
 80051fe:	6861      	ldr	r1, [r4, #4]
 8005200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005204:	2300      	movs	r3, #0
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	ab0a      	add	r3, sp, #40	; 0x28
 800520a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800520e:	ab09      	add	r3, sp, #36	; 0x24
 8005210:	ec49 8b10 	vmov	d0, r8, r9
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800521c:	4628      	mov	r0, r5
 800521e:	f7ff fecf 	bl	8004fc0 <__cvt>
 8005222:	9b06      	ldr	r3, [sp, #24]
 8005224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005226:	2b47      	cmp	r3, #71	; 0x47
 8005228:	4680      	mov	r8, r0
 800522a:	d108      	bne.n	800523e <_printf_float+0x13e>
 800522c:	1cc8      	adds	r0, r1, #3
 800522e:	db02      	blt.n	8005236 <_printf_float+0x136>
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	4299      	cmp	r1, r3
 8005234:	dd41      	ble.n	80052ba <_printf_float+0x1ba>
 8005236:	f1ab 0302 	sub.w	r3, fp, #2
 800523a:	fa5f fb83 	uxtb.w	fp, r3
 800523e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005242:	d820      	bhi.n	8005286 <_printf_float+0x186>
 8005244:	3901      	subs	r1, #1
 8005246:	465a      	mov	r2, fp
 8005248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800524c:	9109      	str	r1, [sp, #36]	; 0x24
 800524e:	f7ff ff19 	bl	8005084 <__exponent>
 8005252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005254:	1813      	adds	r3, r2, r0
 8005256:	2a01      	cmp	r2, #1
 8005258:	4681      	mov	r9, r0
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	dc02      	bgt.n	8005264 <_printf_float+0x164>
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	07d2      	lsls	r2, r2, #31
 8005262:	d501      	bpl.n	8005268 <_printf_float+0x168>
 8005264:	3301      	adds	r3, #1
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800526c:	2b00      	cmp	r3, #0
 800526e:	d09c      	beq.n	80051aa <_printf_float+0xaa>
 8005270:	232d      	movs	r3, #45	; 0x2d
 8005272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005276:	e798      	b.n	80051aa <_printf_float+0xaa>
 8005278:	9a06      	ldr	r2, [sp, #24]
 800527a:	2a47      	cmp	r2, #71	; 0x47
 800527c:	d1be      	bne.n	80051fc <_printf_float+0xfc>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1bc      	bne.n	80051fc <_printf_float+0xfc>
 8005282:	2301      	movs	r3, #1
 8005284:	e7b9      	b.n	80051fa <_printf_float+0xfa>
 8005286:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800528a:	d118      	bne.n	80052be <_printf_float+0x1be>
 800528c:	2900      	cmp	r1, #0
 800528e:	6863      	ldr	r3, [r4, #4]
 8005290:	dd0b      	ble.n	80052aa <_printf_float+0x1aa>
 8005292:	6121      	str	r1, [r4, #16]
 8005294:	b913      	cbnz	r3, 800529c <_printf_float+0x19c>
 8005296:	6822      	ldr	r2, [r4, #0]
 8005298:	07d0      	lsls	r0, r2, #31
 800529a:	d502      	bpl.n	80052a2 <_printf_float+0x1a2>
 800529c:	3301      	adds	r3, #1
 800529e:	440b      	add	r3, r1
 80052a0:	6123      	str	r3, [r4, #16]
 80052a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80052a4:	f04f 0900 	mov.w	r9, #0
 80052a8:	e7de      	b.n	8005268 <_printf_float+0x168>
 80052aa:	b913      	cbnz	r3, 80052b2 <_printf_float+0x1b2>
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	07d2      	lsls	r2, r2, #31
 80052b0:	d501      	bpl.n	80052b6 <_printf_float+0x1b6>
 80052b2:	3302      	adds	r3, #2
 80052b4:	e7f4      	b.n	80052a0 <_printf_float+0x1a0>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7f2      	b.n	80052a0 <_printf_float+0x1a0>
 80052ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c0:	4299      	cmp	r1, r3
 80052c2:	db05      	blt.n	80052d0 <_printf_float+0x1d0>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	6121      	str	r1, [r4, #16]
 80052c8:	07d8      	lsls	r0, r3, #31
 80052ca:	d5ea      	bpl.n	80052a2 <_printf_float+0x1a2>
 80052cc:	1c4b      	adds	r3, r1, #1
 80052ce:	e7e7      	b.n	80052a0 <_printf_float+0x1a0>
 80052d0:	2900      	cmp	r1, #0
 80052d2:	bfd4      	ite	le
 80052d4:	f1c1 0202 	rsble	r2, r1, #2
 80052d8:	2201      	movgt	r2, #1
 80052da:	4413      	add	r3, r2
 80052dc:	e7e0      	b.n	80052a0 <_printf_float+0x1a0>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	055a      	lsls	r2, r3, #21
 80052e2:	d407      	bmi.n	80052f4 <_printf_float+0x1f4>
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	4642      	mov	r2, r8
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	d12c      	bne.n	800534c <_printf_float+0x24c>
 80052f2:	e764      	b.n	80051be <_printf_float+0xbe>
 80052f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052f8:	f240 80e0 	bls.w	80054bc <_printf_float+0x3bc>
 80052fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005300:	2200      	movs	r2, #0
 8005302:	2300      	movs	r3, #0
 8005304:	f7fb fc00 	bl	8000b08 <__aeabi_dcmpeq>
 8005308:	2800      	cmp	r0, #0
 800530a:	d034      	beq.n	8005376 <_printf_float+0x276>
 800530c:	4a37      	ldr	r2, [pc, #220]	; (80053ec <_printf_float+0x2ec>)
 800530e:	2301      	movs	r3, #1
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f af51 	beq.w	80051be <_printf_float+0xbe>
 800531c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005320:	429a      	cmp	r2, r3
 8005322:	db02      	blt.n	800532a <_printf_float+0x22a>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	07d8      	lsls	r0, r3, #31
 8005328:	d510      	bpl.n	800534c <_printf_float+0x24c>
 800532a:	ee18 3a10 	vmov	r3, s16
 800532e:	4652      	mov	r2, sl
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f af41 	beq.w	80051be <_printf_float+0xbe>
 800533c:	f04f 0800 	mov.w	r8, #0
 8005340:	f104 091a 	add.w	r9, r4, #26
 8005344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	4543      	cmp	r3, r8
 800534a:	dc09      	bgt.n	8005360 <_printf_float+0x260>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	f100 8107 	bmi.w	8005562 <_printf_float+0x462>
 8005354:	68e0      	ldr	r0, [r4, #12]
 8005356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005358:	4298      	cmp	r0, r3
 800535a:	bfb8      	it	lt
 800535c:	4618      	movlt	r0, r3
 800535e:	e730      	b.n	80051c2 <_printf_float+0xc2>
 8005360:	2301      	movs	r3, #1
 8005362:	464a      	mov	r2, r9
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f af27 	beq.w	80051be <_printf_float+0xbe>
 8005370:	f108 0801 	add.w	r8, r8, #1
 8005374:	e7e6      	b.n	8005344 <_printf_float+0x244>
 8005376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	dc39      	bgt.n	80053f0 <_printf_float+0x2f0>
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <_printf_float+0x2ec>)
 800537e:	2301      	movs	r3, #1
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f af19 	beq.w	80051be <_printf_float+0xbe>
 800538c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005390:	4313      	orrs	r3, r2
 8005392:	d102      	bne.n	800539a <_printf_float+0x29a>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07d9      	lsls	r1, r3, #31
 8005398:	d5d8      	bpl.n	800534c <_printf_float+0x24c>
 800539a:	ee18 3a10 	vmov	r3, s16
 800539e:	4652      	mov	r2, sl
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af09 	beq.w	80051be <_printf_float+0xbe>
 80053ac:	f04f 0900 	mov.w	r9, #0
 80053b0:	f104 0a1a 	add.w	sl, r4, #26
 80053b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b6:	425b      	negs	r3, r3
 80053b8:	454b      	cmp	r3, r9
 80053ba:	dc01      	bgt.n	80053c0 <_printf_float+0x2c0>
 80053bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053be:	e792      	b.n	80052e6 <_printf_float+0x1e6>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4652      	mov	r2, sl
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f aef7 	beq.w	80051be <_printf_float+0xbe>
 80053d0:	f109 0901 	add.w	r9, r9, #1
 80053d4:	e7ee      	b.n	80053b4 <_printf_float+0x2b4>
 80053d6:	bf00      	nop
 80053d8:	7fefffff 	.word	0x7fefffff
 80053dc:	080081dc 	.word	0x080081dc
 80053e0:	080081e0 	.word	0x080081e0
 80053e4:	080081e4 	.word	0x080081e4
 80053e8:	080081e8 	.word	0x080081e8
 80053ec:	080081ec 	.word	0x080081ec
 80053f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bfa8      	it	ge
 80053f8:	461a      	movge	r2, r3
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	4691      	mov	r9, r2
 80053fe:	dc37      	bgt.n	8005470 <_printf_float+0x370>
 8005400:	f04f 0b00 	mov.w	fp, #0
 8005404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005408:	f104 021a 	add.w	r2, r4, #26
 800540c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800540e:	9305      	str	r3, [sp, #20]
 8005410:	eba3 0309 	sub.w	r3, r3, r9
 8005414:	455b      	cmp	r3, fp
 8005416:	dc33      	bgt.n	8005480 <_printf_float+0x380>
 8005418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800541c:	429a      	cmp	r2, r3
 800541e:	db3b      	blt.n	8005498 <_printf_float+0x398>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07da      	lsls	r2, r3, #31
 8005424:	d438      	bmi.n	8005498 <_printf_float+0x398>
 8005426:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800542a:	eba2 0903 	sub.w	r9, r2, r3
 800542e:	9b05      	ldr	r3, [sp, #20]
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	4591      	cmp	r9, r2
 8005434:	bfa8      	it	ge
 8005436:	4691      	movge	r9, r2
 8005438:	f1b9 0f00 	cmp.w	r9, #0
 800543c:	dc35      	bgt.n	80054aa <_printf_float+0x3aa>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005446:	f104 0a1a 	add.w	sl, r4, #26
 800544a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	eba3 0309 	sub.w	r3, r3, r9
 8005454:	4543      	cmp	r3, r8
 8005456:	f77f af79 	ble.w	800534c <_printf_float+0x24c>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f aeaa 	beq.w	80051be <_printf_float+0xbe>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	e7ec      	b.n	800544a <_printf_float+0x34a>
 8005470:	4613      	mov	r3, r2
 8005472:	4631      	mov	r1, r6
 8005474:	4642      	mov	r2, r8
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	d1c0      	bne.n	8005400 <_printf_float+0x300>
 800547e:	e69e      	b.n	80051be <_printf_float+0xbe>
 8005480:	2301      	movs	r3, #1
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	9205      	str	r2, [sp, #20]
 8005488:	47b8      	blx	r7
 800548a:	3001      	adds	r0, #1
 800548c:	f43f ae97 	beq.w	80051be <_printf_float+0xbe>
 8005490:	9a05      	ldr	r2, [sp, #20]
 8005492:	f10b 0b01 	add.w	fp, fp, #1
 8005496:	e7b9      	b.n	800540c <_printf_float+0x30c>
 8005498:	ee18 3a10 	vmov	r3, s16
 800549c:	4652      	mov	r2, sl
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	d1be      	bne.n	8005426 <_printf_float+0x326>
 80054a8:	e689      	b.n	80051be <_printf_float+0xbe>
 80054aa:	9a05      	ldr	r2, [sp, #20]
 80054ac:	464b      	mov	r3, r9
 80054ae:	4442      	add	r2, r8
 80054b0:	4631      	mov	r1, r6
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	d1c1      	bne.n	800543e <_printf_float+0x33e>
 80054ba:	e680      	b.n	80051be <_printf_float+0xbe>
 80054bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054be:	2a01      	cmp	r2, #1
 80054c0:	dc01      	bgt.n	80054c6 <_printf_float+0x3c6>
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d53a      	bpl.n	800553c <_printf_float+0x43c>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4642      	mov	r2, r8
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f ae74 	beq.w	80051be <_printf_float+0xbe>
 80054d6:	ee18 3a10 	vmov	r3, s16
 80054da:	4652      	mov	r2, sl
 80054dc:	4631      	mov	r1, r6
 80054de:	4628      	mov	r0, r5
 80054e0:	47b8      	blx	r7
 80054e2:	3001      	adds	r0, #1
 80054e4:	f43f ae6b 	beq.w	80051be <_printf_float+0xbe>
 80054e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80054f4:	f7fb fb08 	bl	8000b08 <__aeabi_dcmpeq>
 80054f8:	b9d8      	cbnz	r0, 8005532 <_printf_float+0x432>
 80054fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054fe:	f108 0201 	add.w	r2, r8, #1
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d10e      	bne.n	800552a <_printf_float+0x42a>
 800550c:	e657      	b.n	80051be <_printf_float+0xbe>
 800550e:	2301      	movs	r3, #1
 8005510:	4652      	mov	r2, sl
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f ae50 	beq.w	80051be <_printf_float+0xbe>
 800551e:	f108 0801 	add.w	r8, r8, #1
 8005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005524:	3b01      	subs	r3, #1
 8005526:	4543      	cmp	r3, r8
 8005528:	dcf1      	bgt.n	800550e <_printf_float+0x40e>
 800552a:	464b      	mov	r3, r9
 800552c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005530:	e6da      	b.n	80052e8 <_printf_float+0x1e8>
 8005532:	f04f 0800 	mov.w	r8, #0
 8005536:	f104 0a1a 	add.w	sl, r4, #26
 800553a:	e7f2      	b.n	8005522 <_printf_float+0x422>
 800553c:	2301      	movs	r3, #1
 800553e:	4642      	mov	r2, r8
 8005540:	e7df      	b.n	8005502 <_printf_float+0x402>
 8005542:	2301      	movs	r3, #1
 8005544:	464a      	mov	r2, r9
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae36 	beq.w	80051be <_printf_float+0xbe>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	4543      	cmp	r3, r8
 800555e:	dcf0      	bgt.n	8005542 <_printf_float+0x442>
 8005560:	e6f8      	b.n	8005354 <_printf_float+0x254>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 0919 	add.w	r9, r4, #25
 800556a:	e7f4      	b.n	8005556 <_printf_float+0x456>

0800556c <_printf_common>:
 800556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005570:	4616      	mov	r6, r2
 8005572:	4699      	mov	r9, r3
 8005574:	688a      	ldr	r2, [r1, #8]
 8005576:	690b      	ldr	r3, [r1, #16]
 8005578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800557c:	4293      	cmp	r3, r2
 800557e:	bfb8      	it	lt
 8005580:	4613      	movlt	r3, r2
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005588:	4607      	mov	r7, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b10a      	cbz	r2, 8005592 <_printf_common+0x26>
 800558e:	3301      	adds	r3, #1
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	0699      	lsls	r1, r3, #26
 8005596:	bf42      	ittt	mi
 8005598:	6833      	ldrmi	r3, [r6, #0]
 800559a:	3302      	addmi	r3, #2
 800559c:	6033      	strmi	r3, [r6, #0]
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	f015 0506 	ands.w	r5, r5, #6
 80055a4:	d106      	bne.n	80055b4 <_printf_common+0x48>
 80055a6:	f104 0a19 	add.w	sl, r4, #25
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	6832      	ldr	r2, [r6, #0]
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dc26      	bgt.n	8005602 <_printf_common+0x96>
 80055b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055b8:	1e13      	subs	r3, r2, #0
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	bf18      	it	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	0692      	lsls	r2, r2, #26
 80055c2:	d42b      	bmi.n	800561c <_printf_common+0xb0>
 80055c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055c8:	4649      	mov	r1, r9
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d01e      	beq.n	8005610 <_printf_common+0xa4>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	f003 0306 	and.w	r3, r3, #6
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf02      	ittt	eq
 80055de:	68e5      	ldreq	r5, [r4, #12]
 80055e0:	6833      	ldreq	r3, [r6, #0]
 80055e2:	1aed      	subeq	r5, r5, r3
 80055e4:	68a3      	ldr	r3, [r4, #8]
 80055e6:	bf0c      	ite	eq
 80055e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ec:	2500      	movne	r5, #0
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bfc4      	itt	gt
 80055f2:	1a9b      	subgt	r3, r3, r2
 80055f4:	18ed      	addgt	r5, r5, r3
 80055f6:	2600      	movs	r6, #0
 80055f8:	341a      	adds	r4, #26
 80055fa:	42b5      	cmp	r5, r6
 80055fc:	d11a      	bne.n	8005634 <_printf_common+0xc8>
 80055fe:	2000      	movs	r0, #0
 8005600:	e008      	b.n	8005614 <_printf_common+0xa8>
 8005602:	2301      	movs	r3, #1
 8005604:	4652      	mov	r2, sl
 8005606:	4649      	mov	r1, r9
 8005608:	4638      	mov	r0, r7
 800560a:	47c0      	blx	r8
 800560c:	3001      	adds	r0, #1
 800560e:	d103      	bne.n	8005618 <_printf_common+0xac>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	3501      	adds	r5, #1
 800561a:	e7c6      	b.n	80055aa <_printf_common+0x3e>
 800561c:	18e1      	adds	r1, r4, r3
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	2030      	movs	r0, #48	; 0x30
 8005622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005626:	4422      	add	r2, r4
 8005628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800562c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005630:	3302      	adds	r3, #2
 8005632:	e7c7      	b.n	80055c4 <_printf_common+0x58>
 8005634:	2301      	movs	r3, #1
 8005636:	4622      	mov	r2, r4
 8005638:	4649      	mov	r1, r9
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d0e6      	beq.n	8005610 <_printf_common+0xa4>
 8005642:	3601      	adds	r6, #1
 8005644:	e7d9      	b.n	80055fa <_printf_common+0x8e>
	...

08005648 <_printf_i>:
 8005648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	7e0f      	ldrb	r7, [r1, #24]
 800564e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005650:	2f78      	cmp	r7, #120	; 0x78
 8005652:	4691      	mov	r9, r2
 8005654:	4680      	mov	r8, r0
 8005656:	460c      	mov	r4, r1
 8005658:	469a      	mov	sl, r3
 800565a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800565e:	d807      	bhi.n	8005670 <_printf_i+0x28>
 8005660:	2f62      	cmp	r7, #98	; 0x62
 8005662:	d80a      	bhi.n	800567a <_printf_i+0x32>
 8005664:	2f00      	cmp	r7, #0
 8005666:	f000 80d4 	beq.w	8005812 <_printf_i+0x1ca>
 800566a:	2f58      	cmp	r7, #88	; 0x58
 800566c:	f000 80c0 	beq.w	80057f0 <_printf_i+0x1a8>
 8005670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005678:	e03a      	b.n	80056f0 <_printf_i+0xa8>
 800567a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800567e:	2b15      	cmp	r3, #21
 8005680:	d8f6      	bhi.n	8005670 <_printf_i+0x28>
 8005682:	a101      	add	r1, pc, #4	; (adr r1, 8005688 <_printf_i+0x40>)
 8005684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056f5 	.word	0x080056f5
 8005690:	08005671 	.word	0x08005671
 8005694:	08005671 	.word	0x08005671
 8005698:	08005671 	.word	0x08005671
 800569c:	08005671 	.word	0x08005671
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	08005671 	.word	0x08005671
 80056a8:	08005671 	.word	0x08005671
 80056ac:	08005671 	.word	0x08005671
 80056b0:	08005671 	.word	0x08005671
 80056b4:	080057f9 	.word	0x080057f9
 80056b8:	08005721 	.word	0x08005721
 80056bc:	080057b3 	.word	0x080057b3
 80056c0:	08005671 	.word	0x08005671
 80056c4:	08005671 	.word	0x08005671
 80056c8:	0800581b 	.word	0x0800581b
 80056cc:	08005671 	.word	0x08005671
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005671 	.word	0x08005671
 80056d8:	08005671 	.word	0x08005671
 80056dc:	080057bb 	.word	0x080057bb
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	602a      	str	r2, [r5, #0]
 80056e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056f0:	2301      	movs	r3, #1
 80056f2:	e09f      	b.n	8005834 <_printf_i+0x1ec>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	0607      	lsls	r7, r0, #24
 80056fa:	f103 0104 	add.w	r1, r3, #4
 80056fe:	6029      	str	r1, [r5, #0]
 8005700:	d501      	bpl.n	8005706 <_printf_i+0xbe>
 8005702:	681e      	ldr	r6, [r3, #0]
 8005704:	e003      	b.n	800570e <_printf_i+0xc6>
 8005706:	0646      	lsls	r6, r0, #25
 8005708:	d5fb      	bpl.n	8005702 <_printf_i+0xba>
 800570a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800570e:	2e00      	cmp	r6, #0
 8005710:	da03      	bge.n	800571a <_printf_i+0xd2>
 8005712:	232d      	movs	r3, #45	; 0x2d
 8005714:	4276      	negs	r6, r6
 8005716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800571a:	485a      	ldr	r0, [pc, #360]	; (8005884 <_printf_i+0x23c>)
 800571c:	230a      	movs	r3, #10
 800571e:	e012      	b.n	8005746 <_printf_i+0xfe>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	1d19      	adds	r1, r3, #4
 8005726:	6029      	str	r1, [r5, #0]
 8005728:	0605      	lsls	r5, r0, #24
 800572a:	d501      	bpl.n	8005730 <_printf_i+0xe8>
 800572c:	681e      	ldr	r6, [r3, #0]
 800572e:	e002      	b.n	8005736 <_printf_i+0xee>
 8005730:	0641      	lsls	r1, r0, #25
 8005732:	d5fb      	bpl.n	800572c <_printf_i+0xe4>
 8005734:	881e      	ldrh	r6, [r3, #0]
 8005736:	4853      	ldr	r0, [pc, #332]	; (8005884 <_printf_i+0x23c>)
 8005738:	2f6f      	cmp	r7, #111	; 0x6f
 800573a:	bf0c      	ite	eq
 800573c:	2308      	moveq	r3, #8
 800573e:	230a      	movne	r3, #10
 8005740:	2100      	movs	r1, #0
 8005742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005746:	6865      	ldr	r5, [r4, #4]
 8005748:	60a5      	str	r5, [r4, #8]
 800574a:	2d00      	cmp	r5, #0
 800574c:	bfa2      	ittt	ge
 800574e:	6821      	ldrge	r1, [r4, #0]
 8005750:	f021 0104 	bicge.w	r1, r1, #4
 8005754:	6021      	strge	r1, [r4, #0]
 8005756:	b90e      	cbnz	r6, 800575c <_printf_i+0x114>
 8005758:	2d00      	cmp	r5, #0
 800575a:	d04b      	beq.n	80057f4 <_printf_i+0x1ac>
 800575c:	4615      	mov	r5, r2
 800575e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005762:	fb03 6711 	mls	r7, r3, r1, r6
 8005766:	5dc7      	ldrb	r7, [r0, r7]
 8005768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800576c:	4637      	mov	r7, r6
 800576e:	42bb      	cmp	r3, r7
 8005770:	460e      	mov	r6, r1
 8005772:	d9f4      	bls.n	800575e <_printf_i+0x116>
 8005774:	2b08      	cmp	r3, #8
 8005776:	d10b      	bne.n	8005790 <_printf_i+0x148>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	07de      	lsls	r6, r3, #31
 800577c:	d508      	bpl.n	8005790 <_printf_i+0x148>
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	6861      	ldr	r1, [r4, #4]
 8005782:	4299      	cmp	r1, r3
 8005784:	bfde      	ittt	le
 8005786:	2330      	movle	r3, #48	; 0x30
 8005788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800578c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005790:	1b52      	subs	r2, r2, r5
 8005792:	6122      	str	r2, [r4, #16]
 8005794:	f8cd a000 	str.w	sl, [sp]
 8005798:	464b      	mov	r3, r9
 800579a:	aa03      	add	r2, sp, #12
 800579c:	4621      	mov	r1, r4
 800579e:	4640      	mov	r0, r8
 80057a0:	f7ff fee4 	bl	800556c <_printf_common>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d14a      	bne.n	800583e <_printf_i+0x1f6>
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	b004      	add	sp, #16
 80057ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f043 0320 	orr.w	r3, r3, #32
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	4833      	ldr	r0, [pc, #204]	; (8005888 <_printf_i+0x240>)
 80057bc:	2778      	movs	r7, #120	; 0x78
 80057be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	6829      	ldr	r1, [r5, #0]
 80057c6:	061f      	lsls	r7, r3, #24
 80057c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057cc:	d402      	bmi.n	80057d4 <_printf_i+0x18c>
 80057ce:	065f      	lsls	r7, r3, #25
 80057d0:	bf48      	it	mi
 80057d2:	b2b6      	uxthmi	r6, r6
 80057d4:	07df      	lsls	r7, r3, #31
 80057d6:	bf48      	it	mi
 80057d8:	f043 0320 	orrmi.w	r3, r3, #32
 80057dc:	6029      	str	r1, [r5, #0]
 80057de:	bf48      	it	mi
 80057e0:	6023      	strmi	r3, [r4, #0]
 80057e2:	b91e      	cbnz	r6, 80057ec <_printf_i+0x1a4>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	f023 0320 	bic.w	r3, r3, #32
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	2310      	movs	r3, #16
 80057ee:	e7a7      	b.n	8005740 <_printf_i+0xf8>
 80057f0:	4824      	ldr	r0, [pc, #144]	; (8005884 <_printf_i+0x23c>)
 80057f2:	e7e4      	b.n	80057be <_printf_i+0x176>
 80057f4:	4615      	mov	r5, r2
 80057f6:	e7bd      	b.n	8005774 <_printf_i+0x12c>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	6826      	ldr	r6, [r4, #0]
 80057fc:	6961      	ldr	r1, [r4, #20]
 80057fe:	1d18      	adds	r0, r3, #4
 8005800:	6028      	str	r0, [r5, #0]
 8005802:	0635      	lsls	r5, r6, #24
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	d501      	bpl.n	800580c <_printf_i+0x1c4>
 8005808:	6019      	str	r1, [r3, #0]
 800580a:	e002      	b.n	8005812 <_printf_i+0x1ca>
 800580c:	0670      	lsls	r0, r6, #25
 800580e:	d5fb      	bpl.n	8005808 <_printf_i+0x1c0>
 8005810:	8019      	strh	r1, [r3, #0]
 8005812:	2300      	movs	r3, #0
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	4615      	mov	r5, r2
 8005818:	e7bc      	b.n	8005794 <_printf_i+0x14c>
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	1d1a      	adds	r2, r3, #4
 800581e:	602a      	str	r2, [r5, #0]
 8005820:	681d      	ldr	r5, [r3, #0]
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	2100      	movs	r1, #0
 8005826:	4628      	mov	r0, r5
 8005828:	f7fa fcf2 	bl	8000210 <memchr>
 800582c:	b108      	cbz	r0, 8005832 <_printf_i+0x1ea>
 800582e:	1b40      	subs	r0, r0, r5
 8005830:	6060      	str	r0, [r4, #4]
 8005832:	6863      	ldr	r3, [r4, #4]
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	2300      	movs	r3, #0
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	e7aa      	b.n	8005794 <_printf_i+0x14c>
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	462a      	mov	r2, r5
 8005842:	4649      	mov	r1, r9
 8005844:	4640      	mov	r0, r8
 8005846:	47d0      	blx	sl
 8005848:	3001      	adds	r0, #1
 800584a:	d0ad      	beq.n	80057a8 <_printf_i+0x160>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	079b      	lsls	r3, r3, #30
 8005850:	d413      	bmi.n	800587a <_printf_i+0x232>
 8005852:	68e0      	ldr	r0, [r4, #12]
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	4298      	cmp	r0, r3
 8005858:	bfb8      	it	lt
 800585a:	4618      	movlt	r0, r3
 800585c:	e7a6      	b.n	80057ac <_printf_i+0x164>
 800585e:	2301      	movs	r3, #1
 8005860:	4632      	mov	r2, r6
 8005862:	4649      	mov	r1, r9
 8005864:	4640      	mov	r0, r8
 8005866:	47d0      	blx	sl
 8005868:	3001      	adds	r0, #1
 800586a:	d09d      	beq.n	80057a8 <_printf_i+0x160>
 800586c:	3501      	adds	r5, #1
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	9903      	ldr	r1, [sp, #12]
 8005872:	1a5b      	subs	r3, r3, r1
 8005874:	42ab      	cmp	r3, r5
 8005876:	dcf2      	bgt.n	800585e <_printf_i+0x216>
 8005878:	e7eb      	b.n	8005852 <_printf_i+0x20a>
 800587a:	2500      	movs	r5, #0
 800587c:	f104 0619 	add.w	r6, r4, #25
 8005880:	e7f5      	b.n	800586e <_printf_i+0x226>
 8005882:	bf00      	nop
 8005884:	080081ee 	.word	0x080081ee
 8005888:	080081ff 	.word	0x080081ff

0800588c <std>:
 800588c:	2300      	movs	r3, #0
 800588e:	b510      	push	{r4, lr}
 8005890:	4604      	mov	r4, r0
 8005892:	e9c0 3300 	strd	r3, r3, [r0]
 8005896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800589a:	6083      	str	r3, [r0, #8]
 800589c:	8181      	strh	r1, [r0, #12]
 800589e:	6643      	str	r3, [r0, #100]	; 0x64
 80058a0:	81c2      	strh	r2, [r0, #14]
 80058a2:	6183      	str	r3, [r0, #24]
 80058a4:	4619      	mov	r1, r3
 80058a6:	2208      	movs	r2, #8
 80058a8:	305c      	adds	r0, #92	; 0x5c
 80058aa:	f000 f9dc 	bl	8005c66 <memset>
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <std+0x58>)
 80058b0:	6263      	str	r3, [r4, #36]	; 0x24
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <std+0x5c>)
 80058b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <std+0x60>)
 80058b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <std+0x64>)
 80058bc:	6323      	str	r3, [r4, #48]	; 0x30
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <std+0x68>)
 80058c0:	6224      	str	r4, [r4, #32]
 80058c2:	429c      	cmp	r4, r3
 80058c4:	d006      	beq.n	80058d4 <std+0x48>
 80058c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058ca:	4294      	cmp	r4, r2
 80058cc:	d002      	beq.n	80058d4 <std+0x48>
 80058ce:	33d0      	adds	r3, #208	; 0xd0
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d105      	bne.n	80058e0 <std+0x54>
 80058d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058dc:	f000 ba40 	b.w	8005d60 <__retarget_lock_init_recursive>
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	bf00      	nop
 80058e4:	08005be1 	.word	0x08005be1
 80058e8:	08005c03 	.word	0x08005c03
 80058ec:	08005c3b 	.word	0x08005c3b
 80058f0:	08005c5f 	.word	0x08005c5f
 80058f4:	20000378 	.word	0x20000378

080058f8 <stdio_exit_handler>:
 80058f8:	4a02      	ldr	r2, [pc, #8]	; (8005904 <stdio_exit_handler+0xc>)
 80058fa:	4903      	ldr	r1, [pc, #12]	; (8005908 <stdio_exit_handler+0x10>)
 80058fc:	4803      	ldr	r0, [pc, #12]	; (800590c <stdio_exit_handler+0x14>)
 80058fe:	f000 b869 	b.w	80059d4 <_fwalk_sglue>
 8005902:	bf00      	nop
 8005904:	20000040 	.word	0x20000040
 8005908:	08007999 	.word	0x08007999
 800590c:	2000004c 	.word	0x2000004c

08005910 <cleanup_stdio>:
 8005910:	6841      	ldr	r1, [r0, #4]
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <cleanup_stdio+0x34>)
 8005914:	4299      	cmp	r1, r3
 8005916:	b510      	push	{r4, lr}
 8005918:	4604      	mov	r4, r0
 800591a:	d001      	beq.n	8005920 <cleanup_stdio+0x10>
 800591c:	f002 f83c 	bl	8007998 <_fflush_r>
 8005920:	68a1      	ldr	r1, [r4, #8]
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <cleanup_stdio+0x38>)
 8005924:	4299      	cmp	r1, r3
 8005926:	d002      	beq.n	800592e <cleanup_stdio+0x1e>
 8005928:	4620      	mov	r0, r4
 800592a:	f002 f835 	bl	8007998 <_fflush_r>
 800592e:	68e1      	ldr	r1, [r4, #12]
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <cleanup_stdio+0x3c>)
 8005932:	4299      	cmp	r1, r3
 8005934:	d004      	beq.n	8005940 <cleanup_stdio+0x30>
 8005936:	4620      	mov	r0, r4
 8005938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593c:	f002 b82c 	b.w	8007998 <_fflush_r>
 8005940:	bd10      	pop	{r4, pc}
 8005942:	bf00      	nop
 8005944:	20000378 	.word	0x20000378
 8005948:	200003e0 	.word	0x200003e0
 800594c:	20000448 	.word	0x20000448

08005950 <global_stdio_init.part.0>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <global_stdio_init.part.0+0x30>)
 8005954:	4c0b      	ldr	r4, [pc, #44]	; (8005984 <global_stdio_init.part.0+0x34>)
 8005956:	4a0c      	ldr	r2, [pc, #48]	; (8005988 <global_stdio_init.part.0+0x38>)
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	4620      	mov	r0, r4
 800595c:	2200      	movs	r2, #0
 800595e:	2104      	movs	r1, #4
 8005960:	f7ff ff94 	bl	800588c <std>
 8005964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005968:	2201      	movs	r2, #1
 800596a:	2109      	movs	r1, #9
 800596c:	f7ff ff8e 	bl	800588c <std>
 8005970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005974:	2202      	movs	r2, #2
 8005976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800597a:	2112      	movs	r1, #18
 800597c:	f7ff bf86 	b.w	800588c <std>
 8005980:	200004b0 	.word	0x200004b0
 8005984:	20000378 	.word	0x20000378
 8005988:	080058f9 	.word	0x080058f9

0800598c <__sfp_lock_acquire>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__sfp_lock_acquire+0x8>)
 800598e:	f000 b9e8 	b.w	8005d62 <__retarget_lock_acquire_recursive>
 8005992:	bf00      	nop
 8005994:	200004b9 	.word	0x200004b9

08005998 <__sfp_lock_release>:
 8005998:	4801      	ldr	r0, [pc, #4]	; (80059a0 <__sfp_lock_release+0x8>)
 800599a:	f000 b9e3 	b.w	8005d64 <__retarget_lock_release_recursive>
 800599e:	bf00      	nop
 80059a0:	200004b9 	.word	0x200004b9

080059a4 <__sinit>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	f7ff fff0 	bl	800598c <__sfp_lock_acquire>
 80059ac:	6a23      	ldr	r3, [r4, #32]
 80059ae:	b11b      	cbz	r3, 80059b8 <__sinit+0x14>
 80059b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b4:	f7ff bff0 	b.w	8005998 <__sfp_lock_release>
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <__sinit+0x28>)
 80059ba:	6223      	str	r3, [r4, #32]
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <__sinit+0x2c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f5      	bne.n	80059b0 <__sinit+0xc>
 80059c4:	f7ff ffc4 	bl	8005950 <global_stdio_init.part.0>
 80059c8:	e7f2      	b.n	80059b0 <__sinit+0xc>
 80059ca:	bf00      	nop
 80059cc:	08005911 	.word	0x08005911
 80059d0:	200004b0 	.word	0x200004b0

080059d4 <_fwalk_sglue>:
 80059d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d8:	4607      	mov	r7, r0
 80059da:	4688      	mov	r8, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	2600      	movs	r6, #0
 80059e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059e4:	f1b9 0901 	subs.w	r9, r9, #1
 80059e8:	d505      	bpl.n	80059f6 <_fwalk_sglue+0x22>
 80059ea:	6824      	ldr	r4, [r4, #0]
 80059ec:	2c00      	cmp	r4, #0
 80059ee:	d1f7      	bne.n	80059e0 <_fwalk_sglue+0xc>
 80059f0:	4630      	mov	r0, r6
 80059f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d907      	bls.n	8005a0c <_fwalk_sglue+0x38>
 80059fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a00:	3301      	adds	r3, #1
 8005a02:	d003      	beq.n	8005a0c <_fwalk_sglue+0x38>
 8005a04:	4629      	mov	r1, r5
 8005a06:	4638      	mov	r0, r7
 8005a08:	47c0      	blx	r8
 8005a0a:	4306      	orrs	r6, r0
 8005a0c:	3568      	adds	r5, #104	; 0x68
 8005a0e:	e7e9      	b.n	80059e4 <_fwalk_sglue+0x10>

08005a10 <iprintf>:
 8005a10:	b40f      	push	{r0, r1, r2, r3}
 8005a12:	b507      	push	{r0, r1, r2, lr}
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <iprintf+0x20>)
 8005a16:	ab04      	add	r3, sp, #16
 8005a18:	6808      	ldr	r0, [r1, #0]
 8005a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1e:	6881      	ldr	r1, [r0, #8]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f001 fe19 	bl	8007658 <_vfiprintf_r>
 8005a26:	b003      	add	sp, #12
 8005a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a2c:	b004      	add	sp, #16
 8005a2e:	4770      	bx	lr
 8005a30:	20000098 	.word	0x20000098

08005a34 <setbuf>:
 8005a34:	fab1 f281 	clz	r2, r1
 8005a38:	0952      	lsrs	r2, r2, #5
 8005a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3e:	0052      	lsls	r2, r2, #1
 8005a40:	f000 b800 	b.w	8005a44 <setvbuf>

08005a44 <setvbuf>:
 8005a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a48:	461d      	mov	r5, r3
 8005a4a:	4b54      	ldr	r3, [pc, #336]	; (8005b9c <setvbuf+0x158>)
 8005a4c:	681f      	ldr	r7, [r3, #0]
 8005a4e:	4604      	mov	r4, r0
 8005a50:	460e      	mov	r6, r1
 8005a52:	4690      	mov	r8, r2
 8005a54:	b127      	cbz	r7, 8005a60 <setvbuf+0x1c>
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	b913      	cbnz	r3, 8005a60 <setvbuf+0x1c>
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff ffa2 	bl	80059a4 <__sinit>
 8005a60:	f1b8 0f02 	cmp.w	r8, #2
 8005a64:	d006      	beq.n	8005a74 <setvbuf+0x30>
 8005a66:	f1b8 0f01 	cmp.w	r8, #1
 8005a6a:	f200 8094 	bhi.w	8005b96 <setvbuf+0x152>
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	f2c0 8091 	blt.w	8005b96 <setvbuf+0x152>
 8005a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <setvbuf+0x42>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	059b      	lsls	r3, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <setvbuf+0x42>
 8005a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a82:	f000 f96e 	bl	8005d62 <__retarget_lock_acquire_recursive>
 8005a86:	4621      	mov	r1, r4
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f001 ff85 	bl	8007998 <_fflush_r>
 8005a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a90:	b141      	cbz	r1, 8005aa4 <setvbuf+0x60>
 8005a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a96:	4299      	cmp	r1, r3
 8005a98:	d002      	beq.n	8005aa0 <setvbuf+0x5c>
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f000 ffde 	bl	8006a5c <_free_r>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6363      	str	r3, [r4, #52]	; 0x34
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61a3      	str	r3, [r4, #24]
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	0618      	lsls	r0, r3, #24
 8005aae:	d503      	bpl.n	8005ab8 <setvbuf+0x74>
 8005ab0:	6921      	ldr	r1, [r4, #16]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f000 ffd2 	bl	8006a5c <_free_r>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	f1b8 0f02 	cmp.w	r8, #2
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	d05f      	beq.n	8005b8a <setvbuf+0x146>
 8005aca:	ab01      	add	r3, sp, #4
 8005acc:	466a      	mov	r2, sp
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f001 ff89 	bl	80079e8 <__swhatbuf_r>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	4318      	orrs	r0, r3
 8005ada:	81a0      	strh	r0, [r4, #12]
 8005adc:	bb2d      	cbnz	r5, 8005b2a <setvbuf+0xe6>
 8005ade:	9d00      	ldr	r5, [sp, #0]
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f001 f807 	bl	8006af4 <malloc>
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d150      	bne.n	8005b8e <setvbuf+0x14a>
 8005aec:	f8dd 9000 	ldr.w	r9, [sp]
 8005af0:	45a9      	cmp	r9, r5
 8005af2:	d13e      	bne.n	8005b72 <setvbuf+0x12e>
 8005af4:	f04f 35ff 	mov.w	r5, #4294967295
 8005af8:	2200      	movs	r2, #0
 8005afa:	60a2      	str	r2, [r4, #8]
 8005afc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	6122      	str	r2, [r4, #16]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0a:	6162      	str	r2, [r4, #20]
 8005b0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b0e:	f043 0302 	orr.w	r3, r3, #2
 8005b12:	07d1      	lsls	r1, r2, #31
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	d404      	bmi.n	8005b22 <setvbuf+0xde>
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	d402      	bmi.n	8005b22 <setvbuf+0xde>
 8005b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1e:	f000 f921 	bl	8005d64 <__retarget_lock_release_recursive>
 8005b22:	4628      	mov	r0, r5
 8005b24:	b003      	add	sp, #12
 8005b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	d0d8      	beq.n	8005ae0 <setvbuf+0x9c>
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	b913      	cbnz	r3, 8005b38 <setvbuf+0xf4>
 8005b32:	4638      	mov	r0, r7
 8005b34:	f7ff ff36 	bl	80059a4 <__sinit>
 8005b38:	f1b8 0f01 	cmp.w	r8, #1
 8005b3c:	bf08      	it	eq
 8005b3e:	89a3      	ldrheq	r3, [r4, #12]
 8005b40:	6026      	str	r6, [r4, #0]
 8005b42:	bf04      	itt	eq
 8005b44:	f043 0301 	orreq.w	r3, r3, #1
 8005b48:	81a3      	strheq	r3, [r4, #12]
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	f013 0208 	ands.w	r2, r3, #8
 8005b50:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b54:	d01d      	beq.n	8005b92 <setvbuf+0x14e>
 8005b56:	07da      	lsls	r2, r3, #31
 8005b58:	bf41      	itttt	mi
 8005b5a:	2200      	movmi	r2, #0
 8005b5c:	426d      	negmi	r5, r5
 8005b5e:	60a2      	strmi	r2, [r4, #8]
 8005b60:	61a5      	strmi	r5, [r4, #24]
 8005b62:	bf58      	it	pl
 8005b64:	60a5      	strpl	r5, [r4, #8]
 8005b66:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005b68:	f015 0501 	ands.w	r5, r5, #1
 8005b6c:	d0d4      	beq.n	8005b18 <setvbuf+0xd4>
 8005b6e:	2500      	movs	r5, #0
 8005b70:	e7d7      	b.n	8005b22 <setvbuf+0xde>
 8005b72:	4648      	mov	r0, r9
 8005b74:	f000 ffbe 	bl	8006af4 <malloc>
 8005b78:	4606      	mov	r6, r0
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d0ba      	beq.n	8005af4 <setvbuf+0xb0>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	464d      	mov	r5, r9
 8005b88:	e7d1      	b.n	8005b2e <setvbuf+0xea>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	e7b4      	b.n	8005af8 <setvbuf+0xb4>
 8005b8e:	46a9      	mov	r9, r5
 8005b90:	e7f5      	b.n	8005b7e <setvbuf+0x13a>
 8005b92:	60a2      	str	r2, [r4, #8]
 8005b94:	e7e7      	b.n	8005b66 <setvbuf+0x122>
 8005b96:	f04f 35ff 	mov.w	r5, #4294967295
 8005b9a:	e7c2      	b.n	8005b22 <setvbuf+0xde>
 8005b9c:	20000098 	.word	0x20000098

08005ba0 <siprintf>:
 8005ba0:	b40e      	push	{r1, r2, r3}
 8005ba2:	b500      	push	{lr}
 8005ba4:	b09c      	sub	sp, #112	; 0x70
 8005ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba8:	9002      	str	r0, [sp, #8]
 8005baa:	9006      	str	r0, [sp, #24]
 8005bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bb0:	4809      	ldr	r0, [pc, #36]	; (8005bd8 <siprintf+0x38>)
 8005bb2:	9107      	str	r1, [sp, #28]
 8005bb4:	9104      	str	r1, [sp, #16]
 8005bb6:	4909      	ldr	r1, [pc, #36]	; (8005bdc <siprintf+0x3c>)
 8005bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bbc:	9105      	str	r1, [sp, #20]
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	a902      	add	r1, sp, #8
 8005bc4:	f001 fc20 	bl	8007408 <_svfiprintf_r>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	b01c      	add	sp, #112	; 0x70
 8005bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd4:	b003      	add	sp, #12
 8005bd6:	4770      	bx	lr
 8005bd8:	20000098 	.word	0x20000098
 8005bdc:	ffff0208 	.word	0xffff0208

08005be0 <__sread>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	460c      	mov	r4, r1
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	f000 f86c 	bl	8005cc4 <_read_r>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	bfab      	itete	ge
 8005bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf4:	181b      	addge	r3, r3, r0
 8005bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bfa:	bfac      	ite	ge
 8005bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bfe:	81a3      	strhlt	r3, [r4, #12]
 8005c00:	bd10      	pop	{r4, pc}

08005c02 <__swrite>:
 8005c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	461f      	mov	r7, r3
 8005c08:	898b      	ldrh	r3, [r1, #12]
 8005c0a:	05db      	lsls	r3, r3, #23
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4616      	mov	r6, r2
 8005c12:	d505      	bpl.n	8005c20 <__swrite+0x1e>
 8005c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c18:	2302      	movs	r3, #2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f000 f840 	bl	8005ca0 <_lseek_r>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	463b      	mov	r3, r7
 8005c30:	4628      	mov	r0, r5
 8005c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c36:	f000 b857 	b.w	8005ce8 <_write_r>

08005c3a <__sseek>:
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c42:	f000 f82d 	bl	8005ca0 <_lseek_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	bf15      	itete	ne
 8005c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c56:	81a3      	strheq	r3, [r4, #12]
 8005c58:	bf18      	it	ne
 8005c5a:	81a3      	strhne	r3, [r4, #12]
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <__sclose>:
 8005c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c62:	f000 b80d 	b.w	8005c80 <_close_r>

08005c66 <memset>:
 8005c66:	4402      	add	r2, r0
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d100      	bne.n	8005c70 <memset+0xa>
 8005c6e:	4770      	bx	lr
 8005c70:	f803 1b01 	strb.w	r1, [r3], #1
 8005c74:	e7f9      	b.n	8005c6a <memset+0x4>
	...

08005c78 <_localeconv_r>:
 8005c78:	4800      	ldr	r0, [pc, #0]	; (8005c7c <_localeconv_r+0x4>)
 8005c7a:	4770      	bx	lr
 8005c7c:	2000018c 	.word	0x2000018c

08005c80 <_close_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4d06      	ldr	r5, [pc, #24]	; (8005c9c <_close_r+0x1c>)
 8005c84:	2300      	movs	r3, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	f7fc fa21 	bl	80020d2 <_close>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_close_r+0x1a>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_close_r+0x1a>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	200004b4 	.word	0x200004b4

08005ca0 <_lseek_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	; (8005cc0 <_lseek_r+0x20>)
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fc fa36 	bl	8002120 <_lseek>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_lseek_r+0x1e>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_lseek_r+0x1e>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200004b4 	.word	0x200004b4

08005cc4 <_read_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	; (8005ce4 <_read_r+0x20>)
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4608      	mov	r0, r1
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	602a      	str	r2, [r5, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f7fc f9e0 	bl	8002098 <_read>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_read_r+0x1e>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_read_r+0x1e>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	200004b4 	.word	0x200004b4

08005ce8 <_write_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_write_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb fc8a 	bl	8001610 <_write>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_write_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_write_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	200004b4 	.word	0x200004b4

08005d0c <__errno>:
 8005d0c:	4b01      	ldr	r3, [pc, #4]	; (8005d14 <__errno+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000098 	.word	0x20000098

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4d0d      	ldr	r5, [pc, #52]	; (8005d50 <__libc_init_array+0x38>)
 8005d1c:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d1e:	1b64      	subs	r4, r4, r5
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	2600      	movs	r6, #0
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	4d0b      	ldr	r5, [pc, #44]	; (8005d58 <__libc_init_array+0x40>)
 8005d2a:	4c0c      	ldr	r4, [pc, #48]	; (8005d5c <__libc_init_array+0x44>)
 8005d2c:	f002 f896 	bl	8007e5c <_init>
 8005d30:	1b64      	subs	r4, r4, r5
 8005d32:	10a4      	asrs	r4, r4, #2
 8005d34:	2600      	movs	r6, #0
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08008554 	.word	0x08008554
 8005d54:	08008554 	.word	0x08008554
 8005d58:	08008554 	.word	0x08008554
 8005d5c:	08008558 	.word	0x08008558

08005d60 <__retarget_lock_init_recursive>:
 8005d60:	4770      	bx	lr

08005d62 <__retarget_lock_acquire_recursive>:
 8005d62:	4770      	bx	lr

08005d64 <__retarget_lock_release_recursive>:
 8005d64:	4770      	bx	lr

08005d66 <quorem>:
 8005d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	6903      	ldr	r3, [r0, #16]
 8005d6c:	690c      	ldr	r4, [r1, #16]
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	4607      	mov	r7, r0
 8005d72:	db7e      	blt.n	8005e72 <quorem+0x10c>
 8005d74:	3c01      	subs	r4, #1
 8005d76:	f101 0814 	add.w	r8, r1, #20
 8005d7a:	f100 0514 	add.w	r5, r0, #20
 8005d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d9c:	d331      	bcc.n	8005e02 <quorem+0x9c>
 8005d9e:	f04f 0e00 	mov.w	lr, #0
 8005da2:	4640      	mov	r0, r8
 8005da4:	46ac      	mov	ip, r5
 8005da6:	46f2      	mov	sl, lr
 8005da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dac:	b293      	uxth	r3, r2
 8005dae:	fb06 e303 	mla	r3, r6, r3, lr
 8005db2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005db6:	0c1a      	lsrs	r2, r3, #16
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ebaa 0303 	sub.w	r3, sl, r3
 8005dbe:	f8dc a000 	ldr.w	sl, [ip]
 8005dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8005dc6:	fb06 220e 	mla	r2, r6, lr, r2
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ddc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005de0:	4581      	cmp	r9, r0
 8005de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005de6:	f84c 3b04 	str.w	r3, [ip], #4
 8005dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dee:	d2db      	bcs.n	8005da8 <quorem+0x42>
 8005df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005df4:	b92b      	cbnz	r3, 8005e02 <quorem+0x9c>
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	3b04      	subs	r3, #4
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	d32c      	bcc.n	8005e5a <quorem+0xf4>
 8005e00:	613c      	str	r4, [r7, #16]
 8005e02:	4638      	mov	r0, r7
 8005e04:	f001 f9a6 	bl	8007154 <__mcmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	db22      	blt.n	8005e52 <quorem+0xec>
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	4629      	mov	r1, r5
 8005e10:	2000      	movs	r0, #0
 8005e12:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e16:	f8d1 c000 	ldr.w	ip, [r1]
 8005e1a:	b293      	uxth	r3, r2
 8005e1c:	1ac3      	subs	r3, r0, r3
 8005e1e:	0c12      	lsrs	r2, r2, #16
 8005e20:	fa13 f38c 	uxtah	r3, r3, ip
 8005e24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e32:	45c1      	cmp	r9, r8
 8005e34:	f841 3b04 	str.w	r3, [r1], #4
 8005e38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e3c:	d2e9      	bcs.n	8005e12 <quorem+0xac>
 8005e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e46:	b922      	cbnz	r2, 8005e52 <quorem+0xec>
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	d30a      	bcc.n	8005e66 <quorem+0x100>
 8005e50:	613c      	str	r4, [r7, #16]
 8005e52:	4630      	mov	r0, r6
 8005e54:	b003      	add	sp, #12
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d1ce      	bne.n	8005e00 <quorem+0x9a>
 8005e62:	3c01      	subs	r4, #1
 8005e64:	e7c9      	b.n	8005dfa <quorem+0x94>
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	d1f0      	bne.n	8005e50 <quorem+0xea>
 8005e6e:	3c01      	subs	r4, #1
 8005e70:	e7eb      	b.n	8005e4a <quorem+0xe4>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e7ee      	b.n	8005e54 <quorem+0xee>
	...

08005e78 <_dtoa_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	ed2d 8b04 	vpush	{d8-d9}
 8005e80:	69c5      	ldr	r5, [r0, #28]
 8005e82:	b093      	sub	sp, #76	; 0x4c
 8005e84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e88:	ec57 6b10 	vmov	r6, r7, d0
 8005e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e90:	9107      	str	r1, [sp, #28]
 8005e92:	4604      	mov	r4, r0
 8005e94:	920a      	str	r2, [sp, #40]	; 0x28
 8005e96:	930d      	str	r3, [sp, #52]	; 0x34
 8005e98:	b975      	cbnz	r5, 8005eb8 <_dtoa_r+0x40>
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	f000 fe2a 	bl	8006af4 <malloc>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	61e0      	str	r0, [r4, #28]
 8005ea4:	b920      	cbnz	r0, 8005eb0 <_dtoa_r+0x38>
 8005ea6:	4bae      	ldr	r3, [pc, #696]	; (8006160 <_dtoa_r+0x2e8>)
 8005ea8:	21ef      	movs	r1, #239	; 0xef
 8005eaa:	48ae      	ldr	r0, [pc, #696]	; (8006164 <_dtoa_r+0x2ec>)
 8005eac:	f001 feee 	bl	8007c8c <__assert_func>
 8005eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005eb4:	6005      	str	r5, [r0, #0]
 8005eb6:	60c5      	str	r5, [r0, #12]
 8005eb8:	69e3      	ldr	r3, [r4, #28]
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	b151      	cbz	r1, 8005ed4 <_dtoa_r+0x5c>
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	604a      	str	r2, [r1, #4]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4093      	lsls	r3, r2
 8005ec6:	608b      	str	r3, [r1, #8]
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 ff07 	bl	8006cdc <_Bfree>
 8005ece:	69e3      	ldr	r3, [r4, #28]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	1e3b      	subs	r3, r7, #0
 8005ed6:	bfbb      	ittet	lt
 8005ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005edc:	9303      	strlt	r3, [sp, #12]
 8005ede:	2300      	movge	r3, #0
 8005ee0:	2201      	movlt	r2, #1
 8005ee2:	bfac      	ite	ge
 8005ee4:	f8c8 3000 	strge.w	r3, [r8]
 8005ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8005eec:	4b9e      	ldr	r3, [pc, #632]	; (8006168 <_dtoa_r+0x2f0>)
 8005eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ef2:	ea33 0308 	bics.w	r3, r3, r8
 8005ef6:	d11b      	bne.n	8005f30 <_dtoa_r+0xb8>
 8005ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005efa:	f242 730f 	movw	r3, #9999	; 0x270f
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f04:	4333      	orrs	r3, r6
 8005f06:	f000 8593 	beq.w	8006a30 <_dtoa_r+0xbb8>
 8005f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f0c:	b963      	cbnz	r3, 8005f28 <_dtoa_r+0xb0>
 8005f0e:	4b97      	ldr	r3, [pc, #604]	; (800616c <_dtoa_r+0x2f4>)
 8005f10:	e027      	b.n	8005f62 <_dtoa_r+0xea>
 8005f12:	4b97      	ldr	r3, [pc, #604]	; (8006170 <_dtoa_r+0x2f8>)
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	9800      	ldr	r0, [sp, #0]
 8005f1e:	b013      	add	sp, #76	; 0x4c
 8005f20:	ecbd 8b04 	vpop	{d8-d9}
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f28:	4b90      	ldr	r3, [pc, #576]	; (800616c <_dtoa_r+0x2f4>)
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	3303      	adds	r3, #3
 8005f2e:	e7f3      	b.n	8005f18 <_dtoa_r+0xa0>
 8005f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	ec51 0b17 	vmov	r0, r1, d7
 8005f3a:	eeb0 8a47 	vmov.f32	s16, s14
 8005f3e:	eef0 8a67 	vmov.f32	s17, s15
 8005f42:	2300      	movs	r3, #0
 8005f44:	f7fa fde0 	bl	8000b08 <__aeabi_dcmpeq>
 8005f48:	4681      	mov	r9, r0
 8005f4a:	b160      	cbz	r0, 8005f66 <_dtoa_r+0xee>
 8005f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f4e:	2301      	movs	r3, #1
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8568 	beq.w	8006a2a <_dtoa_r+0xbb2>
 8005f5a:	4b86      	ldr	r3, [pc, #536]	; (8006174 <_dtoa_r+0x2fc>)
 8005f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	e7da      	b.n	8005f1c <_dtoa_r+0xa4>
 8005f66:	aa10      	add	r2, sp, #64	; 0x40
 8005f68:	a911      	add	r1, sp, #68	; 0x44
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f70:	eef0 0a68 	vmov.f32	s1, s17
 8005f74:	f001 f994 	bl	80072a0 <__d2b>
 8005f78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	d07f      	beq.n	8006082 <_dtoa_r+0x20a>
 8005f82:	ee18 3a90 	vmov	r3, s17
 8005f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005f8e:	ec51 0b18 	vmov	r0, r1, d8
 8005f92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4b75      	ldr	r3, [pc, #468]	; (8006178 <_dtoa_r+0x300>)
 8005fa4:	f7fa f990 	bl	80002c8 <__aeabi_dsub>
 8005fa8:	a367      	add	r3, pc, #412	; (adr r3, 8006148 <_dtoa_r+0x2d0>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa fb43 	bl	8000638 <__aeabi_dmul>
 8005fb2:	a367      	add	r3, pc, #412	; (adr r3, 8006150 <_dtoa_r+0x2d8>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa f988 	bl	80002cc <__adddf3>
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	f7fa facf 	bl	8000564 <__aeabi_i2d>
 8005fc6:	a364      	add	r3, pc, #400	; (adr r3, 8006158 <_dtoa_r+0x2e0>)
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f7fa fb34 	bl	8000638 <__aeabi_dmul>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	f7fa f978 	bl	80002cc <__adddf3>
 8005fdc:	4606      	mov	r6, r0
 8005fde:	460f      	mov	r7, r1
 8005fe0:	f7fa fdda 	bl	8000b98 <__aeabi_d2iz>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4683      	mov	fp, r0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fd95 	bl	8000b1c <__aeabi_dcmplt>
 8005ff2:	b148      	cbz	r0, 8006008 <_dtoa_r+0x190>
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f7fa fab5 	bl	8000564 <__aeabi_i2d>
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f7fa fd83 	bl	8000b08 <__aeabi_dcmpeq>
 8006002:	b908      	cbnz	r0, 8006008 <_dtoa_r+0x190>
 8006004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006008:	f1bb 0f16 	cmp.w	fp, #22
 800600c:	d857      	bhi.n	80060be <_dtoa_r+0x246>
 800600e:	4b5b      	ldr	r3, [pc, #364]	; (800617c <_dtoa_r+0x304>)
 8006010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	ec51 0b18 	vmov	r0, r1, d8
 800601c:	f7fa fd7e 	bl	8000b1c <__aeabi_dcmplt>
 8006020:	2800      	cmp	r0, #0
 8006022:	d04e      	beq.n	80060c2 <_dtoa_r+0x24a>
 8006024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006028:	2300      	movs	r3, #0
 800602a:	930c      	str	r3, [sp, #48]	; 0x30
 800602c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800602e:	1b5b      	subs	r3, r3, r5
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	bf45      	ittet	mi
 8006034:	f1c3 0301 	rsbmi	r3, r3, #1
 8006038:	9305      	strmi	r3, [sp, #20]
 800603a:	2300      	movpl	r3, #0
 800603c:	2300      	movmi	r3, #0
 800603e:	9206      	str	r2, [sp, #24]
 8006040:	bf54      	ite	pl
 8006042:	9305      	strpl	r3, [sp, #20]
 8006044:	9306      	strmi	r3, [sp, #24]
 8006046:	f1bb 0f00 	cmp.w	fp, #0
 800604a:	db3c      	blt.n	80060c6 <_dtoa_r+0x24e>
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006052:	445b      	add	r3, fp
 8006054:	9306      	str	r3, [sp, #24]
 8006056:	2300      	movs	r3, #0
 8006058:	9308      	str	r3, [sp, #32]
 800605a:	9b07      	ldr	r3, [sp, #28]
 800605c:	2b09      	cmp	r3, #9
 800605e:	d868      	bhi.n	8006132 <_dtoa_r+0x2ba>
 8006060:	2b05      	cmp	r3, #5
 8006062:	bfc4      	itt	gt
 8006064:	3b04      	subgt	r3, #4
 8006066:	9307      	strgt	r3, [sp, #28]
 8006068:	9b07      	ldr	r3, [sp, #28]
 800606a:	f1a3 0302 	sub.w	r3, r3, #2
 800606e:	bfcc      	ite	gt
 8006070:	2500      	movgt	r5, #0
 8006072:	2501      	movle	r5, #1
 8006074:	2b03      	cmp	r3, #3
 8006076:	f200 8085 	bhi.w	8006184 <_dtoa_r+0x30c>
 800607a:	e8df f003 	tbb	[pc, r3]
 800607e:	3b2e      	.short	0x3b2e
 8006080:	5839      	.short	0x5839
 8006082:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006086:	441d      	add	r5, r3
 8006088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800608c:	2b20      	cmp	r3, #32
 800608e:	bfc1      	itttt	gt
 8006090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006094:	fa08 f803 	lslgt.w	r8, r8, r3
 8006098:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800609c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80060a0:	bfd6      	itet	le
 80060a2:	f1c3 0320 	rsble	r3, r3, #32
 80060a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80060aa:	fa06 f003 	lslle.w	r0, r6, r3
 80060ae:	f7fa fa49 	bl	8000544 <__aeabi_ui2d>
 80060b2:	2201      	movs	r2, #1
 80060b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80060b8:	3d01      	subs	r5, #1
 80060ba:	920e      	str	r2, [sp, #56]	; 0x38
 80060bc:	e76f      	b.n	8005f9e <_dtoa_r+0x126>
 80060be:	2301      	movs	r3, #1
 80060c0:	e7b3      	b.n	800602a <_dtoa_r+0x1b2>
 80060c2:	900c      	str	r0, [sp, #48]	; 0x30
 80060c4:	e7b2      	b.n	800602c <_dtoa_r+0x1b4>
 80060c6:	9b05      	ldr	r3, [sp, #20]
 80060c8:	eba3 030b 	sub.w	r3, r3, fp
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	f1cb 0300 	rsb	r3, fp, #0
 80060d2:	9308      	str	r3, [sp, #32]
 80060d4:	2300      	movs	r3, #0
 80060d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d8:	e7bf      	b.n	800605a <_dtoa_r+0x1e2>
 80060da:	2300      	movs	r3, #0
 80060dc:	9309      	str	r3, [sp, #36]	; 0x24
 80060de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc52      	bgt.n	800618a <_dtoa_r+0x312>
 80060e4:	2301      	movs	r3, #1
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	461a      	mov	r2, r3
 80060ec:	920a      	str	r2, [sp, #40]	; 0x28
 80060ee:	e00b      	b.n	8006108 <_dtoa_r+0x290>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e7f3      	b.n	80060dc <_dtoa_r+0x264>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fa:	445b      	add	r3, fp
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	bfb8      	it	lt
 8006106:	2301      	movlt	r3, #1
 8006108:	69e0      	ldr	r0, [r4, #28]
 800610a:	2100      	movs	r1, #0
 800610c:	2204      	movs	r2, #4
 800610e:	f102 0614 	add.w	r6, r2, #20
 8006112:	429e      	cmp	r6, r3
 8006114:	d93d      	bls.n	8006192 <_dtoa_r+0x31a>
 8006116:	6041      	str	r1, [r0, #4]
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fd9f 	bl	8006c5c <_Balloc>
 800611e:	9000      	str	r0, [sp, #0]
 8006120:	2800      	cmp	r0, #0
 8006122:	d139      	bne.n	8006198 <_dtoa_r+0x320>
 8006124:	4b16      	ldr	r3, [pc, #88]	; (8006180 <_dtoa_r+0x308>)
 8006126:	4602      	mov	r2, r0
 8006128:	f240 11af 	movw	r1, #431	; 0x1af
 800612c:	e6bd      	b.n	8005eaa <_dtoa_r+0x32>
 800612e:	2301      	movs	r3, #1
 8006130:	e7e1      	b.n	80060f6 <_dtoa_r+0x27e>
 8006132:	2501      	movs	r5, #1
 8006134:	2300      	movs	r3, #0
 8006136:	9307      	str	r3, [sp, #28]
 8006138:	9509      	str	r5, [sp, #36]	; 0x24
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	2200      	movs	r2, #0
 8006144:	2312      	movs	r3, #18
 8006146:	e7d1      	b.n	80060ec <_dtoa_r+0x274>
 8006148:	636f4361 	.word	0x636f4361
 800614c:	3fd287a7 	.word	0x3fd287a7
 8006150:	8b60c8b3 	.word	0x8b60c8b3
 8006154:	3fc68a28 	.word	0x3fc68a28
 8006158:	509f79fb 	.word	0x509f79fb
 800615c:	3fd34413 	.word	0x3fd34413
 8006160:	0800821d 	.word	0x0800821d
 8006164:	08008234 	.word	0x08008234
 8006168:	7ff00000 	.word	0x7ff00000
 800616c:	08008219 	.word	0x08008219
 8006170:	08008210 	.word	0x08008210
 8006174:	080081ed 	.word	0x080081ed
 8006178:	3ff80000 	.word	0x3ff80000
 800617c:	08008320 	.word	0x08008320
 8006180:	0800828c 	.word	0x0800828c
 8006184:	2301      	movs	r3, #1
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	e7d7      	b.n	800613a <_dtoa_r+0x2c2>
 800618a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	e7ba      	b.n	8006108 <_dtoa_r+0x290>
 8006192:	3101      	adds	r1, #1
 8006194:	0052      	lsls	r2, r2, #1
 8006196:	e7ba      	b.n	800610e <_dtoa_r+0x296>
 8006198:	69e3      	ldr	r3, [r4, #28]
 800619a:	9a00      	ldr	r2, [sp, #0]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	2b0e      	cmp	r3, #14
 80061a2:	f200 80a8 	bhi.w	80062f6 <_dtoa_r+0x47e>
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	f000 80a5 	beq.w	80062f6 <_dtoa_r+0x47e>
 80061ac:	f1bb 0f00 	cmp.w	fp, #0
 80061b0:	dd38      	ble.n	8006224 <_dtoa_r+0x3ac>
 80061b2:	4bc0      	ldr	r3, [pc, #768]	; (80064b4 <_dtoa_r+0x63c>)
 80061b4:	f00b 020f 	and.w	r2, fp, #15
 80061b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80061c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80061c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80061c8:	d019      	beq.n	80061fe <_dtoa_r+0x386>
 80061ca:	4bbb      	ldr	r3, [pc, #748]	; (80064b8 <_dtoa_r+0x640>)
 80061cc:	ec51 0b18 	vmov	r0, r1, d8
 80061d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061d4:	f7fa fb5a 	bl	800088c <__aeabi_ddiv>
 80061d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061dc:	f008 080f 	and.w	r8, r8, #15
 80061e0:	2503      	movs	r5, #3
 80061e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80064b8 <_dtoa_r+0x640>
 80061e6:	f1b8 0f00 	cmp.w	r8, #0
 80061ea:	d10a      	bne.n	8006202 <_dtoa_r+0x38a>
 80061ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f0:	4632      	mov	r2, r6
 80061f2:	463b      	mov	r3, r7
 80061f4:	f7fa fb4a 	bl	800088c <__aeabi_ddiv>
 80061f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061fc:	e02b      	b.n	8006256 <_dtoa_r+0x3de>
 80061fe:	2502      	movs	r5, #2
 8006200:	e7ef      	b.n	80061e2 <_dtoa_r+0x36a>
 8006202:	f018 0f01 	tst.w	r8, #1
 8006206:	d008      	beq.n	800621a <_dtoa_r+0x3a2>
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006210:	f7fa fa12 	bl	8000638 <__aeabi_dmul>
 8006214:	3501      	adds	r5, #1
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800621e:	f109 0908 	add.w	r9, r9, #8
 8006222:	e7e0      	b.n	80061e6 <_dtoa_r+0x36e>
 8006224:	f000 809f 	beq.w	8006366 <_dtoa_r+0x4ee>
 8006228:	f1cb 0600 	rsb	r6, fp, #0
 800622c:	4ba1      	ldr	r3, [pc, #644]	; (80064b4 <_dtoa_r+0x63c>)
 800622e:	4fa2      	ldr	r7, [pc, #648]	; (80064b8 <_dtoa_r+0x640>)
 8006230:	f006 020f 	and.w	r2, r6, #15
 8006234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	ec51 0b18 	vmov	r0, r1, d8
 8006240:	f7fa f9fa 	bl	8000638 <__aeabi_dmul>
 8006244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006248:	1136      	asrs	r6, r6, #4
 800624a:	2300      	movs	r3, #0
 800624c:	2502      	movs	r5, #2
 800624e:	2e00      	cmp	r6, #0
 8006250:	d17e      	bne.n	8006350 <_dtoa_r+0x4d8>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1d0      	bne.n	80061f8 <_dtoa_r+0x380>
 8006256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006258:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8084 	beq.w	800636a <_dtoa_r+0x4f2>
 8006262:	4b96      	ldr	r3, [pc, #600]	; (80064bc <_dtoa_r+0x644>)
 8006264:	2200      	movs	r2, #0
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f7fa fc57 	bl	8000b1c <__aeabi_dcmplt>
 800626e:	2800      	cmp	r0, #0
 8006270:	d07b      	beq.n	800636a <_dtoa_r+0x4f2>
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d078      	beq.n	800636a <_dtoa_r+0x4f2>
 8006278:	9b01      	ldr	r3, [sp, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd39      	ble.n	80062f2 <_dtoa_r+0x47a>
 800627e:	4b90      	ldr	r3, [pc, #576]	; (80064c0 <_dtoa_r+0x648>)
 8006280:	2200      	movs	r2, #0
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7fa f9d7 	bl	8000638 <__aeabi_dmul>
 800628a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628e:	9e01      	ldr	r6, [sp, #4]
 8006290:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006294:	3501      	adds	r5, #1
 8006296:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800629a:	4628      	mov	r0, r5
 800629c:	f7fa f962 	bl	8000564 <__aeabi_i2d>
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	f7fa f9c8 	bl	8000638 <__aeabi_dmul>
 80062a8:	4b86      	ldr	r3, [pc, #536]	; (80064c4 <_dtoa_r+0x64c>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f7fa f80e 	bl	80002cc <__adddf3>
 80062b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	9303      	str	r3, [sp, #12]
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	d158      	bne.n	8006370 <_dtoa_r+0x4f8>
 80062be:	4b82      	ldr	r3, [pc, #520]	; (80064c8 <_dtoa_r+0x650>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7f9 ffff 	bl	80002c8 <__aeabi_dsub>
 80062ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ce:	4680      	mov	r8, r0
 80062d0:	4689      	mov	r9, r1
 80062d2:	f7fa fc41 	bl	8000b58 <__aeabi_dcmpgt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f040 8296 	bne.w	8006808 <_dtoa_r+0x990>
 80062dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80062e0:	4640      	mov	r0, r8
 80062e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7fa fc18 	bl	8000b1c <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f040 8289 	bne.w	8006804 <_dtoa_r+0x98c>
 80062f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80062f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f2c0 814e 	blt.w	800659a <_dtoa_r+0x722>
 80062fe:	f1bb 0f0e 	cmp.w	fp, #14
 8006302:	f300 814a 	bgt.w	800659a <_dtoa_r+0x722>
 8006306:	4b6b      	ldr	r3, [pc, #428]	; (80064b4 <_dtoa_r+0x63c>)
 8006308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800630c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	f280 80dc 	bge.w	80064d0 <_dtoa_r+0x658>
 8006318:	9b04      	ldr	r3, [sp, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f300 80d8 	bgt.w	80064d0 <_dtoa_r+0x658>
 8006320:	f040 826f 	bne.w	8006802 <_dtoa_r+0x98a>
 8006324:	4b68      	ldr	r3, [pc, #416]	; (80064c8 <_dtoa_r+0x650>)
 8006326:	2200      	movs	r2, #0
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa f984 	bl	8000638 <__aeabi_dmul>
 8006330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006334:	f7fa fc06 	bl	8000b44 <__aeabi_dcmpge>
 8006338:	9e04      	ldr	r6, [sp, #16]
 800633a:	4637      	mov	r7, r6
 800633c:	2800      	cmp	r0, #0
 800633e:	f040 8245 	bne.w	80067cc <_dtoa_r+0x954>
 8006342:	9d00      	ldr	r5, [sp, #0]
 8006344:	2331      	movs	r3, #49	; 0x31
 8006346:	f805 3b01 	strb.w	r3, [r5], #1
 800634a:	f10b 0b01 	add.w	fp, fp, #1
 800634e:	e241      	b.n	80067d4 <_dtoa_r+0x95c>
 8006350:	07f2      	lsls	r2, r6, #31
 8006352:	d505      	bpl.n	8006360 <_dtoa_r+0x4e8>
 8006354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006358:	f7fa f96e 	bl	8000638 <__aeabi_dmul>
 800635c:	3501      	adds	r5, #1
 800635e:	2301      	movs	r3, #1
 8006360:	1076      	asrs	r6, r6, #1
 8006362:	3708      	adds	r7, #8
 8006364:	e773      	b.n	800624e <_dtoa_r+0x3d6>
 8006366:	2502      	movs	r5, #2
 8006368:	e775      	b.n	8006256 <_dtoa_r+0x3de>
 800636a:	9e04      	ldr	r6, [sp, #16]
 800636c:	465f      	mov	r7, fp
 800636e:	e792      	b.n	8006296 <_dtoa_r+0x41e>
 8006370:	9900      	ldr	r1, [sp, #0]
 8006372:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <_dtoa_r+0x63c>)
 8006374:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006378:	4431      	add	r1, r6
 800637a:	9102      	str	r1, [sp, #8]
 800637c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800637e:	eeb0 9a47 	vmov.f32	s18, s14
 8006382:	eef0 9a67 	vmov.f32	s19, s15
 8006386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800638a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800638e:	2900      	cmp	r1, #0
 8006390:	d044      	beq.n	800641c <_dtoa_r+0x5a4>
 8006392:	494e      	ldr	r1, [pc, #312]	; (80064cc <_dtoa_r+0x654>)
 8006394:	2000      	movs	r0, #0
 8006396:	f7fa fa79 	bl	800088c <__aeabi_ddiv>
 800639a:	ec53 2b19 	vmov	r2, r3, d9
 800639e:	f7f9 ff93 	bl	80002c8 <__aeabi_dsub>
 80063a2:	9d00      	ldr	r5, [sp, #0]
 80063a4:	ec41 0b19 	vmov	d9, r0, r1
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7fa fbf4 	bl	8000b98 <__aeabi_d2iz>
 80063b0:	4606      	mov	r6, r0
 80063b2:	f7fa f8d7 	bl	8000564 <__aeabi_i2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7f9 ff83 	bl	80002c8 <__aeabi_dsub>
 80063c2:	3630      	adds	r6, #48	; 0x30
 80063c4:	f805 6b01 	strb.w	r6, [r5], #1
 80063c8:	ec53 2b19 	vmov	r2, r3, d9
 80063cc:	4680      	mov	r8, r0
 80063ce:	4689      	mov	r9, r1
 80063d0:	f7fa fba4 	bl	8000b1c <__aeabi_dcmplt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d164      	bne.n	80064a2 <_dtoa_r+0x62a>
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	4937      	ldr	r1, [pc, #220]	; (80064bc <_dtoa_r+0x644>)
 80063de:	2000      	movs	r0, #0
 80063e0:	f7f9 ff72 	bl	80002c8 <__aeabi_dsub>
 80063e4:	ec53 2b19 	vmov	r2, r3, d9
 80063e8:	f7fa fb98 	bl	8000b1c <__aeabi_dcmplt>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	f040 80b6 	bne.w	800655e <_dtoa_r+0x6e6>
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	429d      	cmp	r5, r3
 80063f6:	f43f af7c 	beq.w	80062f2 <_dtoa_r+0x47a>
 80063fa:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <_dtoa_r+0x648>)
 80063fc:	ec51 0b19 	vmov	r0, r1, d9
 8006400:	2200      	movs	r2, #0
 8006402:	f7fa f919 	bl	8000638 <__aeabi_dmul>
 8006406:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <_dtoa_r+0x648>)
 8006408:	ec41 0b19 	vmov	d9, r0, r1
 800640c:	2200      	movs	r2, #0
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa f911 	bl	8000638 <__aeabi_dmul>
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	e7c5      	b.n	80063a8 <_dtoa_r+0x530>
 800641c:	ec51 0b17 	vmov	r0, r1, d7
 8006420:	f7fa f90a 	bl	8000638 <__aeabi_dmul>
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	9d00      	ldr	r5, [sp, #0]
 8006428:	930f      	str	r3, [sp, #60]	; 0x3c
 800642a:	ec41 0b19 	vmov	d9, r0, r1
 800642e:	4649      	mov	r1, r9
 8006430:	4640      	mov	r0, r8
 8006432:	f7fa fbb1 	bl	8000b98 <__aeabi_d2iz>
 8006436:	4606      	mov	r6, r0
 8006438:	f7fa f894 	bl	8000564 <__aeabi_i2d>
 800643c:	3630      	adds	r6, #48	; 0x30
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7f9 ff3f 	bl	80002c8 <__aeabi_dsub>
 800644a:	f805 6b01 	strb.w	r6, [r5], #1
 800644e:	9b02      	ldr	r3, [sp, #8]
 8006450:	429d      	cmp	r5, r3
 8006452:	4680      	mov	r8, r0
 8006454:	4689      	mov	r9, r1
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	d124      	bne.n	80064a6 <_dtoa_r+0x62e>
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <_dtoa_r+0x654>)
 800645e:	ec51 0b19 	vmov	r0, r1, d9
 8006462:	f7f9 ff33 	bl	80002cc <__adddf3>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7fa fb73 	bl	8000b58 <__aeabi_dcmpgt>
 8006472:	2800      	cmp	r0, #0
 8006474:	d173      	bne.n	800655e <_dtoa_r+0x6e6>
 8006476:	ec53 2b19 	vmov	r2, r3, d9
 800647a:	4914      	ldr	r1, [pc, #80]	; (80064cc <_dtoa_r+0x654>)
 800647c:	2000      	movs	r0, #0
 800647e:	f7f9 ff23 	bl	80002c8 <__aeabi_dsub>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4640      	mov	r0, r8
 8006488:	4649      	mov	r1, r9
 800648a:	f7fa fb47 	bl	8000b1c <__aeabi_dcmplt>
 800648e:	2800      	cmp	r0, #0
 8006490:	f43f af2f 	beq.w	80062f2 <_dtoa_r+0x47a>
 8006494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006496:	1e6b      	subs	r3, r5, #1
 8006498:	930f      	str	r3, [sp, #60]	; 0x3c
 800649a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800649e:	2b30      	cmp	r3, #48	; 0x30
 80064a0:	d0f8      	beq.n	8006494 <_dtoa_r+0x61c>
 80064a2:	46bb      	mov	fp, r7
 80064a4:	e04a      	b.n	800653c <_dtoa_r+0x6c4>
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <_dtoa_r+0x648>)
 80064a8:	f7fa f8c6 	bl	8000638 <__aeabi_dmul>
 80064ac:	4680      	mov	r8, r0
 80064ae:	4689      	mov	r9, r1
 80064b0:	e7bd      	b.n	800642e <_dtoa_r+0x5b6>
 80064b2:	bf00      	nop
 80064b4:	08008320 	.word	0x08008320
 80064b8:	080082f8 	.word	0x080082f8
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	40240000 	.word	0x40240000
 80064c4:	401c0000 	.word	0x401c0000
 80064c8:	40140000 	.word	0x40140000
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064d4:	9d00      	ldr	r5, [sp, #0]
 80064d6:	4642      	mov	r2, r8
 80064d8:	464b      	mov	r3, r9
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7fa f9d5 	bl	800088c <__aeabi_ddiv>
 80064e2:	f7fa fb59 	bl	8000b98 <__aeabi_d2iz>
 80064e6:	9001      	str	r0, [sp, #4]
 80064e8:	f7fa f83c 	bl	8000564 <__aeabi_i2d>
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	f7fa f8a2 	bl	8000638 <__aeabi_dmul>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4630      	mov	r0, r6
 80064fa:	4639      	mov	r1, r7
 80064fc:	f7f9 fee4 	bl	80002c8 <__aeabi_dsub>
 8006500:	9e01      	ldr	r6, [sp, #4]
 8006502:	9f04      	ldr	r7, [sp, #16]
 8006504:	3630      	adds	r6, #48	; 0x30
 8006506:	f805 6b01 	strb.w	r6, [r5], #1
 800650a:	9e00      	ldr	r6, [sp, #0]
 800650c:	1bae      	subs	r6, r5, r6
 800650e:	42b7      	cmp	r7, r6
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	d134      	bne.n	8006580 <_dtoa_r+0x708>
 8006516:	f7f9 fed9 	bl	80002cc <__adddf3>
 800651a:	4642      	mov	r2, r8
 800651c:	464b      	mov	r3, r9
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	f7fa fb19 	bl	8000b58 <__aeabi_dcmpgt>
 8006526:	b9c8      	cbnz	r0, 800655c <_dtoa_r+0x6e4>
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	4630      	mov	r0, r6
 800652e:	4639      	mov	r1, r7
 8006530:	f7fa faea 	bl	8000b08 <__aeabi_dcmpeq>
 8006534:	b110      	cbz	r0, 800653c <_dtoa_r+0x6c4>
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	07db      	lsls	r3, r3, #31
 800653a:	d40f      	bmi.n	800655c <_dtoa_r+0x6e4>
 800653c:	4651      	mov	r1, sl
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fbcc 	bl	8006cdc <_Bfree>
 8006544:	2300      	movs	r3, #0
 8006546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006548:	702b      	strb	r3, [r5, #0]
 800654a:	f10b 0301 	add.w	r3, fp, #1
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006552:	2b00      	cmp	r3, #0
 8006554:	f43f ace2 	beq.w	8005f1c <_dtoa_r+0xa4>
 8006558:	601d      	str	r5, [r3, #0]
 800655a:	e4df      	b.n	8005f1c <_dtoa_r+0xa4>
 800655c:	465f      	mov	r7, fp
 800655e:	462b      	mov	r3, r5
 8006560:	461d      	mov	r5, r3
 8006562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006566:	2a39      	cmp	r2, #57	; 0x39
 8006568:	d106      	bne.n	8006578 <_dtoa_r+0x700>
 800656a:	9a00      	ldr	r2, [sp, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d1f7      	bne.n	8006560 <_dtoa_r+0x6e8>
 8006570:	9900      	ldr	r1, [sp, #0]
 8006572:	2230      	movs	r2, #48	; 0x30
 8006574:	3701      	adds	r7, #1
 8006576:	700a      	strb	r2, [r1, #0]
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	3201      	adds	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e790      	b.n	80064a2 <_dtoa_r+0x62a>
 8006580:	4ba3      	ldr	r3, [pc, #652]	; (8006810 <_dtoa_r+0x998>)
 8006582:	2200      	movs	r2, #0
 8006584:	f7fa f858 	bl	8000638 <__aeabi_dmul>
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	4606      	mov	r6, r0
 800658e:	460f      	mov	r7, r1
 8006590:	f7fa faba 	bl	8000b08 <__aeabi_dcmpeq>
 8006594:	2800      	cmp	r0, #0
 8006596:	d09e      	beq.n	80064d6 <_dtoa_r+0x65e>
 8006598:	e7d0      	b.n	800653c <_dtoa_r+0x6c4>
 800659a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800659c:	2a00      	cmp	r2, #0
 800659e:	f000 80ca 	beq.w	8006736 <_dtoa_r+0x8be>
 80065a2:	9a07      	ldr	r2, [sp, #28]
 80065a4:	2a01      	cmp	r2, #1
 80065a6:	f300 80ad 	bgt.w	8006704 <_dtoa_r+0x88c>
 80065aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	f000 80a5 	beq.w	80066fc <_dtoa_r+0x884>
 80065b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065b6:	9e08      	ldr	r6, [sp, #32]
 80065b8:	9d05      	ldr	r5, [sp, #20]
 80065ba:	9a05      	ldr	r2, [sp, #20]
 80065bc:	441a      	add	r2, r3
 80065be:	9205      	str	r2, [sp, #20]
 80065c0:	9a06      	ldr	r2, [sp, #24]
 80065c2:	2101      	movs	r1, #1
 80065c4:	441a      	add	r2, r3
 80065c6:	4620      	mov	r0, r4
 80065c8:	9206      	str	r2, [sp, #24]
 80065ca:	f000 fc3d 	bl	8006e48 <__i2b>
 80065ce:	4607      	mov	r7, r0
 80065d0:	b165      	cbz	r5, 80065ec <_dtoa_r+0x774>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd09      	ble.n	80065ec <_dtoa_r+0x774>
 80065d8:	42ab      	cmp	r3, r5
 80065da:	9a05      	ldr	r2, [sp, #20]
 80065dc:	bfa8      	it	ge
 80065de:	462b      	movge	r3, r5
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	9205      	str	r2, [sp, #20]
 80065e4:	9a06      	ldr	r2, [sp, #24]
 80065e6:	1aed      	subs	r5, r5, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	b1f3      	cbz	r3, 800662e <_dtoa_r+0x7b6>
 80065f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80a3 	beq.w	800673e <_dtoa_r+0x8c6>
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	dd10      	ble.n	800661e <_dtoa_r+0x7a6>
 80065fc:	4639      	mov	r1, r7
 80065fe:	4632      	mov	r2, r6
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fce1 	bl	8006fc8 <__pow5mult>
 8006606:	4652      	mov	r2, sl
 8006608:	4601      	mov	r1, r0
 800660a:	4607      	mov	r7, r0
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fc31 	bl	8006e74 <__multiply>
 8006612:	4651      	mov	r1, sl
 8006614:	4680      	mov	r8, r0
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fb60 	bl	8006cdc <_Bfree>
 800661c:	46c2      	mov	sl, r8
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	1b9a      	subs	r2, r3, r6
 8006622:	d004      	beq.n	800662e <_dtoa_r+0x7b6>
 8006624:	4651      	mov	r1, sl
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fcce 	bl	8006fc8 <__pow5mult>
 800662c:	4682      	mov	sl, r0
 800662e:	2101      	movs	r1, #1
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fc09 	bl	8006e48 <__i2b>
 8006636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	4606      	mov	r6, r0
 800663c:	f340 8081 	ble.w	8006742 <_dtoa_r+0x8ca>
 8006640:	461a      	mov	r2, r3
 8006642:	4601      	mov	r1, r0
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fcbf 	bl	8006fc8 <__pow5mult>
 800664a:	9b07      	ldr	r3, [sp, #28]
 800664c:	2b01      	cmp	r3, #1
 800664e:	4606      	mov	r6, r0
 8006650:	dd7a      	ble.n	8006748 <_dtoa_r+0x8d0>
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	6933      	ldr	r3, [r6, #16]
 8006658:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800665c:	6918      	ldr	r0, [r3, #16]
 800665e:	f000 fba5 	bl	8006dac <__hi0bits>
 8006662:	f1c0 0020 	rsb	r0, r0, #32
 8006666:	9b06      	ldr	r3, [sp, #24]
 8006668:	4418      	add	r0, r3
 800666a:	f010 001f 	ands.w	r0, r0, #31
 800666e:	f000 8094 	beq.w	800679a <_dtoa_r+0x922>
 8006672:	f1c0 0320 	rsb	r3, r0, #32
 8006676:	2b04      	cmp	r3, #4
 8006678:	f340 8085 	ble.w	8006786 <_dtoa_r+0x90e>
 800667c:	9b05      	ldr	r3, [sp, #20]
 800667e:	f1c0 001c 	rsb	r0, r0, #28
 8006682:	4403      	add	r3, r0
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	9b06      	ldr	r3, [sp, #24]
 8006688:	4403      	add	r3, r0
 800668a:	4405      	add	r5, r0
 800668c:	9306      	str	r3, [sp, #24]
 800668e:	9b05      	ldr	r3, [sp, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	dd05      	ble.n	80066a0 <_dtoa_r+0x828>
 8006694:	4651      	mov	r1, sl
 8006696:	461a      	mov	r2, r3
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fcef 	bl	800707c <__lshift>
 800669e:	4682      	mov	sl, r0
 80066a0:	9b06      	ldr	r3, [sp, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dd05      	ble.n	80066b2 <_dtoa_r+0x83a>
 80066a6:	4631      	mov	r1, r6
 80066a8:	461a      	mov	r2, r3
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fce6 	bl	800707c <__lshift>
 80066b0:	4606      	mov	r6, r0
 80066b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d072      	beq.n	800679e <_dtoa_r+0x926>
 80066b8:	4631      	mov	r1, r6
 80066ba:	4650      	mov	r0, sl
 80066bc:	f000 fd4a 	bl	8007154 <__mcmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	da6c      	bge.n	800679e <_dtoa_r+0x926>
 80066c4:	2300      	movs	r3, #0
 80066c6:	4651      	mov	r1, sl
 80066c8:	220a      	movs	r2, #10
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb28 	bl	8006d20 <__multadd>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066d6:	4682      	mov	sl, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 81b0 	beq.w	8006a3e <_dtoa_r+0xbc6>
 80066de:	2300      	movs	r3, #0
 80066e0:	4639      	mov	r1, r7
 80066e2:	220a      	movs	r2, #10
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fb1b 	bl	8006d20 <__multadd>
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4607      	mov	r7, r0
 80066f0:	f300 8096 	bgt.w	8006820 <_dtoa_r+0x9a8>
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	dc59      	bgt.n	80067ae <_dtoa_r+0x936>
 80066fa:	e091      	b.n	8006820 <_dtoa_r+0x9a8>
 80066fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006702:	e758      	b.n	80065b6 <_dtoa_r+0x73e>
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	1e5e      	subs	r6, r3, #1
 8006708:	9b08      	ldr	r3, [sp, #32]
 800670a:	42b3      	cmp	r3, r6
 800670c:	bfbf      	itttt	lt
 800670e:	9b08      	ldrlt	r3, [sp, #32]
 8006710:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006712:	9608      	strlt	r6, [sp, #32]
 8006714:	1af3      	sublt	r3, r6, r3
 8006716:	bfb4      	ite	lt
 8006718:	18d2      	addlt	r2, r2, r3
 800671a:	1b9e      	subge	r6, r3, r6
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	bfbc      	itt	lt
 8006720:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006722:	2600      	movlt	r6, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	bfb7      	itett	lt
 8006728:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800672c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006730:	1a9d      	sublt	r5, r3, r2
 8006732:	2300      	movlt	r3, #0
 8006734:	e741      	b.n	80065ba <_dtoa_r+0x742>
 8006736:	9e08      	ldr	r6, [sp, #32]
 8006738:	9d05      	ldr	r5, [sp, #20]
 800673a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800673c:	e748      	b.n	80065d0 <_dtoa_r+0x758>
 800673e:	9a08      	ldr	r2, [sp, #32]
 8006740:	e770      	b.n	8006624 <_dtoa_r+0x7ac>
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	2b01      	cmp	r3, #1
 8006746:	dc19      	bgt.n	800677c <_dtoa_r+0x904>
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	b9bb      	cbnz	r3, 800677c <_dtoa_r+0x904>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006752:	b99b      	cbnz	r3, 800677c <_dtoa_r+0x904>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800675a:	0d1b      	lsrs	r3, r3, #20
 800675c:	051b      	lsls	r3, r3, #20
 800675e:	b183      	cbz	r3, 8006782 <_dtoa_r+0x90a>
 8006760:	9b05      	ldr	r3, [sp, #20]
 8006762:	3301      	adds	r3, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	9b06      	ldr	r3, [sp, #24]
 8006768:	3301      	adds	r3, #1
 800676a:	9306      	str	r3, [sp, #24]
 800676c:	f04f 0801 	mov.w	r8, #1
 8006770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	f47f af6f 	bne.w	8006656 <_dtoa_r+0x7de>
 8006778:	2001      	movs	r0, #1
 800677a:	e774      	b.n	8006666 <_dtoa_r+0x7ee>
 800677c:	f04f 0800 	mov.w	r8, #0
 8006780:	e7f6      	b.n	8006770 <_dtoa_r+0x8f8>
 8006782:	4698      	mov	r8, r3
 8006784:	e7f4      	b.n	8006770 <_dtoa_r+0x8f8>
 8006786:	d082      	beq.n	800668e <_dtoa_r+0x816>
 8006788:	9a05      	ldr	r2, [sp, #20]
 800678a:	331c      	adds	r3, #28
 800678c:	441a      	add	r2, r3
 800678e:	9205      	str	r2, [sp, #20]
 8006790:	9a06      	ldr	r2, [sp, #24]
 8006792:	441a      	add	r2, r3
 8006794:	441d      	add	r5, r3
 8006796:	9206      	str	r2, [sp, #24]
 8006798:	e779      	b.n	800668e <_dtoa_r+0x816>
 800679a:	4603      	mov	r3, r0
 800679c:	e7f4      	b.n	8006788 <_dtoa_r+0x910>
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc37      	bgt.n	8006814 <_dtoa_r+0x99c>
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dd34      	ble.n	8006814 <_dtoa_r+0x99c>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	b963      	cbnz	r3, 80067cc <_dtoa_r+0x954>
 80067b2:	4631      	mov	r1, r6
 80067b4:	2205      	movs	r2, #5
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 fab2 	bl	8006d20 <__multadd>
 80067bc:	4601      	mov	r1, r0
 80067be:	4606      	mov	r6, r0
 80067c0:	4650      	mov	r0, sl
 80067c2:	f000 fcc7 	bl	8007154 <__mcmp>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f73f adbb 	bgt.w	8006342 <_dtoa_r+0x4ca>
 80067cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ce:	9d00      	ldr	r5, [sp, #0]
 80067d0:	ea6f 0b03 	mvn.w	fp, r3
 80067d4:	f04f 0800 	mov.w	r8, #0
 80067d8:	4631      	mov	r1, r6
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fa7e 	bl	8006cdc <_Bfree>
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	f43f aeab 	beq.w	800653c <_dtoa_r+0x6c4>
 80067e6:	f1b8 0f00 	cmp.w	r8, #0
 80067ea:	d005      	beq.n	80067f8 <_dtoa_r+0x980>
 80067ec:	45b8      	cmp	r8, r7
 80067ee:	d003      	beq.n	80067f8 <_dtoa_r+0x980>
 80067f0:	4641      	mov	r1, r8
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fa72 	bl	8006cdc <_Bfree>
 80067f8:	4639      	mov	r1, r7
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fa6e 	bl	8006cdc <_Bfree>
 8006800:	e69c      	b.n	800653c <_dtoa_r+0x6c4>
 8006802:	2600      	movs	r6, #0
 8006804:	4637      	mov	r7, r6
 8006806:	e7e1      	b.n	80067cc <_dtoa_r+0x954>
 8006808:	46bb      	mov	fp, r7
 800680a:	4637      	mov	r7, r6
 800680c:	e599      	b.n	8006342 <_dtoa_r+0x4ca>
 800680e:	bf00      	nop
 8006810:	40240000 	.word	0x40240000
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80c8 	beq.w	80069ac <_dtoa_r+0xb34>
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	2d00      	cmp	r5, #0
 8006822:	dd05      	ble.n	8006830 <_dtoa_r+0x9b8>
 8006824:	4639      	mov	r1, r7
 8006826:	462a      	mov	r2, r5
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fc27 	bl	800707c <__lshift>
 800682e:	4607      	mov	r7, r0
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d05b      	beq.n	80068ee <_dtoa_r+0xa76>
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fa0f 	bl	8006c5c <_Balloc>
 800683e:	4605      	mov	r5, r0
 8006840:	b928      	cbnz	r0, 800684e <_dtoa_r+0x9d6>
 8006842:	4b83      	ldr	r3, [pc, #524]	; (8006a50 <_dtoa_r+0xbd8>)
 8006844:	4602      	mov	r2, r0
 8006846:	f240 21ef 	movw	r1, #751	; 0x2ef
 800684a:	f7ff bb2e 	b.w	8005eaa <_dtoa_r+0x32>
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	3202      	adds	r2, #2
 8006852:	0092      	lsls	r2, r2, #2
 8006854:	f107 010c 	add.w	r1, r7, #12
 8006858:	300c      	adds	r0, #12
 800685a:	f001 fa09 	bl	8007c70 <memcpy>
 800685e:	2201      	movs	r2, #1
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fc0a 	bl	800707c <__lshift>
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006872:	4413      	add	r3, r2
 8006874:	9308      	str	r3, [sp, #32]
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	46b8      	mov	r8, r7
 800687e:	9306      	str	r3, [sp, #24]
 8006880:	4607      	mov	r7, r0
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	4631      	mov	r1, r6
 8006886:	3b01      	subs	r3, #1
 8006888:	4650      	mov	r0, sl
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	f7ff fa6b 	bl	8005d66 <quorem>
 8006890:	4641      	mov	r1, r8
 8006892:	9002      	str	r0, [sp, #8]
 8006894:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006898:	4650      	mov	r0, sl
 800689a:	f000 fc5b 	bl	8007154 <__mcmp>
 800689e:	463a      	mov	r2, r7
 80068a0:	9005      	str	r0, [sp, #20]
 80068a2:	4631      	mov	r1, r6
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fc71 	bl	800718c <__mdiff>
 80068aa:	68c2      	ldr	r2, [r0, #12]
 80068ac:	4605      	mov	r5, r0
 80068ae:	bb02      	cbnz	r2, 80068f2 <_dtoa_r+0xa7a>
 80068b0:	4601      	mov	r1, r0
 80068b2:	4650      	mov	r0, sl
 80068b4:	f000 fc4e 	bl	8007154 <__mcmp>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4629      	mov	r1, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	9209      	str	r2, [sp, #36]	; 0x24
 80068c0:	f000 fa0c 	bl	8006cdc <_Bfree>
 80068c4:	9b07      	ldr	r3, [sp, #28]
 80068c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c8:	9d04      	ldr	r5, [sp, #16]
 80068ca:	ea43 0102 	orr.w	r1, r3, r2
 80068ce:	9b06      	ldr	r3, [sp, #24]
 80068d0:	4319      	orrs	r1, r3
 80068d2:	d110      	bne.n	80068f6 <_dtoa_r+0xa7e>
 80068d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068d8:	d029      	beq.n	800692e <_dtoa_r+0xab6>
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dd02      	ble.n	80068e6 <_dtoa_r+0xa6e>
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	f883 9000 	strb.w	r9, [r3]
 80068ec:	e774      	b.n	80067d8 <_dtoa_r+0x960>
 80068ee:	4638      	mov	r0, r7
 80068f0:	e7ba      	b.n	8006868 <_dtoa_r+0x9f0>
 80068f2:	2201      	movs	r2, #1
 80068f4:	e7e1      	b.n	80068ba <_dtoa_r+0xa42>
 80068f6:	9b05      	ldr	r3, [sp, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db04      	blt.n	8006906 <_dtoa_r+0xa8e>
 80068fc:	9907      	ldr	r1, [sp, #28]
 80068fe:	430b      	orrs	r3, r1
 8006900:	9906      	ldr	r1, [sp, #24]
 8006902:	430b      	orrs	r3, r1
 8006904:	d120      	bne.n	8006948 <_dtoa_r+0xad0>
 8006906:	2a00      	cmp	r2, #0
 8006908:	dded      	ble.n	80068e6 <_dtoa_r+0xa6e>
 800690a:	4651      	mov	r1, sl
 800690c:	2201      	movs	r2, #1
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fbb4 	bl	800707c <__lshift>
 8006914:	4631      	mov	r1, r6
 8006916:	4682      	mov	sl, r0
 8006918:	f000 fc1c 	bl	8007154 <__mcmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	dc03      	bgt.n	8006928 <_dtoa_r+0xab0>
 8006920:	d1e1      	bne.n	80068e6 <_dtoa_r+0xa6e>
 8006922:	f019 0f01 	tst.w	r9, #1
 8006926:	d0de      	beq.n	80068e6 <_dtoa_r+0xa6e>
 8006928:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800692c:	d1d8      	bne.n	80068e0 <_dtoa_r+0xa68>
 800692e:	9a01      	ldr	r2, [sp, #4]
 8006930:	2339      	movs	r3, #57	; 0x39
 8006932:	7013      	strb	r3, [r2, #0]
 8006934:	462b      	mov	r3, r5
 8006936:	461d      	mov	r5, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800693e:	2a39      	cmp	r2, #57	; 0x39
 8006940:	d06c      	beq.n	8006a1c <_dtoa_r+0xba4>
 8006942:	3201      	adds	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	e747      	b.n	80067d8 <_dtoa_r+0x960>
 8006948:	2a00      	cmp	r2, #0
 800694a:	dd07      	ble.n	800695c <_dtoa_r+0xae4>
 800694c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006950:	d0ed      	beq.n	800692e <_dtoa_r+0xab6>
 8006952:	9a01      	ldr	r2, [sp, #4]
 8006954:	f109 0301 	add.w	r3, r9, #1
 8006958:	7013      	strb	r3, [r2, #0]
 800695a:	e73d      	b.n	80067d8 <_dtoa_r+0x960>
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	9a08      	ldr	r2, [sp, #32]
 8006960:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006964:	4293      	cmp	r3, r2
 8006966:	d043      	beq.n	80069f0 <_dtoa_r+0xb78>
 8006968:	4651      	mov	r1, sl
 800696a:	2300      	movs	r3, #0
 800696c:	220a      	movs	r2, #10
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f9d6 	bl	8006d20 <__multadd>
 8006974:	45b8      	cmp	r8, r7
 8006976:	4682      	mov	sl, r0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	f04f 020a 	mov.w	r2, #10
 8006980:	4641      	mov	r1, r8
 8006982:	4620      	mov	r0, r4
 8006984:	d107      	bne.n	8006996 <_dtoa_r+0xb1e>
 8006986:	f000 f9cb 	bl	8006d20 <__multadd>
 800698a:	4680      	mov	r8, r0
 800698c:	4607      	mov	r7, r0
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	3301      	adds	r3, #1
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	e775      	b.n	8006882 <_dtoa_r+0xa0a>
 8006996:	f000 f9c3 	bl	8006d20 <__multadd>
 800699a:	4639      	mov	r1, r7
 800699c:	4680      	mov	r8, r0
 800699e:	2300      	movs	r3, #0
 80069a0:	220a      	movs	r2, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 f9bc 	bl	8006d20 <__multadd>
 80069a8:	4607      	mov	r7, r0
 80069aa:	e7f0      	b.n	800698e <_dtoa_r+0xb16>
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	9d00      	ldr	r5, [sp, #0]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4650      	mov	r0, sl
 80069b6:	f7ff f9d6 	bl	8005d66 <quorem>
 80069ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	f805 9b01 	strb.w	r9, [r5], #1
 80069c4:	1aea      	subs	r2, r5, r3
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	dd07      	ble.n	80069dc <_dtoa_r+0xb64>
 80069cc:	4651      	mov	r1, sl
 80069ce:	2300      	movs	r3, #0
 80069d0:	220a      	movs	r2, #10
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 f9a4 	bl	8006d20 <__multadd>
 80069d8:	4682      	mov	sl, r0
 80069da:	e7ea      	b.n	80069b2 <_dtoa_r+0xb3a>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfc8      	it	gt
 80069e2:	461d      	movgt	r5, r3
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	bfd8      	it	le
 80069e8:	2501      	movle	r5, #1
 80069ea:	441d      	add	r5, r3
 80069ec:	f04f 0800 	mov.w	r8, #0
 80069f0:	4651      	mov	r1, sl
 80069f2:	2201      	movs	r2, #1
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fb41 	bl	800707c <__lshift>
 80069fa:	4631      	mov	r1, r6
 80069fc:	4682      	mov	sl, r0
 80069fe:	f000 fba9 	bl	8007154 <__mcmp>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	dc96      	bgt.n	8006934 <_dtoa_r+0xabc>
 8006a06:	d102      	bne.n	8006a0e <_dtoa_r+0xb96>
 8006a08:	f019 0f01 	tst.w	r9, #1
 8006a0c:	d192      	bne.n	8006934 <_dtoa_r+0xabc>
 8006a0e:	462b      	mov	r3, r5
 8006a10:	461d      	mov	r5, r3
 8006a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a16:	2a30      	cmp	r2, #48	; 0x30
 8006a18:	d0fa      	beq.n	8006a10 <_dtoa_r+0xb98>
 8006a1a:	e6dd      	b.n	80067d8 <_dtoa_r+0x960>
 8006a1c:	9a00      	ldr	r2, [sp, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d189      	bne.n	8006936 <_dtoa_r+0xabe>
 8006a22:	f10b 0b01 	add.w	fp, fp, #1
 8006a26:	2331      	movs	r3, #49	; 0x31
 8006a28:	e796      	b.n	8006958 <_dtoa_r+0xae0>
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <_dtoa_r+0xbdc>)
 8006a2c:	f7ff ba99 	b.w	8005f62 <_dtoa_r+0xea>
 8006a30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f47f aa6d 	bne.w	8005f12 <_dtoa_r+0x9a>
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <_dtoa_r+0xbe0>)
 8006a3a:	f7ff ba92 	b.w	8005f62 <_dtoa_r+0xea>
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dcb5      	bgt.n	80069b0 <_dtoa_r+0xb38>
 8006a44:	9b07      	ldr	r3, [sp, #28]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	f73f aeb1 	bgt.w	80067ae <_dtoa_r+0x936>
 8006a4c:	e7b0      	b.n	80069b0 <_dtoa_r+0xb38>
 8006a4e:	bf00      	nop
 8006a50:	0800828c 	.word	0x0800828c
 8006a54:	080081ec 	.word	0x080081ec
 8006a58:	08008210 	.word	0x08008210

08006a5c <_free_r>:
 8006a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a5e:	2900      	cmp	r1, #0
 8006a60:	d044      	beq.n	8006aec <_free_r+0x90>
 8006a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a66:	9001      	str	r0, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a6e:	bfb8      	it	lt
 8006a70:	18e4      	addlt	r4, r4, r3
 8006a72:	f000 f8e7 	bl	8006c44 <__malloc_lock>
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <_free_r+0x94>)
 8006a78:	9801      	ldr	r0, [sp, #4]
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	b933      	cbnz	r3, 8006a8c <_free_r+0x30>
 8006a7e:	6063      	str	r3, [r4, #4]
 8006a80:	6014      	str	r4, [r2, #0]
 8006a82:	b003      	add	sp, #12
 8006a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a88:	f000 b8e2 	b.w	8006c50 <__malloc_unlock>
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d908      	bls.n	8006aa2 <_free_r+0x46>
 8006a90:	6825      	ldr	r5, [r4, #0]
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf01      	itttt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	1949      	addeq	r1, r1, r5
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	e7ed      	b.n	8006a7e <_free_r+0x22>
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b10b      	cbz	r3, 8006aac <_free_r+0x50>
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d9fa      	bls.n	8006aa2 <_free_r+0x46>
 8006aac:	6811      	ldr	r1, [r2, #0]
 8006aae:	1855      	adds	r5, r2, r1
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	d10b      	bne.n	8006acc <_free_r+0x70>
 8006ab4:	6824      	ldr	r4, [r4, #0]
 8006ab6:	4421      	add	r1, r4
 8006ab8:	1854      	adds	r4, r2, r1
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	6011      	str	r1, [r2, #0]
 8006abe:	d1e0      	bne.n	8006a82 <_free_r+0x26>
 8006ac0:	681c      	ldr	r4, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	6053      	str	r3, [r2, #4]
 8006ac6:	440c      	add	r4, r1
 8006ac8:	6014      	str	r4, [r2, #0]
 8006aca:	e7da      	b.n	8006a82 <_free_r+0x26>
 8006acc:	d902      	bls.n	8006ad4 <_free_r+0x78>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	e7d6      	b.n	8006a82 <_free_r+0x26>
 8006ad4:	6825      	ldr	r5, [r4, #0]
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	bf04      	itt	eq
 8006adc:	6819      	ldreq	r1, [r3, #0]
 8006ade:	685b      	ldreq	r3, [r3, #4]
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	bf04      	itt	eq
 8006ae4:	1949      	addeq	r1, r1, r5
 8006ae6:	6021      	streq	r1, [r4, #0]
 8006ae8:	6054      	str	r4, [r2, #4]
 8006aea:	e7ca      	b.n	8006a82 <_free_r+0x26>
 8006aec:	b003      	add	sp, #12
 8006aee:	bd30      	pop	{r4, r5, pc}
 8006af0:	200004bc 	.word	0x200004bc

08006af4 <malloc>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <malloc+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f000 b823 	b.w	8006b44 <_malloc_r>
 8006afe:	bf00      	nop
 8006b00:	20000098 	.word	0x20000098

08006b04 <sbrk_aligned>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4e0e      	ldr	r6, [pc, #56]	; (8006b40 <sbrk_aligned+0x3c>)
 8006b08:	460c      	mov	r4, r1
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	b911      	cbnz	r1, 8006b16 <sbrk_aligned+0x12>
 8006b10:	f001 f89e 	bl	8007c50 <_sbrk_r>
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f001 f899 	bl	8007c50 <_sbrk_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d00a      	beq.n	8006b38 <sbrk_aligned+0x34>
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d007      	beq.n	8006b3c <sbrk_aligned+0x38>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f001 f88e 	bl	8007c50 <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d101      	bne.n	8006b3c <sbrk_aligned+0x38>
 8006b38:	f04f 34ff 	mov.w	r4, #4294967295
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	200004c0 	.word	0x200004c0

08006b44 <_malloc_r>:
 8006b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b48:	1ccd      	adds	r5, r1, #3
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	4607      	mov	r7, r0
 8006b5a:	db01      	blt.n	8006b60 <_malloc_r+0x1c>
 8006b5c:	42a9      	cmp	r1, r5
 8006b5e:	d905      	bls.n	8006b6c <_malloc_r+0x28>
 8006b60:	230c      	movs	r3, #12
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	2600      	movs	r6, #0
 8006b66:	4630      	mov	r0, r6
 8006b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c40 <_malloc_r+0xfc>
 8006b70:	f000 f868 	bl	8006c44 <__malloc_lock>
 8006b74:	f8d8 3000 	ldr.w	r3, [r8]
 8006b78:	461c      	mov	r4, r3
 8006b7a:	bb5c      	cbnz	r4, 8006bd4 <_malloc_r+0x90>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f7ff ffc0 	bl	8006b04 <sbrk_aligned>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	4604      	mov	r4, r0
 8006b88:	d155      	bne.n	8006c36 <_malloc_r+0xf2>
 8006b8a:	f8d8 4000 	ldr.w	r4, [r8]
 8006b8e:	4626      	mov	r6, r4
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	d145      	bne.n	8006c20 <_malloc_r+0xdc>
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	d048      	beq.n	8006c2a <_malloc_r+0xe6>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	eb04 0903 	add.w	r9, r4, r3
 8006ba2:	f001 f855 	bl	8007c50 <_sbrk_r>
 8006ba6:	4581      	cmp	r9, r0
 8006ba8:	d13f      	bne.n	8006c2a <_malloc_r+0xe6>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	1a6d      	subs	r5, r5, r1
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff ffa7 	bl	8006b04 <sbrk_aligned>
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d037      	beq.n	8006c2a <_malloc_r+0xe6>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	442b      	add	r3, r5
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d038      	beq.n	8006c3a <_malloc_r+0xf6>
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	42a2      	cmp	r2, r4
 8006bcc:	d12b      	bne.n	8006c26 <_malloc_r+0xe2>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
 8006bd2:	e00f      	b.n	8006bf4 <_malloc_r+0xb0>
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	1b52      	subs	r2, r2, r5
 8006bd8:	d41f      	bmi.n	8006c1a <_malloc_r+0xd6>
 8006bda:	2a0b      	cmp	r2, #11
 8006bdc:	d917      	bls.n	8006c0e <_malloc_r+0xca>
 8006bde:	1961      	adds	r1, r4, r5
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	6025      	str	r5, [r4, #0]
 8006be4:	bf18      	it	ne
 8006be6:	6059      	strne	r1, [r3, #4]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	bf08      	it	eq
 8006bec:	f8c8 1000 	streq.w	r1, [r8]
 8006bf0:	5162      	str	r2, [r4, r5]
 8006bf2:	604b      	str	r3, [r1, #4]
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f104 060b 	add.w	r6, r4, #11
 8006bfa:	f000 f829 	bl	8006c50 <__malloc_unlock>
 8006bfe:	f026 0607 	bic.w	r6, r6, #7
 8006c02:	1d23      	adds	r3, r4, #4
 8006c04:	1af2      	subs	r2, r6, r3
 8006c06:	d0ae      	beq.n	8006b66 <_malloc_r+0x22>
 8006c08:	1b9b      	subs	r3, r3, r6
 8006c0a:	50a3      	str	r3, [r4, r2]
 8006c0c:	e7ab      	b.n	8006b66 <_malloc_r+0x22>
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	6862      	ldr	r2, [r4, #4]
 8006c12:	d1dd      	bne.n	8006bd0 <_malloc_r+0x8c>
 8006c14:	f8c8 2000 	str.w	r2, [r8]
 8006c18:	e7ec      	b.n	8006bf4 <_malloc_r+0xb0>
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	6864      	ldr	r4, [r4, #4]
 8006c1e:	e7ac      	b.n	8006b7a <_malloc_r+0x36>
 8006c20:	4634      	mov	r4, r6
 8006c22:	6876      	ldr	r6, [r6, #4]
 8006c24:	e7b4      	b.n	8006b90 <_malloc_r+0x4c>
 8006c26:	4613      	mov	r3, r2
 8006c28:	e7cc      	b.n	8006bc4 <_malloc_r+0x80>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f000 f80e 	bl	8006c50 <__malloc_unlock>
 8006c34:	e797      	b.n	8006b66 <_malloc_r+0x22>
 8006c36:	6025      	str	r5, [r4, #0]
 8006c38:	e7dc      	b.n	8006bf4 <_malloc_r+0xb0>
 8006c3a:	605b      	str	r3, [r3, #4]
 8006c3c:	deff      	udf	#255	; 0xff
 8006c3e:	bf00      	nop
 8006c40:	200004bc 	.word	0x200004bc

08006c44 <__malloc_lock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__malloc_lock+0x8>)
 8006c46:	f7ff b88c 	b.w	8005d62 <__retarget_lock_acquire_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	200004b8 	.word	0x200004b8

08006c50 <__malloc_unlock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__malloc_unlock+0x8>)
 8006c52:	f7ff b887 	b.w	8005d64 <__retarget_lock_release_recursive>
 8006c56:	bf00      	nop
 8006c58:	200004b8 	.word	0x200004b8

08006c5c <_Balloc>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	69c6      	ldr	r6, [r0, #28]
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	b976      	cbnz	r6, 8006c84 <_Balloc+0x28>
 8006c66:	2010      	movs	r0, #16
 8006c68:	f7ff ff44 	bl	8006af4 <malloc>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	61e0      	str	r0, [r4, #28]
 8006c70:	b920      	cbnz	r0, 8006c7c <_Balloc+0x20>
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <_Balloc+0x78>)
 8006c74:	4818      	ldr	r0, [pc, #96]	; (8006cd8 <_Balloc+0x7c>)
 8006c76:	216b      	movs	r1, #107	; 0x6b
 8006c78:	f001 f808 	bl	8007c8c <__assert_func>
 8006c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c80:	6006      	str	r6, [r0, #0]
 8006c82:	60c6      	str	r6, [r0, #12]
 8006c84:	69e6      	ldr	r6, [r4, #28]
 8006c86:	68f3      	ldr	r3, [r6, #12]
 8006c88:	b183      	cbz	r3, 8006cac <_Balloc+0x50>
 8006c8a:	69e3      	ldr	r3, [r4, #28]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c92:	b9b8      	cbnz	r0, 8006cc4 <_Balloc+0x68>
 8006c94:	2101      	movs	r1, #1
 8006c96:	fa01 f605 	lsl.w	r6, r1, r5
 8006c9a:	1d72      	adds	r2, r6, #5
 8006c9c:	0092      	lsls	r2, r2, #2
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f001 f812 	bl	8007cc8 <_calloc_r>
 8006ca4:	b160      	cbz	r0, 8006cc0 <_Balloc+0x64>
 8006ca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006caa:	e00e      	b.n	8006cca <_Balloc+0x6e>
 8006cac:	2221      	movs	r2, #33	; 0x21
 8006cae:	2104      	movs	r1, #4
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 f809 	bl	8007cc8 <_calloc_r>
 8006cb6:	69e3      	ldr	r3, [r4, #28]
 8006cb8:	60f0      	str	r0, [r6, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e4      	bne.n	8006c8a <_Balloc+0x2e>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	6802      	ldr	r2, [r0, #0]
 8006cc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cd0:	e7f7      	b.n	8006cc2 <_Balloc+0x66>
 8006cd2:	bf00      	nop
 8006cd4:	0800821d 	.word	0x0800821d
 8006cd8:	0800829d 	.word	0x0800829d

08006cdc <_Bfree>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	69c6      	ldr	r6, [r0, #28]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b976      	cbnz	r6, 8006d04 <_Bfree+0x28>
 8006ce6:	2010      	movs	r0, #16
 8006ce8:	f7ff ff04 	bl	8006af4 <malloc>
 8006cec:	4602      	mov	r2, r0
 8006cee:	61e8      	str	r0, [r5, #28]
 8006cf0:	b920      	cbnz	r0, 8006cfc <_Bfree+0x20>
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <_Bfree+0x3c>)
 8006cf4:	4809      	ldr	r0, [pc, #36]	; (8006d1c <_Bfree+0x40>)
 8006cf6:	218f      	movs	r1, #143	; 0x8f
 8006cf8:	f000 ffc8 	bl	8007c8c <__assert_func>
 8006cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d00:	6006      	str	r6, [r0, #0]
 8006d02:	60c6      	str	r6, [r0, #12]
 8006d04:	b13c      	cbz	r4, 8006d16 <_Bfree+0x3a>
 8006d06:	69eb      	ldr	r3, [r5, #28]
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d10:	6021      	str	r1, [r4, #0]
 8006d12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	0800821d 	.word	0x0800821d
 8006d1c:	0800829d 	.word	0x0800829d

08006d20 <__multadd>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	690d      	ldr	r5, [r1, #16]
 8006d26:	4607      	mov	r7, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	461e      	mov	r6, r3
 8006d2c:	f101 0c14 	add.w	ip, r1, #20
 8006d30:	2000      	movs	r0, #0
 8006d32:	f8dc 3000 	ldr.w	r3, [ip]
 8006d36:	b299      	uxth	r1, r3
 8006d38:	fb02 6101 	mla	r1, r2, r1, r6
 8006d3c:	0c1e      	lsrs	r6, r3, #16
 8006d3e:	0c0b      	lsrs	r3, r1, #16
 8006d40:	fb02 3306 	mla	r3, r2, r6, r3
 8006d44:	b289      	uxth	r1, r1
 8006d46:	3001      	adds	r0, #1
 8006d48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d4c:	4285      	cmp	r5, r0
 8006d4e:	f84c 1b04 	str.w	r1, [ip], #4
 8006d52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d56:	dcec      	bgt.n	8006d32 <__multadd+0x12>
 8006d58:	b30e      	cbz	r6, 8006d9e <__multadd+0x7e>
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dc19      	bgt.n	8006d94 <__multadd+0x74>
 8006d60:	6861      	ldr	r1, [r4, #4]
 8006d62:	4638      	mov	r0, r7
 8006d64:	3101      	adds	r1, #1
 8006d66:	f7ff ff79 	bl	8006c5c <_Balloc>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	b928      	cbnz	r0, 8006d7a <__multadd+0x5a>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <__multadd+0x84>)
 8006d72:	480d      	ldr	r0, [pc, #52]	; (8006da8 <__multadd+0x88>)
 8006d74:	21ba      	movs	r1, #186	; 0xba
 8006d76:	f000 ff89 	bl	8007c8c <__assert_func>
 8006d7a:	6922      	ldr	r2, [r4, #16]
 8006d7c:	3202      	adds	r2, #2
 8006d7e:	f104 010c 	add.w	r1, r4, #12
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	300c      	adds	r0, #12
 8006d86:	f000 ff73 	bl	8007c70 <memcpy>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7ff ffa5 	bl	8006cdc <_Bfree>
 8006d92:	4644      	mov	r4, r8
 8006d94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d98:	3501      	adds	r5, #1
 8006d9a:	615e      	str	r6, [r3, #20]
 8006d9c:	6125      	str	r5, [r4, #16]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	0800828c 	.word	0x0800828c
 8006da8:	0800829d 	.word	0x0800829d

08006dac <__hi0bits>:
 8006dac:	0c03      	lsrs	r3, r0, #16
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	b9d3      	cbnz	r3, 8006de8 <__hi0bits+0x3c>
 8006db2:	0400      	lsls	r0, r0, #16
 8006db4:	2310      	movs	r3, #16
 8006db6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dba:	bf04      	itt	eq
 8006dbc:	0200      	lsleq	r0, r0, #8
 8006dbe:	3308      	addeq	r3, #8
 8006dc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dc4:	bf04      	itt	eq
 8006dc6:	0100      	lsleq	r0, r0, #4
 8006dc8:	3304      	addeq	r3, #4
 8006dca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006dce:	bf04      	itt	eq
 8006dd0:	0080      	lsleq	r0, r0, #2
 8006dd2:	3302      	addeq	r3, #2
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	db05      	blt.n	8006de4 <__hi0bits+0x38>
 8006dd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ddc:	f103 0301 	add.w	r3, r3, #1
 8006de0:	bf08      	it	eq
 8006de2:	2320      	moveq	r3, #32
 8006de4:	4618      	mov	r0, r3
 8006de6:	4770      	bx	lr
 8006de8:	2300      	movs	r3, #0
 8006dea:	e7e4      	b.n	8006db6 <__hi0bits+0xa>

08006dec <__lo0bits>:
 8006dec:	6803      	ldr	r3, [r0, #0]
 8006dee:	f013 0207 	ands.w	r2, r3, #7
 8006df2:	d00c      	beq.n	8006e0e <__lo0bits+0x22>
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	d422      	bmi.n	8006e3e <__lo0bits+0x52>
 8006df8:	079a      	lsls	r2, r3, #30
 8006dfa:	bf49      	itett	mi
 8006dfc:	085b      	lsrmi	r3, r3, #1
 8006dfe:	089b      	lsrpl	r3, r3, #2
 8006e00:	6003      	strmi	r3, [r0, #0]
 8006e02:	2201      	movmi	r2, #1
 8006e04:	bf5c      	itt	pl
 8006e06:	6003      	strpl	r3, [r0, #0]
 8006e08:	2202      	movpl	r2, #2
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4770      	bx	lr
 8006e0e:	b299      	uxth	r1, r3
 8006e10:	b909      	cbnz	r1, 8006e16 <__lo0bits+0x2a>
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	2210      	movs	r2, #16
 8006e16:	b2d9      	uxtb	r1, r3
 8006e18:	b909      	cbnz	r1, 8006e1e <__lo0bits+0x32>
 8006e1a:	3208      	adds	r2, #8
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	0719      	lsls	r1, r3, #28
 8006e20:	bf04      	itt	eq
 8006e22:	091b      	lsreq	r3, r3, #4
 8006e24:	3204      	addeq	r2, #4
 8006e26:	0799      	lsls	r1, r3, #30
 8006e28:	bf04      	itt	eq
 8006e2a:	089b      	lsreq	r3, r3, #2
 8006e2c:	3202      	addeq	r2, #2
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d403      	bmi.n	8006e3a <__lo0bits+0x4e>
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	f102 0201 	add.w	r2, r2, #1
 8006e38:	d003      	beq.n	8006e42 <__lo0bits+0x56>
 8006e3a:	6003      	str	r3, [r0, #0]
 8006e3c:	e7e5      	b.n	8006e0a <__lo0bits+0x1e>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	e7e3      	b.n	8006e0a <__lo0bits+0x1e>
 8006e42:	2220      	movs	r2, #32
 8006e44:	e7e1      	b.n	8006e0a <__lo0bits+0x1e>
	...

08006e48 <__i2b>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	f7ff ff05 	bl	8006c5c <_Balloc>
 8006e52:	4602      	mov	r2, r0
 8006e54:	b928      	cbnz	r0, 8006e62 <__i2b+0x1a>
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <__i2b+0x24>)
 8006e58:	4805      	ldr	r0, [pc, #20]	; (8006e70 <__i2b+0x28>)
 8006e5a:	f240 1145 	movw	r1, #325	; 0x145
 8006e5e:	f000 ff15 	bl	8007c8c <__assert_func>
 8006e62:	2301      	movs	r3, #1
 8006e64:	6144      	str	r4, [r0, #20]
 8006e66:	6103      	str	r3, [r0, #16]
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	bf00      	nop
 8006e6c:	0800828c 	.word	0x0800828c
 8006e70:	0800829d 	.word	0x0800829d

08006e74 <__multiply>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4691      	mov	r9, r2
 8006e7a:	690a      	ldr	r2, [r1, #16]
 8006e7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bfb8      	it	lt
 8006e84:	460b      	movlt	r3, r1
 8006e86:	460c      	mov	r4, r1
 8006e88:	bfbc      	itt	lt
 8006e8a:	464c      	movlt	r4, r9
 8006e8c:	4699      	movlt	r9, r3
 8006e8e:	6927      	ldr	r7, [r4, #16]
 8006e90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e94:	68a3      	ldr	r3, [r4, #8]
 8006e96:	6861      	ldr	r1, [r4, #4]
 8006e98:	eb07 060a 	add.w	r6, r7, sl
 8006e9c:	42b3      	cmp	r3, r6
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	bfb8      	it	lt
 8006ea2:	3101      	addlt	r1, #1
 8006ea4:	f7ff feda 	bl	8006c5c <_Balloc>
 8006ea8:	b930      	cbnz	r0, 8006eb8 <__multiply+0x44>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b44      	ldr	r3, [pc, #272]	; (8006fc0 <__multiply+0x14c>)
 8006eae:	4845      	ldr	r0, [pc, #276]	; (8006fc4 <__multiply+0x150>)
 8006eb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006eb4:	f000 feea 	bl	8007c8c <__assert_func>
 8006eb8:	f100 0514 	add.w	r5, r0, #20
 8006ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4543      	cmp	r3, r8
 8006ec6:	d321      	bcc.n	8006f0c <__multiply+0x98>
 8006ec8:	f104 0314 	add.w	r3, r4, #20
 8006ecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ed0:	f109 0314 	add.w	r3, r9, #20
 8006ed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ed8:	9202      	str	r2, [sp, #8]
 8006eda:	1b3a      	subs	r2, r7, r4
 8006edc:	3a15      	subs	r2, #21
 8006ede:	f022 0203 	bic.w	r2, r2, #3
 8006ee2:	3204      	adds	r2, #4
 8006ee4:	f104 0115 	add.w	r1, r4, #21
 8006ee8:	428f      	cmp	r7, r1
 8006eea:	bf38      	it	cc
 8006eec:	2204      	movcc	r2, #4
 8006eee:	9201      	str	r2, [sp, #4]
 8006ef0:	9a02      	ldr	r2, [sp, #8]
 8006ef2:	9303      	str	r3, [sp, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d80c      	bhi.n	8006f12 <__multiply+0x9e>
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	dd03      	ble.n	8006f04 <__multiply+0x90>
 8006efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05b      	beq.n	8006fbc <__multiply+0x148>
 8006f04:	6106      	str	r6, [r0, #16]
 8006f06:	b005      	add	sp, #20
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	f843 2b04 	str.w	r2, [r3], #4
 8006f10:	e7d8      	b.n	8006ec4 <__multiply+0x50>
 8006f12:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f16:	f1ba 0f00 	cmp.w	sl, #0
 8006f1a:	d024      	beq.n	8006f66 <__multiply+0xf2>
 8006f1c:	f104 0e14 	add.w	lr, r4, #20
 8006f20:	46a9      	mov	r9, r5
 8006f22:	f04f 0c00 	mov.w	ip, #0
 8006f26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f2a:	f8d9 1000 	ldr.w	r1, [r9]
 8006f2e:	fa1f fb82 	uxth.w	fp, r2
 8006f32:	b289      	uxth	r1, r1
 8006f34:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f40:	4461      	add	r1, ip
 8006f42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f46:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f4e:	b289      	uxth	r1, r1
 8006f50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f54:	4577      	cmp	r7, lr
 8006f56:	f849 1b04 	str.w	r1, [r9], #4
 8006f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f5e:	d8e2      	bhi.n	8006f26 <__multiply+0xb2>
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	f845 c002 	str.w	ip, [r5, r2]
 8006f66:	9a03      	ldr	r2, [sp, #12]
 8006f68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	f1b9 0f00 	cmp.w	r9, #0
 8006f72:	d021      	beq.n	8006fb8 <__multiply+0x144>
 8006f74:	6829      	ldr	r1, [r5, #0]
 8006f76:	f104 0c14 	add.w	ip, r4, #20
 8006f7a:	46ae      	mov	lr, r5
 8006f7c:	f04f 0a00 	mov.w	sl, #0
 8006f80:	f8bc b000 	ldrh.w	fp, [ip]
 8006f84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f88:	fb09 220b 	mla	r2, r9, fp, r2
 8006f8c:	4452      	add	r2, sl
 8006f8e:	b289      	uxth	r1, r1
 8006f90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f94:	f84e 1b04 	str.w	r1, [lr], #4
 8006f98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fa0:	f8be 1000 	ldrh.w	r1, [lr]
 8006fa4:	fb09 110a 	mla	r1, r9, sl, r1
 8006fa8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006fac:	4567      	cmp	r7, ip
 8006fae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fb2:	d8e5      	bhi.n	8006f80 <__multiply+0x10c>
 8006fb4:	9a01      	ldr	r2, [sp, #4]
 8006fb6:	50a9      	str	r1, [r5, r2]
 8006fb8:	3504      	adds	r5, #4
 8006fba:	e799      	b.n	8006ef0 <__multiply+0x7c>
 8006fbc:	3e01      	subs	r6, #1
 8006fbe:	e79b      	b.n	8006ef8 <__multiply+0x84>
 8006fc0:	0800828c 	.word	0x0800828c
 8006fc4:	0800829d 	.word	0x0800829d

08006fc8 <__pow5mult>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	f012 0203 	ands.w	r2, r2, #3
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460f      	mov	r7, r1
 8006fd6:	d007      	beq.n	8006fe8 <__pow5mult+0x20>
 8006fd8:	4c25      	ldr	r4, [pc, #148]	; (8007070 <__pow5mult+0xa8>)
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe2:	f7ff fe9d 	bl	8006d20 <__multadd>
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	d03d      	beq.n	8007068 <__pow5mult+0xa0>
 8006fec:	69f4      	ldr	r4, [r6, #28]
 8006fee:	b97c      	cbnz	r4, 8007010 <__pow5mult+0x48>
 8006ff0:	2010      	movs	r0, #16
 8006ff2:	f7ff fd7f 	bl	8006af4 <malloc>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	61f0      	str	r0, [r6, #28]
 8006ffa:	b928      	cbnz	r0, 8007008 <__pow5mult+0x40>
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <__pow5mult+0xac>)
 8006ffe:	481e      	ldr	r0, [pc, #120]	; (8007078 <__pow5mult+0xb0>)
 8007000:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007004:	f000 fe42 	bl	8007c8c <__assert_func>
 8007008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800700c:	6004      	str	r4, [r0, #0]
 800700e:	60c4      	str	r4, [r0, #12]
 8007010:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007018:	b94c      	cbnz	r4, 800702e <__pow5mult+0x66>
 800701a:	f240 2171 	movw	r1, #625	; 0x271
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff ff12 	bl	8006e48 <__i2b>
 8007024:	2300      	movs	r3, #0
 8007026:	f8c8 0008 	str.w	r0, [r8, #8]
 800702a:	4604      	mov	r4, r0
 800702c:	6003      	str	r3, [r0, #0]
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	07eb      	lsls	r3, r5, #31
 8007034:	d50a      	bpl.n	800704c <__pow5mult+0x84>
 8007036:	4639      	mov	r1, r7
 8007038:	4622      	mov	r2, r4
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff ff1a 	bl	8006e74 <__multiply>
 8007040:	4639      	mov	r1, r7
 8007042:	4680      	mov	r8, r0
 8007044:	4630      	mov	r0, r6
 8007046:	f7ff fe49 	bl	8006cdc <_Bfree>
 800704a:	4647      	mov	r7, r8
 800704c:	106d      	asrs	r5, r5, #1
 800704e:	d00b      	beq.n	8007068 <__pow5mult+0xa0>
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	b938      	cbnz	r0, 8007064 <__pow5mult+0x9c>
 8007054:	4622      	mov	r2, r4
 8007056:	4621      	mov	r1, r4
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff ff0b 	bl	8006e74 <__multiply>
 800705e:	6020      	str	r0, [r4, #0]
 8007060:	f8c0 9000 	str.w	r9, [r0]
 8007064:	4604      	mov	r4, r0
 8007066:	e7e4      	b.n	8007032 <__pow5mult+0x6a>
 8007068:	4638      	mov	r0, r7
 800706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706e:	bf00      	nop
 8007070:	080083e8 	.word	0x080083e8
 8007074:	0800821d 	.word	0x0800821d
 8007078:	0800829d 	.word	0x0800829d

0800707c <__lshift>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	6849      	ldr	r1, [r1, #4]
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	4607      	mov	r7, r0
 800708e:	4691      	mov	r9, r2
 8007090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007094:	f108 0601 	add.w	r6, r8, #1
 8007098:	42b3      	cmp	r3, r6
 800709a:	db0b      	blt.n	80070b4 <__lshift+0x38>
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff fddd 	bl	8006c5c <_Balloc>
 80070a2:	4605      	mov	r5, r0
 80070a4:	b948      	cbnz	r0, 80070ba <__lshift+0x3e>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b28      	ldr	r3, [pc, #160]	; (800714c <__lshift+0xd0>)
 80070aa:	4829      	ldr	r0, [pc, #164]	; (8007150 <__lshift+0xd4>)
 80070ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80070b0:	f000 fdec 	bl	8007c8c <__assert_func>
 80070b4:	3101      	adds	r1, #1
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	e7ee      	b.n	8007098 <__lshift+0x1c>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f100 0114 	add.w	r1, r0, #20
 80070c0:	f100 0210 	add.w	r2, r0, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	4553      	cmp	r3, sl
 80070c8:	db33      	blt.n	8007132 <__lshift+0xb6>
 80070ca:	6920      	ldr	r0, [r4, #16]
 80070cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	f019 091f 	ands.w	r9, r9, #31
 80070d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e0:	d02b      	beq.n	800713a <__lshift+0xbe>
 80070e2:	f1c9 0e20 	rsb	lr, r9, #32
 80070e6:	468a      	mov	sl, r1
 80070e8:	2200      	movs	r2, #0
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	fa00 f009 	lsl.w	r0, r0, r9
 80070f0:	4310      	orrs	r0, r2
 80070f2:	f84a 0b04 	str.w	r0, [sl], #4
 80070f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fa:	459c      	cmp	ip, r3
 80070fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007100:	d8f3      	bhi.n	80070ea <__lshift+0x6e>
 8007102:	ebac 0304 	sub.w	r3, ip, r4
 8007106:	3b15      	subs	r3, #21
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	3304      	adds	r3, #4
 800710e:	f104 0015 	add.w	r0, r4, #21
 8007112:	4584      	cmp	ip, r0
 8007114:	bf38      	it	cc
 8007116:	2304      	movcc	r3, #4
 8007118:	50ca      	str	r2, [r1, r3]
 800711a:	b10a      	cbz	r2, 8007120 <__lshift+0xa4>
 800711c:	f108 0602 	add.w	r6, r8, #2
 8007120:	3e01      	subs	r6, #1
 8007122:	4638      	mov	r0, r7
 8007124:	612e      	str	r6, [r5, #16]
 8007126:	4621      	mov	r1, r4
 8007128:	f7ff fdd8 	bl	8006cdc <_Bfree>
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	f842 0f04 	str.w	r0, [r2, #4]!
 8007136:	3301      	adds	r3, #1
 8007138:	e7c5      	b.n	80070c6 <__lshift+0x4a>
 800713a:	3904      	subs	r1, #4
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	f841 2f04 	str.w	r2, [r1, #4]!
 8007144:	459c      	cmp	ip, r3
 8007146:	d8f9      	bhi.n	800713c <__lshift+0xc0>
 8007148:	e7ea      	b.n	8007120 <__lshift+0xa4>
 800714a:	bf00      	nop
 800714c:	0800828c 	.word	0x0800828c
 8007150:	0800829d 	.word	0x0800829d

08007154 <__mcmp>:
 8007154:	b530      	push	{r4, r5, lr}
 8007156:	6902      	ldr	r2, [r0, #16]
 8007158:	690c      	ldr	r4, [r1, #16]
 800715a:	1b12      	subs	r2, r2, r4
 800715c:	d10e      	bne.n	800717c <__mcmp+0x28>
 800715e:	f100 0314 	add.w	r3, r0, #20
 8007162:	3114      	adds	r1, #20
 8007164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800716c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007174:	42a5      	cmp	r5, r4
 8007176:	d003      	beq.n	8007180 <__mcmp+0x2c>
 8007178:	d305      	bcc.n	8007186 <__mcmp+0x32>
 800717a:	2201      	movs	r2, #1
 800717c:	4610      	mov	r0, r2
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	4283      	cmp	r3, r0
 8007182:	d3f3      	bcc.n	800716c <__mcmp+0x18>
 8007184:	e7fa      	b.n	800717c <__mcmp+0x28>
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	e7f7      	b.n	800717c <__mcmp+0x28>

0800718c <__mdiff>:
 800718c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	460c      	mov	r4, r1
 8007192:	4606      	mov	r6, r0
 8007194:	4611      	mov	r1, r2
 8007196:	4620      	mov	r0, r4
 8007198:	4690      	mov	r8, r2
 800719a:	f7ff ffdb 	bl	8007154 <__mcmp>
 800719e:	1e05      	subs	r5, r0, #0
 80071a0:	d110      	bne.n	80071c4 <__mdiff+0x38>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff fd59 	bl	8006c5c <_Balloc>
 80071aa:	b930      	cbnz	r0, 80071ba <__mdiff+0x2e>
 80071ac:	4b3a      	ldr	r3, [pc, #232]	; (8007298 <__mdiff+0x10c>)
 80071ae:	4602      	mov	r2, r0
 80071b0:	f240 2137 	movw	r1, #567	; 0x237
 80071b4:	4839      	ldr	r0, [pc, #228]	; (800729c <__mdiff+0x110>)
 80071b6:	f000 fd69 	bl	8007c8c <__assert_func>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	bfa4      	itt	ge
 80071c6:	4643      	movge	r3, r8
 80071c8:	46a0      	movge	r8, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071d0:	bfa6      	itte	ge
 80071d2:	461c      	movge	r4, r3
 80071d4:	2500      	movge	r5, #0
 80071d6:	2501      	movlt	r5, #1
 80071d8:	f7ff fd40 	bl	8006c5c <_Balloc>
 80071dc:	b920      	cbnz	r0, 80071e8 <__mdiff+0x5c>
 80071de:	4b2e      	ldr	r3, [pc, #184]	; (8007298 <__mdiff+0x10c>)
 80071e0:	4602      	mov	r2, r0
 80071e2:	f240 2145 	movw	r1, #581	; 0x245
 80071e6:	e7e5      	b.n	80071b4 <__mdiff+0x28>
 80071e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071ec:	6926      	ldr	r6, [r4, #16]
 80071ee:	60c5      	str	r5, [r0, #12]
 80071f0:	f104 0914 	add.w	r9, r4, #20
 80071f4:	f108 0514 	add.w	r5, r8, #20
 80071f8:	f100 0e14 	add.w	lr, r0, #20
 80071fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007204:	f108 0210 	add.w	r2, r8, #16
 8007208:	46f2      	mov	sl, lr
 800720a:	2100      	movs	r1, #0
 800720c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007214:	fa11 f88b 	uxtah	r8, r1, fp
 8007218:	b299      	uxth	r1, r3
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	eba8 0801 	sub.w	r8, r8, r1
 8007220:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007224:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007228:	fa1f f888 	uxth.w	r8, r8
 800722c:	1419      	asrs	r1, r3, #16
 800722e:	454e      	cmp	r6, r9
 8007230:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007234:	f84a 3b04 	str.w	r3, [sl], #4
 8007238:	d8e8      	bhi.n	800720c <__mdiff+0x80>
 800723a:	1b33      	subs	r3, r6, r4
 800723c:	3b15      	subs	r3, #21
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	3304      	adds	r3, #4
 8007244:	3415      	adds	r4, #21
 8007246:	42a6      	cmp	r6, r4
 8007248:	bf38      	it	cc
 800724a:	2304      	movcc	r3, #4
 800724c:	441d      	add	r5, r3
 800724e:	4473      	add	r3, lr
 8007250:	469e      	mov	lr, r3
 8007252:	462e      	mov	r6, r5
 8007254:	4566      	cmp	r6, ip
 8007256:	d30e      	bcc.n	8007276 <__mdiff+0xea>
 8007258:	f10c 0203 	add.w	r2, ip, #3
 800725c:	1b52      	subs	r2, r2, r5
 800725e:	f022 0203 	bic.w	r2, r2, #3
 8007262:	3d03      	subs	r5, #3
 8007264:	45ac      	cmp	ip, r5
 8007266:	bf38      	it	cc
 8007268:	2200      	movcc	r2, #0
 800726a:	4413      	add	r3, r2
 800726c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007270:	b17a      	cbz	r2, 8007292 <__mdiff+0x106>
 8007272:	6107      	str	r7, [r0, #16]
 8007274:	e7a4      	b.n	80071c0 <__mdiff+0x34>
 8007276:	f856 8b04 	ldr.w	r8, [r6], #4
 800727a:	fa11 f288 	uxtah	r2, r1, r8
 800727e:	1414      	asrs	r4, r2, #16
 8007280:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007284:	b292      	uxth	r2, r2
 8007286:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800728a:	f84e 2b04 	str.w	r2, [lr], #4
 800728e:	1421      	asrs	r1, r4, #16
 8007290:	e7e0      	b.n	8007254 <__mdiff+0xc8>
 8007292:	3f01      	subs	r7, #1
 8007294:	e7ea      	b.n	800726c <__mdiff+0xe0>
 8007296:	bf00      	nop
 8007298:	0800828c 	.word	0x0800828c
 800729c:	0800829d 	.word	0x0800829d

080072a0 <__d2b>:
 80072a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	460f      	mov	r7, r1
 80072a6:	2101      	movs	r1, #1
 80072a8:	ec59 8b10 	vmov	r8, r9, d0
 80072ac:	4616      	mov	r6, r2
 80072ae:	f7ff fcd5 	bl	8006c5c <_Balloc>
 80072b2:	4604      	mov	r4, r0
 80072b4:	b930      	cbnz	r0, 80072c4 <__d2b+0x24>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b24      	ldr	r3, [pc, #144]	; (800734c <__d2b+0xac>)
 80072ba:	4825      	ldr	r0, [pc, #148]	; (8007350 <__d2b+0xb0>)
 80072bc:	f240 310f 	movw	r1, #783	; 0x30f
 80072c0:	f000 fce4 	bl	8007c8c <__assert_func>
 80072c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072cc:	bb2d      	cbnz	r5, 800731a <__d2b+0x7a>
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	f1b8 0300 	subs.w	r3, r8, #0
 80072d4:	d026      	beq.n	8007324 <__d2b+0x84>
 80072d6:	4668      	mov	r0, sp
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	f7ff fd87 	bl	8006dec <__lo0bits>
 80072de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072e2:	b1e8      	cbz	r0, 8007320 <__d2b+0x80>
 80072e4:	f1c0 0320 	rsb	r3, r0, #32
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	430b      	orrs	r3, r1
 80072ee:	40c2      	lsrs	r2, r0
 80072f0:	6163      	str	r3, [r4, #20]
 80072f2:	9201      	str	r2, [sp, #4]
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2202      	movne	r2, #2
 80072fe:	2201      	moveq	r2, #1
 8007300:	6122      	str	r2, [r4, #16]
 8007302:	b1bd      	cbz	r5, 8007334 <__d2b+0x94>
 8007304:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007308:	4405      	add	r5, r0
 800730a:	603d      	str	r5, [r7, #0]
 800730c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007310:	6030      	str	r0, [r6, #0]
 8007312:	4620      	mov	r0, r4
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800731e:	e7d6      	b.n	80072ce <__d2b+0x2e>
 8007320:	6161      	str	r1, [r4, #20]
 8007322:	e7e7      	b.n	80072f4 <__d2b+0x54>
 8007324:	a801      	add	r0, sp, #4
 8007326:	f7ff fd61 	bl	8006dec <__lo0bits>
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	6163      	str	r3, [r4, #20]
 800732e:	3020      	adds	r0, #32
 8007330:	2201      	movs	r2, #1
 8007332:	e7e5      	b.n	8007300 <__d2b+0x60>
 8007334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800733c:	6038      	str	r0, [r7, #0]
 800733e:	6918      	ldr	r0, [r3, #16]
 8007340:	f7ff fd34 	bl	8006dac <__hi0bits>
 8007344:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007348:	e7e2      	b.n	8007310 <__d2b+0x70>
 800734a:	bf00      	nop
 800734c:	0800828c 	.word	0x0800828c
 8007350:	0800829d 	.word	0x0800829d

08007354 <__ssputs_r>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	688e      	ldr	r6, [r1, #8]
 800735a:	461f      	mov	r7, r3
 800735c:	42be      	cmp	r6, r7
 800735e:	680b      	ldr	r3, [r1, #0]
 8007360:	4682      	mov	sl, r0
 8007362:	460c      	mov	r4, r1
 8007364:	4690      	mov	r8, r2
 8007366:	d82c      	bhi.n	80073c2 <__ssputs_r+0x6e>
 8007368:	898a      	ldrh	r2, [r1, #12]
 800736a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800736e:	d026      	beq.n	80073be <__ssputs_r+0x6a>
 8007370:	6965      	ldr	r5, [r4, #20]
 8007372:	6909      	ldr	r1, [r1, #16]
 8007374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007378:	eba3 0901 	sub.w	r9, r3, r1
 800737c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007380:	1c7b      	adds	r3, r7, #1
 8007382:	444b      	add	r3, r9
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	429d      	cmp	r5, r3
 8007388:	bf38      	it	cc
 800738a:	461d      	movcc	r5, r3
 800738c:	0553      	lsls	r3, r2, #21
 800738e:	d527      	bpl.n	80073e0 <__ssputs_r+0x8c>
 8007390:	4629      	mov	r1, r5
 8007392:	f7ff fbd7 	bl	8006b44 <_malloc_r>
 8007396:	4606      	mov	r6, r0
 8007398:	b360      	cbz	r0, 80073f4 <__ssputs_r+0xa0>
 800739a:	6921      	ldr	r1, [r4, #16]
 800739c:	464a      	mov	r2, r9
 800739e:	f000 fc67 	bl	8007c70 <memcpy>
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	6126      	str	r6, [r4, #16]
 80073b0:	6165      	str	r5, [r4, #20]
 80073b2:	444e      	add	r6, r9
 80073b4:	eba5 0509 	sub.w	r5, r5, r9
 80073b8:	6026      	str	r6, [r4, #0]
 80073ba:	60a5      	str	r5, [r4, #8]
 80073bc:	463e      	mov	r6, r7
 80073be:	42be      	cmp	r6, r7
 80073c0:	d900      	bls.n	80073c4 <__ssputs_r+0x70>
 80073c2:	463e      	mov	r6, r7
 80073c4:	6820      	ldr	r0, [r4, #0]
 80073c6:	4632      	mov	r2, r6
 80073c8:	4641      	mov	r1, r8
 80073ca:	f000 fc05 	bl	8007bd8 <memmove>
 80073ce:	68a3      	ldr	r3, [r4, #8]
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	60a3      	str	r3, [r4, #8]
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	4433      	add	r3, r6
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	2000      	movs	r0, #0
 80073dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e0:	462a      	mov	r2, r5
 80073e2:	f000 fc99 	bl	8007d18 <_realloc_r>
 80073e6:	4606      	mov	r6, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1e0      	bne.n	80073ae <__ssputs_r+0x5a>
 80073ec:	6921      	ldr	r1, [r4, #16]
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7ff fb34 	bl	8006a5c <_free_r>
 80073f4:	230c      	movs	r3, #12
 80073f6:	f8ca 3000 	str.w	r3, [sl]
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	e7e9      	b.n	80073dc <__ssputs_r+0x88>

08007408 <_svfiprintf_r>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	4698      	mov	r8, r3
 800740e:	898b      	ldrh	r3, [r1, #12]
 8007410:	061b      	lsls	r3, r3, #24
 8007412:	b09d      	sub	sp, #116	; 0x74
 8007414:	4607      	mov	r7, r0
 8007416:	460d      	mov	r5, r1
 8007418:	4614      	mov	r4, r2
 800741a:	d50e      	bpl.n	800743a <_svfiprintf_r+0x32>
 800741c:	690b      	ldr	r3, [r1, #16]
 800741e:	b963      	cbnz	r3, 800743a <_svfiprintf_r+0x32>
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	f7ff fb8f 	bl	8006b44 <_malloc_r>
 8007426:	6028      	str	r0, [r5, #0]
 8007428:	6128      	str	r0, [r5, #16]
 800742a:	b920      	cbnz	r0, 8007436 <_svfiprintf_r+0x2e>
 800742c:	230c      	movs	r3, #12
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e0d0      	b.n	80075d8 <_svfiprintf_r+0x1d0>
 8007436:	2340      	movs	r3, #64	; 0x40
 8007438:	616b      	str	r3, [r5, #20]
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	; 0x24
 800743e:	2320      	movs	r3, #32
 8007440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007444:	f8cd 800c 	str.w	r8, [sp, #12]
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075f0 <_svfiprintf_r+0x1e8>
 800744e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007452:	f04f 0901 	mov.w	r9, #1
 8007456:	4623      	mov	r3, r4
 8007458:	469a      	mov	sl, r3
 800745a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745e:	b10a      	cbz	r2, 8007464 <_svfiprintf_r+0x5c>
 8007460:	2a25      	cmp	r2, #37	; 0x25
 8007462:	d1f9      	bne.n	8007458 <_svfiprintf_r+0x50>
 8007464:	ebba 0b04 	subs.w	fp, sl, r4
 8007468:	d00b      	beq.n	8007482 <_svfiprintf_r+0x7a>
 800746a:	465b      	mov	r3, fp
 800746c:	4622      	mov	r2, r4
 800746e:	4629      	mov	r1, r5
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff6f 	bl	8007354 <__ssputs_r>
 8007476:	3001      	adds	r0, #1
 8007478:	f000 80a9 	beq.w	80075ce <_svfiprintf_r+0x1c6>
 800747c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747e:	445a      	add	r2, fp
 8007480:	9209      	str	r2, [sp, #36]	; 0x24
 8007482:	f89a 3000 	ldrb.w	r3, [sl]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80a1 	beq.w	80075ce <_svfiprintf_r+0x1c6>
 800748c:	2300      	movs	r3, #0
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007496:	f10a 0a01 	add.w	sl, sl, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a2:	931a      	str	r3, [sp, #104]	; 0x68
 80074a4:	4654      	mov	r4, sl
 80074a6:	2205      	movs	r2, #5
 80074a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ac:	4850      	ldr	r0, [pc, #320]	; (80075f0 <_svfiprintf_r+0x1e8>)
 80074ae:	f7f8 feaf 	bl	8000210 <memchr>
 80074b2:	9a04      	ldr	r2, [sp, #16]
 80074b4:	b9d8      	cbnz	r0, 80074ee <_svfiprintf_r+0xe6>
 80074b6:	06d0      	lsls	r0, r2, #27
 80074b8:	bf44      	itt	mi
 80074ba:	2320      	movmi	r3, #32
 80074bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c0:	0711      	lsls	r1, r2, #28
 80074c2:	bf44      	itt	mi
 80074c4:	232b      	movmi	r3, #43	; 0x2b
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b2a      	cmp	r3, #42	; 0x2a
 80074d0:	d015      	beq.n	80074fe <_svfiprintf_r+0xf6>
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4654      	mov	r4, sl
 80074d6:	2000      	movs	r0, #0
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4621      	mov	r1, r4
 80074de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e2:	3b30      	subs	r3, #48	; 0x30
 80074e4:	2b09      	cmp	r3, #9
 80074e6:	d94d      	bls.n	8007584 <_svfiprintf_r+0x17c>
 80074e8:	b1b0      	cbz	r0, 8007518 <_svfiprintf_r+0x110>
 80074ea:	9207      	str	r2, [sp, #28]
 80074ec:	e014      	b.n	8007518 <_svfiprintf_r+0x110>
 80074ee:	eba0 0308 	sub.w	r3, r0, r8
 80074f2:	fa09 f303 	lsl.w	r3, r9, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	46a2      	mov	sl, r4
 80074fc:	e7d2      	b.n	80074a4 <_svfiprintf_r+0x9c>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d19      	adds	r1, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfbb      	ittet	lt
 800750a:	425b      	neglt	r3, r3
 800750c:	f042 0202 	orrlt.w	r2, r2, #2
 8007510:	9307      	strge	r3, [sp, #28]
 8007512:	9307      	strlt	r3, [sp, #28]
 8007514:	bfb8      	it	lt
 8007516:	9204      	strlt	r2, [sp, #16]
 8007518:	7823      	ldrb	r3, [r4, #0]
 800751a:	2b2e      	cmp	r3, #46	; 0x2e
 800751c:	d10c      	bne.n	8007538 <_svfiprintf_r+0x130>
 800751e:	7863      	ldrb	r3, [r4, #1]
 8007520:	2b2a      	cmp	r3, #42	; 0x2a
 8007522:	d134      	bne.n	800758e <_svfiprintf_r+0x186>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	bfb8      	it	lt
 8007530:	f04f 33ff 	movlt.w	r3, #4294967295
 8007534:	3402      	adds	r4, #2
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007600 <_svfiprintf_r+0x1f8>
 800753c:	7821      	ldrb	r1, [r4, #0]
 800753e:	2203      	movs	r2, #3
 8007540:	4650      	mov	r0, sl
 8007542:	f7f8 fe65 	bl	8000210 <memchr>
 8007546:	b138      	cbz	r0, 8007558 <_svfiprintf_r+0x150>
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	eba0 000a 	sub.w	r0, r0, sl
 800754e:	2240      	movs	r2, #64	; 0x40
 8007550:	4082      	lsls	r2, r0
 8007552:	4313      	orrs	r3, r2
 8007554:	3401      	adds	r4, #1
 8007556:	9304      	str	r3, [sp, #16]
 8007558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755c:	4825      	ldr	r0, [pc, #148]	; (80075f4 <_svfiprintf_r+0x1ec>)
 800755e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007562:	2206      	movs	r2, #6
 8007564:	f7f8 fe54 	bl	8000210 <memchr>
 8007568:	2800      	cmp	r0, #0
 800756a:	d038      	beq.n	80075de <_svfiprintf_r+0x1d6>
 800756c:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <_svfiprintf_r+0x1f0>)
 800756e:	bb1b      	cbnz	r3, 80075b8 <_svfiprintf_r+0x1b0>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	3307      	adds	r3, #7
 8007574:	f023 0307 	bic.w	r3, r3, #7
 8007578:	3308      	adds	r3, #8
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	4433      	add	r3, r6
 8007580:	9309      	str	r3, [sp, #36]	; 0x24
 8007582:	e768      	b.n	8007456 <_svfiprintf_r+0x4e>
 8007584:	fb0c 3202 	mla	r2, ip, r2, r3
 8007588:	460c      	mov	r4, r1
 800758a:	2001      	movs	r0, #1
 800758c:	e7a6      	b.n	80074dc <_svfiprintf_r+0xd4>
 800758e:	2300      	movs	r3, #0
 8007590:	3401      	adds	r4, #1
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	4619      	mov	r1, r3
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4620      	mov	r0, r4
 800759c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a0:	3a30      	subs	r2, #48	; 0x30
 80075a2:	2a09      	cmp	r2, #9
 80075a4:	d903      	bls.n	80075ae <_svfiprintf_r+0x1a6>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0c6      	beq.n	8007538 <_svfiprintf_r+0x130>
 80075aa:	9105      	str	r1, [sp, #20]
 80075ac:	e7c4      	b.n	8007538 <_svfiprintf_r+0x130>
 80075ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b2:	4604      	mov	r4, r0
 80075b4:	2301      	movs	r3, #1
 80075b6:	e7f0      	b.n	800759a <_svfiprintf_r+0x192>
 80075b8:	ab03      	add	r3, sp, #12
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	462a      	mov	r2, r5
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <_svfiprintf_r+0x1f4>)
 80075c0:	a904      	add	r1, sp, #16
 80075c2:	4638      	mov	r0, r7
 80075c4:	f7fd fd9c 	bl	8005100 <_printf_float>
 80075c8:	1c42      	adds	r2, r0, #1
 80075ca:	4606      	mov	r6, r0
 80075cc:	d1d6      	bne.n	800757c <_svfiprintf_r+0x174>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	065b      	lsls	r3, r3, #25
 80075d2:	f53f af2d 	bmi.w	8007430 <_svfiprintf_r+0x28>
 80075d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075d8:	b01d      	add	sp, #116	; 0x74
 80075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075de:	ab03      	add	r3, sp, #12
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	462a      	mov	r2, r5
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <_svfiprintf_r+0x1f4>)
 80075e6:	a904      	add	r1, sp, #16
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7fe f82d 	bl	8005648 <_printf_i>
 80075ee:	e7eb      	b.n	80075c8 <_svfiprintf_r+0x1c0>
 80075f0:	080083f4 	.word	0x080083f4
 80075f4:	080083fe 	.word	0x080083fe
 80075f8:	08005101 	.word	0x08005101
 80075fc:	08007355 	.word	0x08007355
 8007600:	080083fa 	.word	0x080083fa

08007604 <__sfputc_r>:
 8007604:	6893      	ldr	r3, [r2, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	b410      	push	{r4}
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	da08      	bge.n	8007622 <__sfputc_r+0x1e>
 8007610:	6994      	ldr	r4, [r2, #24]
 8007612:	42a3      	cmp	r3, r4
 8007614:	db01      	blt.n	800761a <__sfputc_r+0x16>
 8007616:	290a      	cmp	r1, #10
 8007618:	d103      	bne.n	8007622 <__sfputc_r+0x1e>
 800761a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761e:	f000 ba45 	b.w	8007aac <__swbuf_r>
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	1c58      	adds	r0, r3, #1
 8007626:	6010      	str	r0, [r2, #0]
 8007628:	7019      	strb	r1, [r3, #0]
 800762a:	4608      	mov	r0, r1
 800762c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007630:	4770      	bx	lr

08007632 <__sfputs_r>:
 8007632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4614      	mov	r4, r2
 800763a:	18d5      	adds	r5, r2, r3
 800763c:	42ac      	cmp	r4, r5
 800763e:	d101      	bne.n	8007644 <__sfputs_r+0x12>
 8007640:	2000      	movs	r0, #0
 8007642:	e007      	b.n	8007654 <__sfputs_r+0x22>
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	463a      	mov	r2, r7
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff ffda 	bl	8007604 <__sfputc_r>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d1f3      	bne.n	800763c <__sfputs_r+0xa>
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007658 <_vfiprintf_r>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	b09d      	sub	sp, #116	; 0x74
 8007660:	4614      	mov	r4, r2
 8007662:	4698      	mov	r8, r3
 8007664:	4606      	mov	r6, r0
 8007666:	b118      	cbz	r0, 8007670 <_vfiprintf_r+0x18>
 8007668:	6a03      	ldr	r3, [r0, #32]
 800766a:	b90b      	cbnz	r3, 8007670 <_vfiprintf_r+0x18>
 800766c:	f7fe f99a 	bl	80059a4 <__sinit>
 8007670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007672:	07d9      	lsls	r1, r3, #31
 8007674:	d405      	bmi.n	8007682 <_vfiprintf_r+0x2a>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	059a      	lsls	r2, r3, #22
 800767a:	d402      	bmi.n	8007682 <_vfiprintf_r+0x2a>
 800767c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800767e:	f7fe fb70 	bl	8005d62 <__retarget_lock_acquire_recursive>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	071b      	lsls	r3, r3, #28
 8007686:	d501      	bpl.n	800768c <_vfiprintf_r+0x34>
 8007688:	692b      	ldr	r3, [r5, #16]
 800768a:	b99b      	cbnz	r3, 80076b4 <_vfiprintf_r+0x5c>
 800768c:	4629      	mov	r1, r5
 800768e:	4630      	mov	r0, r6
 8007690:	f000 fa4a 	bl	8007b28 <__swsetup_r>
 8007694:	b170      	cbz	r0, 80076b4 <_vfiprintf_r+0x5c>
 8007696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007698:	07dc      	lsls	r4, r3, #31
 800769a:	d504      	bpl.n	80076a6 <_vfiprintf_r+0x4e>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b01d      	add	sp, #116	; 0x74
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	0598      	lsls	r0, r3, #22
 80076aa:	d4f7      	bmi.n	800769c <_vfiprintf_r+0x44>
 80076ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ae:	f7fe fb59 	bl	8005d64 <__retarget_lock_release_recursive>
 80076b2:	e7f3      	b.n	800769c <_vfiprintf_r+0x44>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	2320      	movs	r3, #32
 80076ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076be:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c2:	2330      	movs	r3, #48	; 0x30
 80076c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007878 <_vfiprintf_r+0x220>
 80076c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076cc:	f04f 0901 	mov.w	r9, #1
 80076d0:	4623      	mov	r3, r4
 80076d2:	469a      	mov	sl, r3
 80076d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d8:	b10a      	cbz	r2, 80076de <_vfiprintf_r+0x86>
 80076da:	2a25      	cmp	r2, #37	; 0x25
 80076dc:	d1f9      	bne.n	80076d2 <_vfiprintf_r+0x7a>
 80076de:	ebba 0b04 	subs.w	fp, sl, r4
 80076e2:	d00b      	beq.n	80076fc <_vfiprintf_r+0xa4>
 80076e4:	465b      	mov	r3, fp
 80076e6:	4622      	mov	r2, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffa1 	bl	8007632 <__sfputs_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	f000 80a9 	beq.w	8007848 <_vfiprintf_r+0x1f0>
 80076f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f8:	445a      	add	r2, fp
 80076fa:	9209      	str	r2, [sp, #36]	; 0x24
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80a1 	beq.w	8007848 <_vfiprintf_r+0x1f0>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007710:	f10a 0a01 	add.w	sl, sl, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	9307      	str	r3, [sp, #28]
 8007718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771c:	931a      	str	r3, [sp, #104]	; 0x68
 800771e:	4654      	mov	r4, sl
 8007720:	2205      	movs	r2, #5
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	4854      	ldr	r0, [pc, #336]	; (8007878 <_vfiprintf_r+0x220>)
 8007728:	f7f8 fd72 	bl	8000210 <memchr>
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	b9d8      	cbnz	r0, 8007768 <_vfiprintf_r+0x110>
 8007730:	06d1      	lsls	r1, r2, #27
 8007732:	bf44      	itt	mi
 8007734:	2320      	movmi	r3, #32
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773a:	0713      	lsls	r3, r2, #28
 800773c:	bf44      	itt	mi
 800773e:	232b      	movmi	r3, #43	; 0x2b
 8007740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b2a      	cmp	r3, #42	; 0x2a
 800774a:	d015      	beq.n	8007778 <_vfiprintf_r+0x120>
 800774c:	9a07      	ldr	r2, [sp, #28]
 800774e:	4654      	mov	r4, sl
 8007750:	2000      	movs	r0, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	4621      	mov	r1, r4
 8007758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775c:	3b30      	subs	r3, #48	; 0x30
 800775e:	2b09      	cmp	r3, #9
 8007760:	d94d      	bls.n	80077fe <_vfiprintf_r+0x1a6>
 8007762:	b1b0      	cbz	r0, 8007792 <_vfiprintf_r+0x13a>
 8007764:	9207      	str	r2, [sp, #28]
 8007766:	e014      	b.n	8007792 <_vfiprintf_r+0x13a>
 8007768:	eba0 0308 	sub.w	r3, r0, r8
 800776c:	fa09 f303 	lsl.w	r3, r9, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	46a2      	mov	sl, r4
 8007776:	e7d2      	b.n	800771e <_vfiprintf_r+0xc6>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	1d19      	adds	r1, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	9103      	str	r1, [sp, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfbb      	ittet	lt
 8007784:	425b      	neglt	r3, r3
 8007786:	f042 0202 	orrlt.w	r2, r2, #2
 800778a:	9307      	strge	r3, [sp, #28]
 800778c:	9307      	strlt	r3, [sp, #28]
 800778e:	bfb8      	it	lt
 8007790:	9204      	strlt	r2, [sp, #16]
 8007792:	7823      	ldrb	r3, [r4, #0]
 8007794:	2b2e      	cmp	r3, #46	; 0x2e
 8007796:	d10c      	bne.n	80077b2 <_vfiprintf_r+0x15a>
 8007798:	7863      	ldrb	r3, [r4, #1]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d134      	bne.n	8007808 <_vfiprintf_r+0x1b0>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	1d1a      	adds	r2, r3, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfb8      	it	lt
 80077aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ae:	3402      	adds	r4, #2
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007888 <_vfiprintf_r+0x230>
 80077b6:	7821      	ldrb	r1, [r4, #0]
 80077b8:	2203      	movs	r2, #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	f7f8 fd28 	bl	8000210 <memchr>
 80077c0:	b138      	cbz	r0, 80077d2 <_vfiprintf_r+0x17a>
 80077c2:	9b04      	ldr	r3, [sp, #16]
 80077c4:	eba0 000a 	sub.w	r0, r0, sl
 80077c8:	2240      	movs	r2, #64	; 0x40
 80077ca:	4082      	lsls	r2, r0
 80077cc:	4313      	orrs	r3, r2
 80077ce:	3401      	adds	r4, #1
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d6:	4829      	ldr	r0, [pc, #164]	; (800787c <_vfiprintf_r+0x224>)
 80077d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077dc:	2206      	movs	r2, #6
 80077de:	f7f8 fd17 	bl	8000210 <memchr>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d03f      	beq.n	8007866 <_vfiprintf_r+0x20e>
 80077e6:	4b26      	ldr	r3, [pc, #152]	; (8007880 <_vfiprintf_r+0x228>)
 80077e8:	bb1b      	cbnz	r3, 8007832 <_vfiprintf_r+0x1da>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	3307      	adds	r3, #7
 80077ee:	f023 0307 	bic.w	r3, r3, #7
 80077f2:	3308      	adds	r3, #8
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	443b      	add	r3, r7
 80077fa:	9309      	str	r3, [sp, #36]	; 0x24
 80077fc:	e768      	b.n	80076d0 <_vfiprintf_r+0x78>
 80077fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007802:	460c      	mov	r4, r1
 8007804:	2001      	movs	r0, #1
 8007806:	e7a6      	b.n	8007756 <_vfiprintf_r+0xfe>
 8007808:	2300      	movs	r3, #0
 800780a:	3401      	adds	r4, #1
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	4619      	mov	r1, r3
 8007810:	f04f 0c0a 	mov.w	ip, #10
 8007814:	4620      	mov	r0, r4
 8007816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781a:	3a30      	subs	r2, #48	; 0x30
 800781c:	2a09      	cmp	r2, #9
 800781e:	d903      	bls.n	8007828 <_vfiprintf_r+0x1d0>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0c6      	beq.n	80077b2 <_vfiprintf_r+0x15a>
 8007824:	9105      	str	r1, [sp, #20]
 8007826:	e7c4      	b.n	80077b2 <_vfiprintf_r+0x15a>
 8007828:	fb0c 2101 	mla	r1, ip, r1, r2
 800782c:	4604      	mov	r4, r0
 800782e:	2301      	movs	r3, #1
 8007830:	e7f0      	b.n	8007814 <_vfiprintf_r+0x1bc>
 8007832:	ab03      	add	r3, sp, #12
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	462a      	mov	r2, r5
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <_vfiprintf_r+0x22c>)
 800783a:	a904      	add	r1, sp, #16
 800783c:	4630      	mov	r0, r6
 800783e:	f7fd fc5f 	bl	8005100 <_printf_float>
 8007842:	4607      	mov	r7, r0
 8007844:	1c78      	adds	r0, r7, #1
 8007846:	d1d6      	bne.n	80077f6 <_vfiprintf_r+0x19e>
 8007848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784a:	07d9      	lsls	r1, r3, #31
 800784c:	d405      	bmi.n	800785a <_vfiprintf_r+0x202>
 800784e:	89ab      	ldrh	r3, [r5, #12]
 8007850:	059a      	lsls	r2, r3, #22
 8007852:	d402      	bmi.n	800785a <_vfiprintf_r+0x202>
 8007854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007856:	f7fe fa85 	bl	8005d64 <__retarget_lock_release_recursive>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	065b      	lsls	r3, r3, #25
 800785e:	f53f af1d 	bmi.w	800769c <_vfiprintf_r+0x44>
 8007862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007864:	e71c      	b.n	80076a0 <_vfiprintf_r+0x48>
 8007866:	ab03      	add	r3, sp, #12
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	462a      	mov	r2, r5
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <_vfiprintf_r+0x22c>)
 800786e:	a904      	add	r1, sp, #16
 8007870:	4630      	mov	r0, r6
 8007872:	f7fd fee9 	bl	8005648 <_printf_i>
 8007876:	e7e4      	b.n	8007842 <_vfiprintf_r+0x1ea>
 8007878:	080083f4 	.word	0x080083f4
 800787c:	080083fe 	.word	0x080083fe
 8007880:	08005101 	.word	0x08005101
 8007884:	08007633 	.word	0x08007633
 8007888:	080083fa 	.word	0x080083fa

0800788c <__sflush_r>:
 800788c:	898a      	ldrh	r2, [r1, #12]
 800788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	0710      	lsls	r0, r2, #28
 8007896:	460c      	mov	r4, r1
 8007898:	d458      	bmi.n	800794c <__sflush_r+0xc0>
 800789a:	684b      	ldr	r3, [r1, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	dc05      	bgt.n	80078ac <__sflush_r+0x20>
 80078a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dc02      	bgt.n	80078ac <__sflush_r+0x20>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	d0f9      	beq.n	80078a6 <__sflush_r+0x1a>
 80078b2:	2300      	movs	r3, #0
 80078b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078b8:	682f      	ldr	r7, [r5, #0]
 80078ba:	6a21      	ldr	r1, [r4, #32]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	d032      	beq.n	8007926 <__sflush_r+0x9a>
 80078c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	075a      	lsls	r2, r3, #29
 80078c6:	d505      	bpl.n	80078d4 <__sflush_r+0x48>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	1ac0      	subs	r0, r0, r3
 80078cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078ce:	b10b      	cbz	r3, 80078d4 <__sflush_r+0x48>
 80078d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078d2:	1ac0      	subs	r0, r0, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	4602      	mov	r2, r0
 80078d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078da:	6a21      	ldr	r1, [r4, #32]
 80078dc:	4628      	mov	r0, r5
 80078de:	47b0      	blx	r6
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	d106      	bne.n	80078f4 <__sflush_r+0x68>
 80078e6:	6829      	ldr	r1, [r5, #0]
 80078e8:	291d      	cmp	r1, #29
 80078ea:	d82b      	bhi.n	8007944 <__sflush_r+0xb8>
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <__sflush_r+0x108>)
 80078ee:	410a      	asrs	r2, r1
 80078f0:	07d6      	lsls	r6, r2, #31
 80078f2:	d427      	bmi.n	8007944 <__sflush_r+0xb8>
 80078f4:	2200      	movs	r2, #0
 80078f6:	6062      	str	r2, [r4, #4]
 80078f8:	04d9      	lsls	r1, r3, #19
 80078fa:	6922      	ldr	r2, [r4, #16]
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	d504      	bpl.n	800790a <__sflush_r+0x7e>
 8007900:	1c42      	adds	r2, r0, #1
 8007902:	d101      	bne.n	8007908 <__sflush_r+0x7c>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b903      	cbnz	r3, 800790a <__sflush_r+0x7e>
 8007908:	6560      	str	r0, [r4, #84]	; 0x54
 800790a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800790c:	602f      	str	r7, [r5, #0]
 800790e:	2900      	cmp	r1, #0
 8007910:	d0c9      	beq.n	80078a6 <__sflush_r+0x1a>
 8007912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007916:	4299      	cmp	r1, r3
 8007918:	d002      	beq.n	8007920 <__sflush_r+0x94>
 800791a:	4628      	mov	r0, r5
 800791c:	f7ff f89e 	bl	8006a5c <_free_r>
 8007920:	2000      	movs	r0, #0
 8007922:	6360      	str	r0, [r4, #52]	; 0x34
 8007924:	e7c0      	b.n	80078a8 <__sflush_r+0x1c>
 8007926:	2301      	movs	r3, #1
 8007928:	4628      	mov	r0, r5
 800792a:	47b0      	blx	r6
 800792c:	1c41      	adds	r1, r0, #1
 800792e:	d1c8      	bne.n	80078c2 <__sflush_r+0x36>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0c5      	beq.n	80078c2 <__sflush_r+0x36>
 8007936:	2b1d      	cmp	r3, #29
 8007938:	d001      	beq.n	800793e <__sflush_r+0xb2>
 800793a:	2b16      	cmp	r3, #22
 800793c:	d101      	bne.n	8007942 <__sflush_r+0xb6>
 800793e:	602f      	str	r7, [r5, #0]
 8007940:	e7b1      	b.n	80078a6 <__sflush_r+0x1a>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	e7ad      	b.n	80078a8 <__sflush_r+0x1c>
 800794c:	690f      	ldr	r7, [r1, #16]
 800794e:	2f00      	cmp	r7, #0
 8007950:	d0a9      	beq.n	80078a6 <__sflush_r+0x1a>
 8007952:	0793      	lsls	r3, r2, #30
 8007954:	680e      	ldr	r6, [r1, #0]
 8007956:	bf08      	it	eq
 8007958:	694b      	ldreq	r3, [r1, #20]
 800795a:	600f      	str	r7, [r1, #0]
 800795c:	bf18      	it	ne
 800795e:	2300      	movne	r3, #0
 8007960:	eba6 0807 	sub.w	r8, r6, r7
 8007964:	608b      	str	r3, [r1, #8]
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	dd9c      	ble.n	80078a6 <__sflush_r+0x1a>
 800796c:	6a21      	ldr	r1, [r4, #32]
 800796e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007970:	4643      	mov	r3, r8
 8007972:	463a      	mov	r2, r7
 8007974:	4628      	mov	r0, r5
 8007976:	47b0      	blx	r6
 8007978:	2800      	cmp	r0, #0
 800797a:	dc06      	bgt.n	800798a <__sflush_r+0xfe>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e78e      	b.n	80078a8 <__sflush_r+0x1c>
 800798a:	4407      	add	r7, r0
 800798c:	eba8 0800 	sub.w	r8, r8, r0
 8007990:	e7e9      	b.n	8007966 <__sflush_r+0xda>
 8007992:	bf00      	nop
 8007994:	dfbffffe 	.word	0xdfbffffe

08007998 <_fflush_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	690b      	ldr	r3, [r1, #16]
 800799c:	4605      	mov	r5, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b913      	cbnz	r3, 80079a8 <_fflush_r+0x10>
 80079a2:	2500      	movs	r5, #0
 80079a4:	4628      	mov	r0, r5
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	b118      	cbz	r0, 80079b2 <_fflush_r+0x1a>
 80079aa:	6a03      	ldr	r3, [r0, #32]
 80079ac:	b90b      	cbnz	r3, 80079b2 <_fflush_r+0x1a>
 80079ae:	f7fd fff9 	bl	80059a4 <__sinit>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f3      	beq.n	80079a2 <_fflush_r+0xa>
 80079ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079bc:	07d0      	lsls	r0, r2, #31
 80079be:	d404      	bmi.n	80079ca <_fflush_r+0x32>
 80079c0:	0599      	lsls	r1, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_fflush_r+0x32>
 80079c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c6:	f7fe f9cc 	bl	8005d62 <__retarget_lock_acquire_recursive>
 80079ca:	4628      	mov	r0, r5
 80079cc:	4621      	mov	r1, r4
 80079ce:	f7ff ff5d 	bl	800788c <__sflush_r>
 80079d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d4:	07da      	lsls	r2, r3, #31
 80079d6:	4605      	mov	r5, r0
 80079d8:	d4e4      	bmi.n	80079a4 <_fflush_r+0xc>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	059b      	lsls	r3, r3, #22
 80079de:	d4e1      	bmi.n	80079a4 <_fflush_r+0xc>
 80079e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e2:	f7fe f9bf 	bl	8005d64 <__retarget_lock_release_recursive>
 80079e6:	e7dd      	b.n	80079a4 <_fflush_r+0xc>

080079e8 <__swhatbuf_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	b096      	sub	sp, #88	; 0x58
 80079f4:	4615      	mov	r5, r2
 80079f6:	461e      	mov	r6, r3
 80079f8:	da0d      	bge.n	8007a16 <__swhatbuf_r+0x2e>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	bf0c      	ite	eq
 8007a06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a0a:	2340      	movne	r3, #64	; 0x40
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	b016      	add	sp, #88	; 0x58
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	466a      	mov	r2, sp
 8007a18:	f000 f8f8 	bl	8007c0c <_fstat_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	dbec      	blt.n	80079fa <__swhatbuf_r+0x12>
 8007a20:	9901      	ldr	r1, [sp, #4]
 8007a22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a2a:	4259      	negs	r1, r3
 8007a2c:	4159      	adcs	r1, r3
 8007a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a32:	e7eb      	b.n	8007a0c <__swhatbuf_r+0x24>

08007a34 <__smakebuf_r>:
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a38:	079d      	lsls	r5, r3, #30
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	d507      	bpl.n	8007a50 <__smakebuf_r+0x1c>
 8007a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	ab01      	add	r3, sp, #4
 8007a52:	466a      	mov	r2, sp
 8007a54:	f7ff ffc8 	bl	80079e8 <__swhatbuf_r>
 8007a58:	9900      	ldr	r1, [sp, #0]
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff f871 	bl	8006b44 <_malloc_r>
 8007a62:	b948      	cbnz	r0, 8007a78 <__smakebuf_r+0x44>
 8007a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d4ef      	bmi.n	8007a4c <__smakebuf_r+0x18>
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	e7e3      	b.n	8007a40 <__smakebuf_r+0xc>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	6020      	str	r0, [r4, #0]
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	9b00      	ldr	r3, [sp, #0]
 8007a84:	6163      	str	r3, [r4, #20]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	6120      	str	r0, [r4, #16]
 8007a8a:	b15b      	cbz	r3, 8007aa4 <__smakebuf_r+0x70>
 8007a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 f8cd 	bl	8007c30 <_isatty_r>
 8007a96:	b128      	cbz	r0, 8007aa4 <__smakebuf_r+0x70>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	431d      	orrs	r5, r3
 8007aa8:	81a5      	strh	r5, [r4, #12]
 8007aaa:	e7cf      	b.n	8007a4c <__smakebuf_r+0x18>

08007aac <__swbuf_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	b118      	cbz	r0, 8007abe <__swbuf_r+0x12>
 8007ab6:	6a03      	ldr	r3, [r0, #32]
 8007ab8:	b90b      	cbnz	r3, 8007abe <__swbuf_r+0x12>
 8007aba:	f7fd ff73 	bl	80059a4 <__sinit>
 8007abe:	69a3      	ldr	r3, [r4, #24]
 8007ac0:	60a3      	str	r3, [r4, #8]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	071a      	lsls	r2, r3, #28
 8007ac6:	d525      	bpl.n	8007b14 <__swbuf_r+0x68>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	b31b      	cbz	r3, 8007b14 <__swbuf_r+0x68>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	6922      	ldr	r2, [r4, #16]
 8007ad0:	1a98      	subs	r0, r3, r2
 8007ad2:	6963      	ldr	r3, [r4, #20]
 8007ad4:	b2f6      	uxtb	r6, r6
 8007ad6:	4283      	cmp	r3, r0
 8007ad8:	4637      	mov	r7, r6
 8007ada:	dc04      	bgt.n	8007ae6 <__swbuf_r+0x3a>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7ff ff5a 	bl	8007998 <_fflush_r>
 8007ae4:	b9e0      	cbnz	r0, 8007b20 <__swbuf_r+0x74>
 8007ae6:	68a3      	ldr	r3, [r4, #8]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	701e      	strb	r6, [r3, #0]
 8007af4:	6962      	ldr	r2, [r4, #20]
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d004      	beq.n	8007b06 <__swbuf_r+0x5a>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	07db      	lsls	r3, r3, #31
 8007b00:	d506      	bpl.n	8007b10 <__swbuf_r+0x64>
 8007b02:	2e0a      	cmp	r6, #10
 8007b04:	d104      	bne.n	8007b10 <__swbuf_r+0x64>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7ff ff45 	bl	8007998 <_fflush_r>
 8007b0e:	b938      	cbnz	r0, 8007b20 <__swbuf_r+0x74>
 8007b10:	4638      	mov	r0, r7
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f806 	bl	8007b28 <__swsetup_r>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d0d5      	beq.n	8007acc <__swbuf_r+0x20>
 8007b20:	f04f 37ff 	mov.w	r7, #4294967295
 8007b24:	e7f4      	b.n	8007b10 <__swbuf_r+0x64>
	...

08007b28 <__swsetup_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4b2a      	ldr	r3, [pc, #168]	; (8007bd4 <__swsetup_r+0xac>)
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	460c      	mov	r4, r1
 8007b32:	b118      	cbz	r0, 8007b3c <__swsetup_r+0x14>
 8007b34:	6a03      	ldr	r3, [r0, #32]
 8007b36:	b90b      	cbnz	r3, 8007b3c <__swsetup_r+0x14>
 8007b38:	f7fd ff34 	bl	80059a4 <__sinit>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b42:	0718      	lsls	r0, r3, #28
 8007b44:	d422      	bmi.n	8007b8c <__swsetup_r+0x64>
 8007b46:	06d9      	lsls	r1, r3, #27
 8007b48:	d407      	bmi.n	8007b5a <__swsetup_r+0x32>
 8007b4a:	2309      	movs	r3, #9
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e034      	b.n	8007bc4 <__swsetup_r+0x9c>
 8007b5a:	0758      	lsls	r0, r3, #29
 8007b5c:	d512      	bpl.n	8007b84 <__swsetup_r+0x5c>
 8007b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b60:	b141      	cbz	r1, 8007b74 <__swsetup_r+0x4c>
 8007b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b66:	4299      	cmp	r1, r3
 8007b68:	d002      	beq.n	8007b70 <__swsetup_r+0x48>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7fe ff76 	bl	8006a5c <_free_r>
 8007b70:	2300      	movs	r3, #0
 8007b72:	6363      	str	r3, [r4, #52]	; 0x34
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f043 0308 	orr.w	r3, r3, #8
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	b94b      	cbnz	r3, 8007ba4 <__swsetup_r+0x7c>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9a:	d003      	beq.n	8007ba4 <__swsetup_r+0x7c>
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f7ff ff48 	bl	8007a34 <__smakebuf_r>
 8007ba4:	89a0      	ldrh	r0, [r4, #12]
 8007ba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007baa:	f010 0301 	ands.w	r3, r0, #1
 8007bae:	d00a      	beq.n	8007bc6 <__swsetup_r+0x9e>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60a3      	str	r3, [r4, #8]
 8007bb4:	6963      	ldr	r3, [r4, #20]
 8007bb6:	425b      	negs	r3, r3
 8007bb8:	61a3      	str	r3, [r4, #24]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	b943      	cbnz	r3, 8007bd0 <__swsetup_r+0xa8>
 8007bbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc2:	d1c4      	bne.n	8007b4e <__swsetup_r+0x26>
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	0781      	lsls	r1, r0, #30
 8007bc8:	bf58      	it	pl
 8007bca:	6963      	ldrpl	r3, [r4, #20]
 8007bcc:	60a3      	str	r3, [r4, #8]
 8007bce:	e7f4      	b.n	8007bba <__swsetup_r+0x92>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e7f7      	b.n	8007bc4 <__swsetup_r+0x9c>
 8007bd4:	20000098 	.word	0x20000098

08007bd8 <memmove>:
 8007bd8:	4288      	cmp	r0, r1
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	eb01 0402 	add.w	r4, r1, r2
 8007be0:	d902      	bls.n	8007be8 <memmove+0x10>
 8007be2:	4284      	cmp	r4, r0
 8007be4:	4623      	mov	r3, r4
 8007be6:	d807      	bhi.n	8007bf8 <memmove+0x20>
 8007be8:	1e43      	subs	r3, r0, #1
 8007bea:	42a1      	cmp	r1, r4
 8007bec:	d008      	beq.n	8007c00 <memmove+0x28>
 8007bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf6:	e7f8      	b.n	8007bea <memmove+0x12>
 8007bf8:	4402      	add	r2, r0
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	428a      	cmp	r2, r1
 8007bfe:	d100      	bne.n	8007c02 <memmove+0x2a>
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c0a:	e7f7      	b.n	8007bfc <memmove+0x24>

08007c0c <_fstat_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4d07      	ldr	r5, [pc, #28]	; (8007c2c <_fstat_r+0x20>)
 8007c10:	2300      	movs	r3, #0
 8007c12:	4604      	mov	r4, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	4611      	mov	r1, r2
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	f7fa fa66 	bl	80020ea <_fstat>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d102      	bne.n	8007c28 <_fstat_r+0x1c>
 8007c22:	682b      	ldr	r3, [r5, #0]
 8007c24:	b103      	cbz	r3, 8007c28 <_fstat_r+0x1c>
 8007c26:	6023      	str	r3, [r4, #0]
 8007c28:	bd38      	pop	{r3, r4, r5, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200004b4 	.word	0x200004b4

08007c30 <_isatty_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_isatty_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7fa fa65 	bl	800210a <_isatty>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_isatty_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_isatty_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	200004b4 	.word	0x200004b4

08007c50 <_sbrk_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d06      	ldr	r5, [pc, #24]	; (8007c6c <_sbrk_r+0x1c>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	f7fa fa6e 	bl	800213c <_sbrk>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_sbrk_r+0x1a>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_sbrk_r+0x1a>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	200004b4 	.word	0x200004b4

08007c70 <memcpy>:
 8007c70:	440a      	add	r2, r1
 8007c72:	4291      	cmp	r1, r2
 8007c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c78:	d100      	bne.n	8007c7c <memcpy+0xc>
 8007c7a:	4770      	bx	lr
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c86:	4291      	cmp	r1, r2
 8007c88:	d1f9      	bne.n	8007c7e <memcpy+0xe>
 8007c8a:	bd10      	pop	{r4, pc}

08007c8c <__assert_func>:
 8007c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c8e:	4614      	mov	r4, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <__assert_func+0x2c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4605      	mov	r5, r0
 8007c98:	68d8      	ldr	r0, [r3, #12]
 8007c9a:	b14c      	cbz	r4, 8007cb0 <__assert_func+0x24>
 8007c9c:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <__assert_func+0x30>)
 8007c9e:	9100      	str	r1, [sp, #0]
 8007ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ca4:	4906      	ldr	r1, [pc, #24]	; (8007cc0 <__assert_func+0x34>)
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f000 f872 	bl	8007d90 <fiprintf>
 8007cac:	f000 f882 	bl	8007db4 <abort>
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <__assert_func+0x38>)
 8007cb2:	461c      	mov	r4, r3
 8007cb4:	e7f3      	b.n	8007c9e <__assert_func+0x12>
 8007cb6:	bf00      	nop
 8007cb8:	20000098 	.word	0x20000098
 8007cbc:	0800840f 	.word	0x0800840f
 8007cc0:	0800841c 	.word	0x0800841c
 8007cc4:	0800844a 	.word	0x0800844a

08007cc8 <_calloc_r>:
 8007cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cca:	fba1 2402 	umull	r2, r4, r1, r2
 8007cce:	b94c      	cbnz	r4, 8007ce4 <_calloc_r+0x1c>
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	9201      	str	r2, [sp, #4]
 8007cd4:	f7fe ff36 	bl	8006b44 <_malloc_r>
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b930      	cbnz	r0, 8007cec <_calloc_r+0x24>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	b003      	add	sp, #12
 8007ce2:	bd30      	pop	{r4, r5, pc}
 8007ce4:	220c      	movs	r2, #12
 8007ce6:	6002      	str	r2, [r0, #0]
 8007ce8:	2500      	movs	r5, #0
 8007cea:	e7f8      	b.n	8007cde <_calloc_r+0x16>
 8007cec:	4621      	mov	r1, r4
 8007cee:	f7fd ffba 	bl	8005c66 <memset>
 8007cf2:	e7f4      	b.n	8007cde <_calloc_r+0x16>

08007cf4 <__ascii_mbtowc>:
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	b901      	cbnz	r1, 8007cfa <__ascii_mbtowc+0x6>
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	b142      	cbz	r2, 8007d0e <__ascii_mbtowc+0x1a>
 8007cfc:	b14b      	cbz	r3, 8007d12 <__ascii_mbtowc+0x1e>
 8007cfe:	7813      	ldrb	r3, [r2, #0]
 8007d00:	600b      	str	r3, [r1, #0]
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	1e10      	subs	r0, r2, #0
 8007d06:	bf18      	it	ne
 8007d08:	2001      	movne	r0, #1
 8007d0a:	b002      	add	sp, #8
 8007d0c:	4770      	bx	lr
 8007d0e:	4610      	mov	r0, r2
 8007d10:	e7fb      	b.n	8007d0a <__ascii_mbtowc+0x16>
 8007d12:	f06f 0001 	mvn.w	r0, #1
 8007d16:	e7f8      	b.n	8007d0a <__ascii_mbtowc+0x16>

08007d18 <_realloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4614      	mov	r4, r2
 8007d20:	460e      	mov	r6, r1
 8007d22:	b921      	cbnz	r1, 8007d2e <_realloc_r+0x16>
 8007d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	4611      	mov	r1, r2
 8007d2a:	f7fe bf0b 	b.w	8006b44 <_malloc_r>
 8007d2e:	b92a      	cbnz	r2, 8007d3c <_realloc_r+0x24>
 8007d30:	f7fe fe94 	bl	8006a5c <_free_r>
 8007d34:	4625      	mov	r5, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	f000 f841 	bl	8007dc2 <_malloc_usable_size_r>
 8007d40:	4284      	cmp	r4, r0
 8007d42:	4607      	mov	r7, r0
 8007d44:	d802      	bhi.n	8007d4c <_realloc_r+0x34>
 8007d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d4a:	d812      	bhi.n	8007d72 <_realloc_r+0x5a>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7fe fef8 	bl	8006b44 <_malloc_r>
 8007d54:	4605      	mov	r5, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0ed      	beq.n	8007d36 <_realloc_r+0x1e>
 8007d5a:	42bc      	cmp	r4, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4631      	mov	r1, r6
 8007d60:	bf28      	it	cs
 8007d62:	463a      	movcs	r2, r7
 8007d64:	f7ff ff84 	bl	8007c70 <memcpy>
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7fe fe76 	bl	8006a5c <_free_r>
 8007d70:	e7e1      	b.n	8007d36 <_realloc_r+0x1e>
 8007d72:	4635      	mov	r5, r6
 8007d74:	e7df      	b.n	8007d36 <_realloc_r+0x1e>

08007d76 <__ascii_wctomb>:
 8007d76:	b149      	cbz	r1, 8007d8c <__ascii_wctomb+0x16>
 8007d78:	2aff      	cmp	r2, #255	; 0xff
 8007d7a:	bf85      	ittet	hi
 8007d7c:	238a      	movhi	r3, #138	; 0x8a
 8007d7e:	6003      	strhi	r3, [r0, #0]
 8007d80:	700a      	strbls	r2, [r1, #0]
 8007d82:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d86:	bf98      	it	ls
 8007d88:	2001      	movls	r0, #1
 8007d8a:	4770      	bx	lr
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4770      	bx	lr

08007d90 <fiprintf>:
 8007d90:	b40e      	push	{r1, r2, r3}
 8007d92:	b503      	push	{r0, r1, lr}
 8007d94:	4601      	mov	r1, r0
 8007d96:	ab03      	add	r3, sp, #12
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <fiprintf+0x20>)
 8007d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	f7ff fc59 	bl	8007658 <_vfiprintf_r>
 8007da6:	b002      	add	sp, #8
 8007da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dac:	b003      	add	sp, #12
 8007dae:	4770      	bx	lr
 8007db0:	20000098 	.word	0x20000098

08007db4 <abort>:
 8007db4:	b508      	push	{r3, lr}
 8007db6:	2006      	movs	r0, #6
 8007db8:	f000 f834 	bl	8007e24 <raise>
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	f7fa f961 	bl	8002084 <_exit>

08007dc2 <_malloc_usable_size_r>:
 8007dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc6:	1f18      	subs	r0, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfbc      	itt	lt
 8007dcc:	580b      	ldrlt	r3, [r1, r0]
 8007dce:	18c0      	addlt	r0, r0, r3
 8007dd0:	4770      	bx	lr

08007dd2 <_raise_r>:
 8007dd2:	291f      	cmp	r1, #31
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	460d      	mov	r5, r1
 8007dda:	d904      	bls.n	8007de6 <_raise_r+0x14>
 8007ddc:	2316      	movs	r3, #22
 8007dde:	6003      	str	r3, [r0, #0]
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007de8:	b112      	cbz	r2, 8007df0 <_raise_r+0x1e>
 8007dea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dee:	b94b      	cbnz	r3, 8007e04 <_raise_r+0x32>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f831 	bl	8007e58 <_getpid_r>
 8007df6:	462a      	mov	r2, r5
 8007df8:	4601      	mov	r1, r0
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e00:	f000 b818 	b.w	8007e34 <_kill_r>
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d00a      	beq.n	8007e1e <_raise_r+0x4c>
 8007e08:	1c59      	adds	r1, r3, #1
 8007e0a:	d103      	bne.n	8007e14 <_raise_r+0x42>
 8007e0c:	2316      	movs	r3, #22
 8007e0e:	6003      	str	r3, [r0, #0]
 8007e10:	2001      	movs	r0, #1
 8007e12:	e7e7      	b.n	8007de4 <_raise_r+0x12>
 8007e14:	2400      	movs	r4, #0
 8007e16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4798      	blx	r3
 8007e1e:	2000      	movs	r0, #0
 8007e20:	e7e0      	b.n	8007de4 <_raise_r+0x12>
	...

08007e24 <raise>:
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <raise+0xc>)
 8007e26:	4601      	mov	r1, r0
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f7ff bfd2 	b.w	8007dd2 <_raise_r>
 8007e2e:	bf00      	nop
 8007e30:	20000098 	.word	0x20000098

08007e34 <_kill_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_kill_r+0x20>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	f7fa f90f 	bl	8002064 <_kill>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	d102      	bne.n	8007e50 <_kill_r+0x1c>
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	b103      	cbz	r3, 8007e50 <_kill_r+0x1c>
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	bd38      	pop	{r3, r4, r5, pc}
 8007e52:	bf00      	nop
 8007e54:	200004b4 	.word	0x200004b4

08007e58 <_getpid_r>:
 8007e58:	f7fa b8fc 	b.w	8002054 <_getpid>

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
