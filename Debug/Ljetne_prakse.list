
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005b40  08005b40  00015b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005be0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000090  08005c70  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005c70  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceb3  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002179  00000000  00000000  0002cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008af  00000000  00000000  0002fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235d2  00000000  00000000  0003050f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001057e  00000000  00000000  00053ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d827d  00000000  00000000  0006405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003744  00000000  00000000  0013c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b28 	.word	0x08005b28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08005b28 	.word	0x08005b28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <SendToLCD+0x24>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 8000ee6:	e009      	b.n	8000efc <SendToLCD+0x38>
			buffer[0] = 0x00;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	727b      	strb	r3, [r7, #9]
		break;
 8000ef0:	e004      	b.n	8000efc <SendToLCD+0x38>
			buffer[0] = 0x40;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	727b      	strb	r3, [r7, #9]
		break;
 8000efa:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f937 	bl	8001174 <TransmitI2CDataToLCD>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <InitializeLCD>:

static void InitializeLCD(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 8000f24:	f000 f8de 	bl	80010e4 <InitializeLCDI2C>
 8000f28:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff ffc9 	bl	8000ec4 <SendToLCD>
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 fde5 	bl	8001b04 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8000f3a:	2138      	movs	r1, #56	; 0x38
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ffc1 	bl	8000ec4 <SendToLCD>
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f44:	2032      	movs	r0, #50	; 0x32
 8000f46:	f000 fddd 	bl	8001b04 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8000f4a:	210c      	movs	r1, #12
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffb9 	bl	8000ec4 <SendToLCD>
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f54:	2032      	movs	r0, #50	; 0x32
 8000f56:	f000 fdd5 	bl	8001b04 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8000f5a:	2106      	movs	r1, #6
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff ffb1 	bl	8000ec4 <SendToLCD>
 8000f62:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f64:	2032      	movs	r0, #50	; 0x32
 8000f66:	f000 fdcd 	bl	8001b04 <HAL_Delay>

//	ASSERT(lcd_state != LCD_OK);

	HAL_Delay(1000);
 8000f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6e:	f000 fdc9 	bl	8001b04 <HAL_Delay>

	lcd_state = ClearLCD();
 8000f72:	f000 f85f 	bl	8001034 <ClearLCD>
 8000f76:	6078      	str	r0, [r7, #4]

//	ASSERT(lcd_state != LCD_OK);
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SendDataToLCD>:

static int SendDataToLCD(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 8000f8e:	e011      	b.n	8000fb4 <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <SendDataToLCD+0x54>)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff ff92 	bl	8000ec4 <SendToLCD>
 8000fa0:	6078      	str	r0, [r7, #4]
		i++;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	dc08      	bgt.n	8000fc6 <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <SendDataToLCD+0x54>)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e7      	bne.n	8000f90 <SendDataToLCD+0x10>
 8000fc0:	e002      	b.n	8000fc8 <SendDataToLCD+0x48>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <SendDataToLCD+0x48>
		{
			break;
 8000fc6:	bf00      	nop
		}
	}

	return lcd_state;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	72fb      	strb	r3, [r7, #11]

	switch (row)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <MoveLCDCursor+0x20>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d007      	beq.n	8001006 <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 8000ff6:	e00d      	b.n	8001014 <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001000:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8001002:	72fb      	strb	r3, [r7, #11]
		break;
 8001004:	e006      	b.n	8001014 <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800100e:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8001010:	72fb      	strb	r3, [r7, #11]
		break;
 8001012:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	4619      	mov	r1, r3
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ff53 	bl	8000ec4 <SendToLCD>
 800101e:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 8001026:	2305      	movs	r3, #5
 8001028:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <ClearLCD>:

static int ClearLCD(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff41 	bl	8000ec4 <SendToLCD>
 8001042:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fd5d 	bl	8001b04 <HAL_Delay>

	if (lcd_state != LCD_OK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 8001050:	2304      	movs	r3, #4
 8001052:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return &lcd_interface;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <GetLCDInterface+0x10>)
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000000 	.word	0x20000000

08001074 <InitializeI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeI2CGPIOPins(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN | I2C_SDA_PIN;
 8001096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109a:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 80010a8:	2304      	movs	r3, #4
 80010aa:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT, &gpio);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <InitializeI2CGPIOPins+0x6c>)
 80010b4:	f001 fa4a 	bl	800254c <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 80010c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <InitializeI2CGPIOPins+0x68>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	InitializeI2CGPIOPins();
 80010ea:	f7ff ffc3 	bl	8001074 <InitializeI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <InitializeLCDI2C+0x80>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <InitializeLCDI2C+0x80>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <InitializeLCDI2C+0x80>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <InitializeLCDI2C+0x84>)
 800110c:	2210      	movs	r2, #16
 800110e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <InitializeLCDI2C+0x84>)
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <InitializeLCDI2C+0x88>)
 8001116:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <InitializeLCDI2C+0x84>)
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <InitializeLCDI2C+0x8c>)
 800111c:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <InitializeLCDI2C+0x84>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <InitializeLCDI2C+0x84>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <InitializeLCDI2C+0x84>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <InitializeLCDI2C+0x84>)
 8001132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001136:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <InitializeLCDI2C+0x84>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <InitializeLCDI2C+0x84>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <InitializeLCDI2C+0x84>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <InitializeLCDI2C+0x84>)
 800114c:	f001 fbc6 	bl	80028dc <HAL_I2C_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	200000ac 	.word	0x200000ac
 800116c:	40005400 	.word	0x40005400
 8001170:	000186a0 	.word	0x000186a0

08001174 <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2302      	movs	r3, #2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	217c      	movs	r1, #124	; 0x7c
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <TransmitI2CDataToLCD+0x2c>)
 8001188:	f001 fcec 	bl	8002b64 <HAL_I2C_Master_Transmit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 8001192:	2303      	movs	r3, #3
 8001194:	e000      	b.n	8001198 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000ac 	.word	0x200000ac

080011a4 <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 80011aa:	f7ff ff59 	bl	8001060 <GetLCDInterface>
 80011ae:	6078      	str	r0, [r7, #4]

//	ASSERT(plcd == NULL);

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2210      	movs	r2, #16
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f8fa 	bl	80043b0 <memset>

	plcd->init();
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4798      	blx	r3
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 80011da:	f7ff ff41 	bl	8001060 <GetLCDInterface>
 80011de:	6138      	str	r0, [r7, #16]

//	ASSERT(plcd == NULL);

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	dc12      	bgt.n	800120c <LCDWriteData+0x42>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	dc0f      	bgt.n	800120c <LCDWriteData+0x42>
				"\n\rStupac: %d",
				row);
		return;
	}

	sprintf(plcd->buffer, pdata);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f8bd 	bl	8004370 <siprintf>

	//lcd_state = plcd->clear_data();
	lcd_state = plcd->move_cursor(row, col);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	4798      	blx	r3
 8001200:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4798      	blx	r3
 8001208:	6178      	str	r0, [r7, #20]
 800120a:	e000      	b.n	800120e <LCDWriteData+0x44>
		return;
 800120c:	bf00      	nop
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
				"\n\tError: %d",
				lcd_state);
	}
}
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ADC1_Init_Pins>:
* This function configures the hardware resources for ADC1
* @param hadc: ADC handle pointer
* @retval None
*/
void ADC1_Init_Pins(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <ADC1_Init_Pins+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d127      	bne.n	8001286 <ADC1_Init_Pins+0x72>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <ADC1_Init_Pins+0x80>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <ADC1_Init_Pins+0x80>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <ADC1_Init_Pins+0x80>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <ADC1_Init_Pins+0x80>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <ADC1_Init_Pins+0x80>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <ADC1_Init_Pins+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126e:	2302      	movs	r3, #2
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <ADC1_Init_Pins+0x84>)
 8001282:	f001 f963 	bl	800254c <HAL_GPIO_Init>
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012000 	.word	0x40012000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  ADC1_Init_Pins(&hadc1);
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <ADC1_Init+0xa0>)
 80012b0:	f7ff ffb0 	bl	8001214 <ADC1_Init_Pins>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <ADC1_Init+0xa0>)
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <ADC1_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <ADC1_Init+0xa0>)
 80012bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <ADC1_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <ADC1_Init+0xa0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <ADC1_Init+0xa0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <ADC1_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <ADC1_Init+0xa0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <ADC1_Init+0xa0>)
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <ADC1_Init+0xa8>)
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <ADC1_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <ADC1_Init+0xa0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <ADC1_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <ADC1_Init+0xa0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <ADC1_Init+0xa0>)
 8001304:	f000 fc22 	bl	8001b4c <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <ADC1_Init+0x76>
  {
    Error_Handler();
 800130e:	f000 f9d5 	bl	80016bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001312:	2301      	movs	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <ADC1_Init+0xa0>)
 8001324:	f000 fdfe 	bl	8001f24 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <ADC1_Init+0x96>
  {
    Error_Handler();
 800132e:	f000 f9c5 	bl	80016bc <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000110 	.word	0x20000110
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <LED_control_with_ADC>:
/**
  * @brief  This function makes the LED blink with the frequency set by the potentiometer using ADC.
  * @retval None
  */
void LED_control_with_ADC (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800134c:	4826      	ldr	r0, [pc, #152]	; (80013e8 <LED_control_with_ADC+0xa0>)
 800134e:	f000 fc4b 	bl	8001be8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <LED_control_with_ADC+0xa0>)
 8001358:	f000 fd4b 	bl	8001df2 <HAL_ADC_PollForConversion>
	readVal = HAL_ADC_GetValue(&hadc1);
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <LED_control_with_ADC+0xa0>)
 800135e:	f000 fdd3 	bl	8001f08 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <LED_control_with_ADC+0xa4>)
 8001368:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <LED_control_with_ADC+0xa0>)
 800136c:	f000 fd0e 	bl	8001d8c <HAL_ADC_Stop>
	// log e (x)
	//	  delay_factor = 0.01 + 0.119*log10((1 + (double)readVal));
	// log 10 (x)
	//	  delay_factor = 0.01 + 0.27406*log10((1 + (double)readVal));
	// exponential
	delay_factor = 0.1 * pow(1.0005623126, (double)readVal);
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <LED_control_with_ADC+0xa4>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8dd 	bl	8000534 <__aeabi_ui2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b11 	vmov	d1, r2, r3
 8001382:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80013d8 <LED_control_with_ADC+0x90>
 8001386:	f003 fc97 	bl	8004cb8 <pow>
 800138a:	ec51 0b10 	vmov	r0, r1, d0
 800138e:	a314      	add	r3, pc, #80	; (adr r3, 80013e0 <LED_control_with_ADC+0x98>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f948 	bl	8000628 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <LED_control_with_ADC+0xa8>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(1000*delay_factor);
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <LED_control_with_ADC+0xa8>)
 80013a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <LED_control_with_ADC+0xac>)
 80013ae:	f7ff f93b 	bl	8000628 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fbe5 	bl	8000b88 <__aeabi_d2uiz>
 80013be:	4603      	mov	r3, r0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fb9f 	bl	8001b04 <HAL_Delay>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013c6:	2120      	movs	r1, #32
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <LED_control_with_ADC+0xb0>)
 80013ca:	f001 fa6c 	bl	80028a6 <HAL_GPIO_TogglePin>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	a0a3a252 	.word	0xa0a3a252
 80013dc:	3ff0024d 	.word	0x3ff0024d
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fb99999 	.word	0x3fb99999
 80013e8:	20000110 	.word	0x20000110
 80013ec:	20000100 	.word	0x20000100
 80013f0:	20000108 	.word	0x20000108
 80013f4:	408f4000 	.word	0x408f4000
 80013f8:	40020000 	.word	0x40020000

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f000 fb0d 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f825 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f000 f8e9 	bl	80015e0 <MX_GPIO_Init>
  MX_I2C3_Init();
 800140e:	f000 f88f 	bl	8001530 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001412:	f000 f8bb 	bl	800158c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC1_Init();
 8001416:	f7ff ff41 	bl	800129c <ADC1_Init>
  LCDInit();
 800141a:	f7ff fec3 	bl	80011a4 <LCDInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	char pdata[14] = "Prikaz";
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <main+0x54>)
 8001420:	463b      	mov	r3, r7
 8001422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	3304      	adds	r3, #4
 800142a:	8019      	strh	r1, [r3, #0]
 800142c:	3302      	adds	r3, #2
 800142e:	0c0a      	lsrs	r2, r1, #16
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f8c3 2003 	str.w	r2, [r3, #3]
	LCDWriteData(0,0,&pdata[0]);
 800143c:	463b      	mov	r3, r7
 800143e:	461a      	mov	r2, r3
 8001440:	2100      	movs	r1, #0
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fec1 	bl	80011ca <LCDWriteData>
    /* USER CODE BEGIN 3 */
	LED_control_with_ADC();
 8001448:	f7ff ff7e 	bl	8001348 <LED_control_with_ADC>
  {
 800144c:	e7e7      	b.n	800141e <main+0x22>
 800144e:	bf00      	nop
 8001450:	08005b40 	.word	0x08005b40

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	; 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f002 ffa4 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <SystemClock_Config+0xd4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <SystemClock_Config+0xd4>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <SystemClock_Config+0xd4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <SystemClock_Config+0xd8>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 f9e2 	bl	80038ac <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ee:	f000 f8e5 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe82 	bl	8003218 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800151a:	f000 f8cf 	bl	80016bc <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	; 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C3_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C3_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C3_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C3_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C3_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C3_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C3_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C3_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C3_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C3_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C3_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C3_Init+0x50>)
 800156e:	f001 f9b5 	bl	80028dc <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f8a0 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000158 	.word	0x20000158
 8001584:	40005c00 	.word	0x40005c00
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f002 fc10 	bl	8003de8 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f875 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001ac 	.word	0x200001ac
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <MX_GPIO_Init+0xd0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <MX_GPIO_Init+0xd4>)
 800166c:	f001 f902 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	480c      	ldr	r0, [pc, #48]	; (80016b8 <MX_GPIO_Init+0xd8>)
 8001688:	f000 ff60 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800168c:	2320      	movs	r3, #32
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_GPIO_Init+0xd4>)
 80016a4:	f000 ff52 	bl	800254c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020800 	.word	0x40020800

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001706:	2007      	movs	r0, #7
 8001708:	f000 feec 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a42      	ldr	r2, [pc, #264]	; (8001840 <HAL_I2C_MspInit+0x128>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12d      	bne.n	8001796 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a40      	ldr	r2, [pc, #256]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001768:	2304      	movs	r3, #4
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4835      	ldr	r0, [pc, #212]	; (8001848 <HAL_I2C_MspInit+0x130>)
 8001774:	f000 feea 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a30      	ldr	r2, [pc, #192]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001794:	e050      	b.n	8001838 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2c      	ldr	r2, [pc, #176]	; (800184c <HAL_I2C_MspInit+0x134>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d14b      	bne.n	8001838 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017de:	2312      	movs	r3, #18
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ea:	2304      	movs	r3, #4
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <HAL_I2C_MspInit+0x138>)
 80017f6:	f000 fea9 	bl	800254c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800180c:	2304      	movs	r3, #4
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <HAL_I2C_MspInit+0x13c>)
 8001818:	f000 fe98 	bl	800254c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 8001826:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_I2C_MspInit+0x12c>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40005400 	.word	0x40005400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020400 	.word	0x40020400
 800184c:	40005c00 	.word	0x40005c00
 8001850:	40020800 	.word	0x40020800
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <HAL_UART_MspInit+0x84>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12b      	bne.n	80018d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_UART_MspInit+0x88>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_UART_MspInit+0x88>)
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_UART_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_UART_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_UART_MspInit+0x88>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_UART_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b2:	230c      	movs	r3, #12
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c2:	2307      	movs	r3, #7
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 80018ce:	f000 fe3d 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f8c6 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f002 fd28 	bl	80043c0 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20020000 	.word	0x20020000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200001f4 	.word	0x200001f4
 80019a4:	20000348 	.word	0x20000348

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 fce7 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fcfd 	bl	80013fc <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a10:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 8001a14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a18:	20000344 	.word	0x20000344

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 fd4b 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fe38 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fd55 	bl	8002532 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 fd2b 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000020 	.word	0x20000020
 8001abc:	20000028 	.word	0x20000028
 8001ac0:	20000024 	.word	0x20000024

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	200001f8 	.word	0x200001f8

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200001f8 	.word	0x200001f8

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000028 	.word	0x20000028

08001b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e033      	b.n	8001bca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f831 	bl	8001bd2 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b92:	f023 0302 	bic.w	r3, r3, #2
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 faf2 	bl	8002188 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bba:	e001      	b.n	8001bc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Start+0x1a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0b2      	b.n	8001d68 <HAL_ADC_Start+0x180>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d018      	beq.n	8001c4a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <HAL_ADC_Start+0x18c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_ADC_Start+0x190>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d17a      	bne.n	8001d4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f023 0206 	bic.w	r2, r3, #6
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca4:	e002      	b.n	8001cac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_ADC_Start+0x194>)
 8001cb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12a      	bne.n	8001d24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <HAL_ADC_Start+0x198>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d015      	beq.n	8001d04 <HAL_ADC_Start+0x11c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_ADC_Start+0x19c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Start+0x106>
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_ADC_Start+0x194>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_ADC_Start+0x1a0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d136      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_ADC_Start+0x194>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d130      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d129      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e020      	b.n	8001d66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_ADC_Start+0x198>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11b      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d114      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e00b      	b.n	8001d66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	20000020 	.word	0x20000020
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	40012300 	.word	0x40012300
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40012100 	.word	0x40012100
 8001d88:	40012200 	.word	0x40012200

08001d8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Stop+0x16>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e021      	b.n	8001de6 <HAL_ADC_Stop+0x5a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0e:	d113      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1e:	d10b      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e063      	b.n	8001f00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff fe58 	bl	8001aec <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e3e:	e021      	b.n	8001e84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d01d      	beq.n	8001e84 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_PollForConversion+0x6c>
 8001e4e:	f7ff fe4d 	bl	8001aec <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d212      	bcs.n	8001e84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d00b      	beq.n	8001e84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03d      	b.n	8001f00 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d1d6      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0212 	mvn.w	r2, #18
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d123      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11f      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e113      	b.n	8002168 <HAL_ADC_ConfigChannel+0x244>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d925      	bls.n	8001f9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68d9      	ldr	r1, [r3, #12]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	3b1e      	subs	r3, #30
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	400a      	ands	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68d9      	ldr	r1, [r3, #12]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3b1e      	subs	r3, #30
 8001f90:	409a      	lsls	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	e022      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6919      	ldr	r1, [r3, #16]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4403      	add	r3, r0
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d824      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b05      	subs	r3, #5
 8001ffc:	221f      	movs	r2, #31
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	400a      	ands	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b05      	subs	r3, #5
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
 8002032:	e04c      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d824      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b23      	subs	r3, #35	; 0x23
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b23      	subs	r3, #35	; 0x23
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
 8002084:	e023      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b41      	subs	r3, #65	; 0x41
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b41      	subs	r3, #65	; 0x41
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_ADC_ConfigChannel+0x250>)
 80020d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_ADC_ConfigChannel+0x254>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d10f      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1d8>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d10b      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_ADC_ConfigChannel+0x254>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12b      	bne.n	800215e <HAL_ADC_ConfigChannel+0x23a>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_ADC_ConfigChannel+0x258>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x1f4>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b11      	cmp	r3, #17
 8002116:	d122      	bne.n	800215e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_ADC_ConfigChannel+0x258>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d111      	bne.n	800215e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_ADC_ConfigChannel+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ADC_ConfigChannel+0x260>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	0c9a      	lsrs	r2, r3, #18
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002150:	e002      	b.n	8002158 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3b01      	subs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40012300 	.word	0x40012300
 8002178:	40012000 	.word	0x40012000
 800217c:	10000012 	.word	0x10000012
 8002180:	20000020 	.word	0x20000020
 8002184:	431bde83 	.word	0x431bde83

08002188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b79      	ldr	r3, [pc, #484]	; (8002378 <ADC_Init+0x1f0>)
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	021a      	lsls	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	4a58      	ldr	r2, [pc, #352]	; (800237c <ADC_Init+0x1f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e00f      	b.n	8002286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002284:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e1b      	ldrb	r3, [r3, #24]
 80022a0:	005a      	lsls	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	035a      	lsls	r2, r3, #13
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e007      	b.n	80022fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	3b01      	subs	r3, #1
 8002318:	051a      	lsls	r2, r3, #20
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233e:	025a      	lsls	r2, r3, #9
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	029a      	lsls	r2, r3, #10
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012300 	.word	0x40012300
 800237c:	0f000001 	.word	0x0f000001

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff47 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff5c 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffb0 	bl	80024a0 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e165      	b.n	8002834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8154 	bne.w	800282e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80ae 	beq.w	800282e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_GPIO_Init+0x300>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a5c      	ldr	r2, [pc, #368]	; (800284c <HAL_GPIO_Init+0x300>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_GPIO_Init+0x300>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a58      	ldr	r2, [pc, #352]	; (8002850 <HAL_GPIO_Init+0x304>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4f      	ldr	r2, [pc, #316]	; (8002854 <HAL_GPIO_Init+0x308>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x21a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_GPIO_Init+0x30c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x216>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_GPIO_Init+0x310>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x212>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_GPIO_Init+0x314>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <HAL_GPIO_Init+0x318>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x20a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4a      	ldr	r2, [pc, #296]	; (8002868 <HAL_GPIO_Init+0x31c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x206>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a49      	ldr	r2, [pc, #292]	; (800286c <HAL_GPIO_Init+0x320>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x202>
 800274a:	2306      	movs	r3, #6
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800274e:	2307      	movs	r3, #7
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x21c>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x304>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_GPIO_Init+0x324>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x324>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_GPIO_Init+0x324>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae96 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	400b      	ands	r3, r1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e12b      	b.n	8002b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe ff08 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002940:	f000 fd5c 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8002944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a81      	ldr	r2, [pc, #516]	; (8002b50 <HAL_I2C_Init+0x274>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d807      	bhi.n	8002960 <HAL_I2C_Init+0x84>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_I2C_Init+0x278>)
 8002954:	4293      	cmp	r3, r2
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e006      	b.n	800296e <HAL_I2C_Init+0x92>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a7d      	ldr	r2, [pc, #500]	; (8002b58 <HAL_I2C_Init+0x27c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0e7      	b.n	8002b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a78      	ldr	r2, [pc, #480]	; (8002b5c <HAL_I2C_Init+0x280>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0c9b      	lsrs	r3, r3, #18
 8002980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_I2C_Init+0x274>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d802      	bhi.n	80029b0 <HAL_I2C_Init+0xd4>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3301      	adds	r3, #1
 80029ae:	e009      	b.n	80029c4 <HAL_I2C_Init+0xe8>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_I2C_Init+0x284>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	3301      	adds	r3, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	495c      	ldr	r1, [pc, #368]	; (8002b50 <HAL_I2C_Init+0x274>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d819      	bhi.n	8002a18 <HAL_I2C_Init+0x13c>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e59      	subs	r1, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f8:	400b      	ands	r3, r1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_I2C_Init+0x138>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e59      	subs	r1, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	e051      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e04f      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <HAL_I2C_Init+0x168>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e012      	b.n	8002a6a <HAL_I2C_Init+0x18e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Init+0x196>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <HAL_I2C_Init+0x1bc>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e58      	subs	r0, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	440b      	add	r3, r1
 8002a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Init+0x1dc>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6809      	ldr	r1, [r1, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6911      	ldr	r1, [r2, #16]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	000186a0 	.word	0x000186a0
 8002b54:	001e847f 	.word	0x001e847f
 8002b58:	003d08ff 	.word	0x003d08ff
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	10624dd3 	.word	0x10624dd3

08002b64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	817b      	strh	r3, [r7, #10]
 8002b74:	4613      	mov	r3, r2
 8002b76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7fe ffb8 	bl	8001aec <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	f040 80e0 	bne.w	8002d4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	4970      	ldr	r1, [pc, #448]	; (8002d58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f964 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0d3      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_I2C_Master_Transmit+0x50>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0cc      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d007      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2221      	movs	r2, #33	; 0x21
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f89c 	bl	8002d60 <I2C_MasterRequestWrite>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e08d      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c48:	e066      	b.n	8002d18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa22 	bl	8003098 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06b      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x188>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	6a39      	ldr	r1, [r7, #32]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa19 	bl	8003128 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d107      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e01a      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d194      	bne.n	8002c4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	00100002 	.word	0x00100002
 8002d5c:	ffff0000 	.word	0xffff0000

08002d60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d006      	beq.n	8002d8a <I2C_MasterRequestWrite+0x2a>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d003      	beq.n	8002d8a <I2C_MasterRequestWrite+0x2a>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d88:	d108      	bne.n	8002d9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e00b      	b.n	8002db4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d107      	bne.n	8002db4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f84f 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e035      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002df2:	897b      	ldrh	r3, [r7, #10]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	e01b      	b.n	8002e3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e04:	897b      	ldrh	r3, [r7, #10]
 8002e06:	11db      	asrs	r3, r3, #7
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0306 	and.w	r3, r3, #6
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f063 030f 	orn	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <I2C_MasterRequestWrite+0xfc>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f898 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e010      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <I2C_MasterRequestWrite+0x100>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f888 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	00010008 	.word	0x00010008
 8002e60:	00010002 	.word	0x00010002

08002e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e74:	e048      	b.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d044      	beq.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fe35 	bl	8001aec <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d139      	bne.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10d      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	e00c      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d116      	bne.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e023      	b.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10d      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	e00c      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d093      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	e071      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d123      	bne.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e067      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d041      	beq.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fe fd90 	bl	8001aec <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d136      	bne.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10c      	bne.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e00b      	b.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e021      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d10c      	bne.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e00b      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f af6d 	bne.w	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f886 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d028      	beq.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe fd15 	bl	8001aec <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d016      	beq.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d1c3      	bne.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	e034      	b.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f83e 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d028      	beq.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fe fccd 	bl	8001aec <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11d      	bne.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d016      	beq.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d1c3      	bne.n	8003136 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d11b      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cc      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d90c      	bls.n	8003254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d044      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e067      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4934      	ldr	r1, [pc, #208]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fe fbf0 	bl	8001aec <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fbec 	bl	8001aec <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d20c      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f855 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490a      	ldr	r1, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fb50 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08005b50 	.word	0x08005b50
 80033dc:	20000020 	.word	0x20000020
 80033e0:	20000024 	.word	0x20000024

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000020 	.word	0x20000020

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0a9b      	lsrs	r3, r3, #10
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08005b60 	.word	0x08005b60

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffdc 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0b5b      	lsrs	r3, r3, #13
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	08005b60 	.word	0x08005b60

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b0ae      	sub	sp, #184	; 0xb8
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003472:	4bcb      	ldr	r3, [pc, #812]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b0c      	cmp	r3, #12
 800347c:	f200 8206 	bhi.w	800388c <HAL_RCC_GetSysClockFreq+0x440>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	0800388d 	.word	0x0800388d
 8003490:	0800388d 	.word	0x0800388d
 8003494:	0800388d 	.word	0x0800388d
 8003498:	080034c5 	.word	0x080034c5
 800349c:	0800388d 	.word	0x0800388d
 80034a0:	0800388d 	.word	0x0800388d
 80034a4:	0800388d 	.word	0x0800388d
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	0800388d 	.word	0x0800388d
 80034b0:	0800388d 	.word	0x0800388d
 80034b4:	0800388d 	.word	0x0800388d
 80034b8:	080036bd 	.word	0x080036bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4bb9      	ldr	r3, [pc, #740]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80034be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034c2:	e1e7      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4bb8      	ldr	r3, [pc, #736]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ca:	e1e3      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4bb4      	ldr	r3, [pc, #720]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d8:	4bb1      	ldr	r3, [pc, #708]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d071      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4bae      	ldr	r3, [pc, #696]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80034f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4621      	mov	r1, r4
 8003524:	1a51      	subs	r1, r2, r1
 8003526:	6439      	str	r1, [r7, #64]	; 0x40
 8003528:	4629      	mov	r1, r5
 800352a:	eb63 0301 	sbc.w	r3, r3, r1
 800352e:	647b      	str	r3, [r7, #68]	; 0x44
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800353c:	4649      	mov	r1, r9
 800353e:	018b      	lsls	r3, r1, #6
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003546:	4641      	mov	r1, r8
 8003548:	018a      	lsls	r2, r1, #6
 800354a:	4641      	mov	r1, r8
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003550:	4649      	mov	r1, r9
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003564:	4649      	mov	r1, r9
 8003566:	00cb      	lsls	r3, r1, #3
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356e:	4641      	mov	r1, r8
 8003570:	00ca      	lsls	r2, r1, #3
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	4603      	mov	r3, r0
 8003578:	4622      	mov	r2, r4
 800357a:	189b      	adds	r3, r3, r2
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 800357e:	462b      	mov	r3, r5
 8003580:	460a      	mov	r2, r1
 8003582:	eb42 0303 	adc.w	r3, r2, r3
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003594:	4629      	mov	r1, r5
 8003596:	024b      	lsls	r3, r1, #9
 8003598:	4621      	mov	r1, r4
 800359a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800359e:	4621      	mov	r1, r4
 80035a0:	024a      	lsls	r2, r1, #9
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035b8:	f7fd fb06 	bl	8000bc8 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c6:	e067      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e2:	2300      	movs	r3, #0
 80035e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4621      	mov	r1, r4
 8003604:	1a51      	subs	r1, r2, r1
 8003606:	62b9      	str	r1, [r7, #40]	; 0x28
 8003608:	4629      	mov	r1, r5
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800361c:	4649      	mov	r1, r9
 800361e:	018b      	lsls	r3, r1, #6
 8003620:	4641      	mov	r1, r8
 8003622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003626:	4641      	mov	r1, r8
 8003628:	018a      	lsls	r2, r1, #6
 800362a:	4641      	mov	r1, r8
 800362c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003630:	4649      	mov	r1, r9
 8003632:	eb63 0b01 	sbc.w	fp, r3, r1
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364a:	4692      	mov	sl, r2
 800364c:	469b      	mov	fp, r3
 800364e:	4623      	mov	r3, r4
 8003650:	eb1a 0303 	adds.w	r3, sl, r3
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	462b      	mov	r3, r5
 8003658:	eb4b 0303 	adc.w	r3, fp, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800366a:	4629      	mov	r1, r5
 800366c:	028b      	lsls	r3, r1, #10
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003674:	4621      	mov	r1, r4
 8003676:	028a      	lsls	r2, r1, #10
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003680:	2200      	movs	r2, #0
 8003682:	673b      	str	r3, [r7, #112]	; 0x70
 8003684:	677a      	str	r2, [r7, #116]	; 0x74
 8003686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800368a:	f7fd fa9d 	bl	8000bc8 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4613      	mov	r3, r2
 8003694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036ba:	e0eb      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d06b      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	2200      	movs	r2, #0
 80036dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	2300      	movs	r3, #0
 80036ea:	667b      	str	r3, [r7, #100]	; 0x64
 80036ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036f0:	4622      	mov	r2, r4
 80036f2:	462b      	mov	r3, r5
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0159      	lsls	r1, r3, #5
 80036fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003702:	0150      	lsls	r0, r2, #5
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4621      	mov	r1, r4
 800370a:	1a51      	subs	r1, r2, r1
 800370c:	61b9      	str	r1, [r7, #24]
 800370e:	4629      	mov	r1, r5
 8003710:	eb63 0301 	sbc.w	r3, r3, r1
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003722:	4659      	mov	r1, fp
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	4651      	mov	r1, sl
 8003728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372c:	4651      	mov	r1, sl
 800372e:	018a      	lsls	r2, r1, #6
 8003730:	4651      	mov	r1, sl
 8003732:	ebb2 0801 	subs.w	r8, r2, r1
 8003736:	4659      	mov	r1, fp
 8003738:	eb63 0901 	sbc.w	r9, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003750:	4690      	mov	r8, r2
 8003752:	4699      	mov	r9, r3
 8003754:	4623      	mov	r3, r4
 8003756:	eb18 0303 	adds.w	r3, r8, r3
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	462b      	mov	r3, r5
 800375e:	eb49 0303 	adc.w	r3, r9, r3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003770:	4629      	mov	r1, r5
 8003772:	024b      	lsls	r3, r1, #9
 8003774:	4621      	mov	r1, r4
 8003776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800377a:	4621      	mov	r1, r4
 800377c:	024a      	lsls	r2, r1, #9
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003786:	2200      	movs	r2, #0
 8003788:	65bb      	str	r3, [r7, #88]	; 0x58
 800378a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800378c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003790:	f7fd fa1a 	bl	8000bc8 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379e:	e065      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x420>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ac:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	2200      	movs	r2, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	4611      	mov	r1, r2
 80037b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037bc:	653b      	str	r3, [r7, #80]	; 0x50
 80037be:	2300      	movs	r3, #0
 80037c0:	657b      	str	r3, [r7, #84]	; 0x54
 80037c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037c6:	4642      	mov	r2, r8
 80037c8:	464b      	mov	r3, r9
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4641      	mov	r1, r8
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	4649      	mov	r1, r9
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037f8:	4659      	mov	r1, fp
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4651      	mov	r1, sl
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4651      	mov	r1, sl
 8003808:	1a54      	subs	r4, r2, r1
 800380a:	4659      	mov	r1, fp
 800380c:	eb63 0501 	sbc.w	r5, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	464b      	mov	r3, r9
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383e:	4629      	mov	r1, r5
 8003840:	028b      	lsls	r3, r1, #10
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003848:	4621      	mov	r1, r4
 800384a:	028a      	lsls	r2, r1, #10
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003854:	2200      	movs	r2, #0
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800385a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800385e:	f7fd f9b3 	bl	8000bc8 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4613      	mov	r3, r2
 8003868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0f1b      	lsrs	r3, r3, #28
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800387a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800387e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800388a:	e003      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800388e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003898:	4618      	mov	r0, r3
 800389a:	37b8      	adds	r7, #184	; 0xb8
 800389c:	46bd      	mov	sp, r7
 800389e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400

080038ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e28d      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8083 	beq.w	80039d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038cc:	4b94      	ldr	r3, [pc, #592]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d019      	beq.n	800390c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038d8:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038e4:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x124>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e25a      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x90>
 800392e:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7b      	ldr	r2, [pc, #492]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xcc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0xb4>
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a72      	ldr	r2, [pc, #456]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xcc>
 8003960:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6b      	ldr	r2, [pc, #428]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe f8b4 	bl	8001aec <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fe f8b0 	bl	8001aec <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e21f      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xdc>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe f8a0 	bl	8001aec <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe f89c 	bl	8001aec <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e20b      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b57      	ldr	r3, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x104>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d06f      	beq.n	8003abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039de:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ea:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039f6:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x186>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1d3      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4937      	ldr	r1, [pc, #220]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fe f849 	bl	8001aec <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fe f845 	bl	8001aec <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1b4      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe f828 	bl	8001aec <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fe f824 	bl	8001aec <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e193      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe f808 	bl	8001aec <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fe f804 	bl	8001aec <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e173      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x234>
 8003afe:	e01b      	b.n	8003b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fd fff1 	bl	8001aec <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7fd ffed 	bl	8001aec <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d907      	bls.n	8003b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e15c      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	4b8a      	ldr	r3, [pc, #552]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ea      	bne.n	8003b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8097 	beq.w	8003c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b83      	ldr	r3, [pc, #524]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b7c      	ldr	r3, [pc, #496]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd ffad 	bl	8001aec <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fd ffa9 	bl	8001aec <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e118      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x31e>
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	e01c      	b.n	8003c04 <HAL_RCC_OscConfig+0x358>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x340>
 8003bd2:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a60      	ldr	r2, [pc, #384]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0x358>
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a59      	ldr	r2, [pc, #356]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	f023 0304 	bic.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd ff6e 	bl	8001aec <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd ff6a 	bl	8001aec <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0d7      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ee      	beq.n	8003c14 <HAL_RCC_OscConfig+0x368>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd ff58 	bl	8001aec <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd ff54 	bl	8001aec <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0c1      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4a3a      	ldr	r2, [pc, #232]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ad 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d060      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d145      	bne.n	8003d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd ff28 	bl	8001aec <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fd ff24 	bl	8001aec <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e093      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	491b      	ldr	r1, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fd fef9 	bl	8001aec <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd fef5 	bl	8001aec <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e064      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x452>
 8003d1c:	e05c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fd fee2 	bl	8001aec <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd fede 	bl	8001aec <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e04d      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x480>
 8003d4a:	e045      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e040      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_RCC_OscConfig+0x538>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d129      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d122      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d119      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10f      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e042      	b.n	8003e80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fd22 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	; 0x24
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f82b 	bl	8003e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b0c0      	sub	sp, #256	; 0x100
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	68d9      	ldr	r1, [r3, #12]
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	ea40 0301 	orr.w	r3, r0, r1
 8003eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ee0:	f021 010c 	bic.w	r1, r1, #12
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	6999      	ldr	r1, [r3, #24]
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	ea40 0301 	orr.w	r3, r0, r1
 8003f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <UART_SetConfig+0x2cc>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0xa0>
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <UART_SetConfig+0x2d0>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d104      	bne.n	8003f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7ff fa7c 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f30:	e003      	b.n	8003f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7ff fa63 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8003f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f44:	f040 810c 	bne.w	8004160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f62:	415b      	adcs	r3, r3
 8003f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	eb12 0801 	adds.w	r8, r2, r1
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb43 0901 	adc.w	r9, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb18 0303 	adds.w	r3, r8, r3
 8003f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f98:	462b      	mov	r3, r5
 8003f9a:	eb49 0303 	adc.w	r3, r9, r3
 8003f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	18db      	adds	r3, r3, r3
 8003fba:	653b      	str	r3, [r7, #80]	; 0x50
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	eb42 0303 	adc.w	r3, r2, r3
 8003fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fcc:	f7fc fdfc 	bl	8000bc8 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b61      	ldr	r3, [pc, #388]	; (800415c <UART_SetConfig+0x2d4>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011c      	lsls	r4, r3, #4
 8003fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004000:	4641      	mov	r1, r8
 8004002:	eb12 0a01 	adds.w	sl, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0b01 	adc.w	fp, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004020:	4692      	mov	sl, r2
 8004022:	469b      	mov	fp, r3
 8004024:	4643      	mov	r3, r8
 8004026:	eb1a 0303 	adds.w	r3, sl, r3
 800402a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800402e:	464b      	mov	r3, r9
 8004030:	eb4b 0303 	adc.w	r3, fp, r3
 8004034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
 800405a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800405e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004062:	f7fc fdb1 	bl	8000bc8 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4611      	mov	r1, r2
 800406c:	4b3b      	ldr	r3, [pc, #236]	; (800415c <UART_SetConfig+0x2d4>)
 800406e:	fba3 2301 	umull	r2, r3, r3, r1
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2264      	movs	r2, #100	; 0x64
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	1acb      	subs	r3, r1, r3
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <UART_SetConfig+0x2d4>)
 8004084:	fba3 2302 	umull	r2, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004090:	441c      	add	r4, r3
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800409c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80040ac:	415b      	adcs	r3, r3
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040b4:	4641      	mov	r1, r8
 80040b6:	1851      	adds	r1, r2, r1
 80040b8:	6339      	str	r1, [r7, #48]	; 0x30
 80040ba:	4649      	mov	r1, r9
 80040bc:	414b      	adcs	r3, r1
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040cc:	4659      	mov	r1, fp
 80040ce:	00cb      	lsls	r3, r1, #3
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d6:	4651      	mov	r1, sl
 80040d8:	00ca      	lsls	r2, r1, #3
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	4642      	mov	r2, r8
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040e8:	464b      	mov	r3, r9
 80040ea:	460a      	mov	r2, r1
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004108:	460b      	mov	r3, r1
 800410a:	18db      	adds	r3, r3, r3
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
 800410e:	4613      	mov	r3, r2
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800411a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800411e:	f7fc fd53 	bl	8000bc8 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <UART_SetConfig+0x2d4>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	; 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3332      	adds	r3, #50	; 0x32
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <UART_SetConfig+0x2d4>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f003 0207 	and.w	r2, r3, #7
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4422      	add	r2, r4
 800414e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004150:	e106      	b.n	8004360 <UART_SetConfig+0x4d8>
 8004152:	bf00      	nop
 8004154:	40011000 	.word	0x40011000
 8004158:	40011400 	.word	0x40011400
 800415c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800416a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800416e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004172:	4642      	mov	r2, r8
 8004174:	464b      	mov	r3, r9
 8004176:	1891      	adds	r1, r2, r2
 8004178:	6239      	str	r1, [r7, #32]
 800417a:	415b      	adcs	r3, r3
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
 800417e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004182:	4641      	mov	r1, r8
 8004184:	1854      	adds	r4, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb43 0501 	adc.w	r5, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	00eb      	lsls	r3, r5, #3
 8004196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041a8:	464b      	mov	r3, r9
 80041aa:	eb45 0303 	adc.w	r3, r5, r3
 80041ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ce:	4629      	mov	r1, r5
 80041d0:	008b      	lsls	r3, r1, #2
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d8:	4621      	mov	r1, r4
 80041da:	008a      	lsls	r2, r1, #2
 80041dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041e0:	f7fc fcf2 	bl	8000bc8 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b60      	ldr	r3, [pc, #384]	; (800436c <UART_SetConfig+0x4e4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	61b9      	str	r1, [r7, #24]
 800420c:	415b      	adcs	r3, r3
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	4641      	mov	r1, r8
 8004216:	1851      	adds	r1, r2, r1
 8004218:	6139      	str	r1, [r7, #16]
 800421a:	4649      	mov	r1, r9
 800421c:	414b      	adcs	r3, r1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800422c:	4659      	mov	r1, fp
 800422e:	00cb      	lsls	r3, r1, #3
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004236:	4651      	mov	r1, sl
 8004238:	00ca      	lsls	r2, r1, #3
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	4603      	mov	r3, r0
 8004240:	4642      	mov	r2, r8
 8004242:	189b      	adds	r3, r3, r2
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004248:	464b      	mov	r3, r9
 800424a:	460a      	mov	r2, r1
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	67bb      	str	r3, [r7, #120]	; 0x78
 800425e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800427e:	f7fc fca3 	bl	8000bc8 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b38      	ldr	r3, [pc, #224]	; (800436c <UART_SetConfig+0x4e4>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	; 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	; 0x32
 800429c:	4a33      	ldr	r2, [pc, #204]	; (800436c <UART_SetConfig+0x4e4>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a8:	441c      	add	r4, r3
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	673b      	str	r3, [r7, #112]	; 0x70
 80042b2:	677a      	str	r2, [r7, #116]	; 0x74
 80042b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042fa:	464b      	mov	r3, r9
 80042fc:	460a      	mov	r2, r1
 80042fe:	eb42 0303 	adc.w	r3, r2, r3
 8004302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	667a      	str	r2, [r7, #100]	; 0x64
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800431c:	4649      	mov	r1, r9
 800431e:	008b      	lsls	r3, r1, #2
 8004320:	4641      	mov	r1, r8
 8004322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004326:	4641      	mov	r1, r8
 8004328:	008a      	lsls	r2, r1, #2
 800432a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800432e:	f7fc fc4b 	bl	8000bc8 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <UART_SetConfig+0x4e4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <UART_SetConfig+0x4e4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436c:	51eb851f 	.word	0x51eb851f

08004370 <siprintf>:
 8004370:	b40e      	push	{r1, r2, r3}
 8004372:	b500      	push	{lr}
 8004374:	b09c      	sub	sp, #112	; 0x70
 8004376:	ab1d      	add	r3, sp, #116	; 0x74
 8004378:	9002      	str	r0, [sp, #8]
 800437a:	9006      	str	r0, [sp, #24]
 800437c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004380:	4809      	ldr	r0, [pc, #36]	; (80043a8 <siprintf+0x38>)
 8004382:	9107      	str	r1, [sp, #28]
 8004384:	9104      	str	r1, [sp, #16]
 8004386:	4909      	ldr	r1, [pc, #36]	; (80043ac <siprintf+0x3c>)
 8004388:	f853 2b04 	ldr.w	r2, [r3], #4
 800438c:	9105      	str	r1, [sp, #20]
 800438e:	6800      	ldr	r0, [r0, #0]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	a902      	add	r1, sp, #8
 8004394:	f000 f992 	bl	80046bc <_svfiprintf_r>
 8004398:	9b02      	ldr	r3, [sp, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	b01c      	add	sp, #112	; 0x70
 80043a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a4:	b003      	add	sp, #12
 80043a6:	4770      	bx	lr
 80043a8:	20000078 	.word	0x20000078
 80043ac:	ffff0208 	.word	0xffff0208

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	; (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000078 	.word	0x20000078

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4d0d      	ldr	r5, [pc, #52]	; (8004404 <__libc_init_array+0x38>)
 80043d0:	4c0d      	ldr	r4, [pc, #52]	; (8004408 <__libc_init_array+0x3c>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	2600      	movs	r6, #0
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	4d0b      	ldr	r5, [pc, #44]	; (800440c <__libc_init_array+0x40>)
 80043de:	4c0c      	ldr	r4, [pc, #48]	; (8004410 <__libc_init_array+0x44>)
 80043e0:	f001 fba2 	bl	8005b28 <_init>
 80043e4:	1b64      	subs	r4, r4, r5
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	2600      	movs	r6, #0
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	08005bd8 	.word	0x08005bd8
 8004408:	08005bd8 	.word	0x08005bd8
 800440c:	08005bd8 	.word	0x08005bd8
 8004410:	08005bdc 	.word	0x08005bdc

08004414 <__retarget_lock_acquire_recursive>:
 8004414:	4770      	bx	lr

08004416 <__retarget_lock_release_recursive>:
 8004416:	4770      	bx	lr

08004418 <_free_r>:
 8004418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800441a:	2900      	cmp	r1, #0
 800441c:	d044      	beq.n	80044a8 <_free_r+0x90>
 800441e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004422:	9001      	str	r0, [sp, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f1a1 0404 	sub.w	r4, r1, #4
 800442a:	bfb8      	it	lt
 800442c:	18e4      	addlt	r4, r4, r3
 800442e:	f000 f8df 	bl	80045f0 <__malloc_lock>
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <_free_r+0x94>)
 8004434:	9801      	ldr	r0, [sp, #4]
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	b933      	cbnz	r3, 8004448 <_free_r+0x30>
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	6014      	str	r4, [r2, #0]
 800443e:	b003      	add	sp, #12
 8004440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004444:	f000 b8da 	b.w	80045fc <__malloc_unlock>
 8004448:	42a3      	cmp	r3, r4
 800444a:	d908      	bls.n	800445e <_free_r+0x46>
 800444c:	6825      	ldr	r5, [r4, #0]
 800444e:	1961      	adds	r1, r4, r5
 8004450:	428b      	cmp	r3, r1
 8004452:	bf01      	itttt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	1949      	addeq	r1, r1, r5
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	e7ed      	b.n	800443a <_free_r+0x22>
 800445e:	461a      	mov	r2, r3
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b10b      	cbz	r3, 8004468 <_free_r+0x50>
 8004464:	42a3      	cmp	r3, r4
 8004466:	d9fa      	bls.n	800445e <_free_r+0x46>
 8004468:	6811      	ldr	r1, [r2, #0]
 800446a:	1855      	adds	r5, r2, r1
 800446c:	42a5      	cmp	r5, r4
 800446e:	d10b      	bne.n	8004488 <_free_r+0x70>
 8004470:	6824      	ldr	r4, [r4, #0]
 8004472:	4421      	add	r1, r4
 8004474:	1854      	adds	r4, r2, r1
 8004476:	42a3      	cmp	r3, r4
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	d1e0      	bne.n	800443e <_free_r+0x26>
 800447c:	681c      	ldr	r4, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	6053      	str	r3, [r2, #4]
 8004482:	440c      	add	r4, r1
 8004484:	6014      	str	r4, [r2, #0]
 8004486:	e7da      	b.n	800443e <_free_r+0x26>
 8004488:	d902      	bls.n	8004490 <_free_r+0x78>
 800448a:	230c      	movs	r3, #12
 800448c:	6003      	str	r3, [r0, #0]
 800448e:	e7d6      	b.n	800443e <_free_r+0x26>
 8004490:	6825      	ldr	r5, [r4, #0]
 8004492:	1961      	adds	r1, r4, r5
 8004494:	428b      	cmp	r3, r1
 8004496:	bf04      	itt	eq
 8004498:	6819      	ldreq	r1, [r3, #0]
 800449a:	685b      	ldreq	r3, [r3, #4]
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	bf04      	itt	eq
 80044a0:	1949      	addeq	r1, r1, r5
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	6054      	str	r4, [r2, #4]
 80044a6:	e7ca      	b.n	800443e <_free_r+0x26>
 80044a8:	b003      	add	sp, #12
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	2000033c 	.word	0x2000033c

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0e      	ldr	r6, [pc, #56]	; (80044ec <sbrk_aligned+0x3c>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 fba6 	bl	8004c0c <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 fba1 	bl	8004c0c <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d00a      	beq.n	80044e4 <sbrk_aligned+0x34>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d007      	beq.n	80044e8 <sbrk_aligned+0x38>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb96 	bl	8004c0c <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d101      	bne.n	80044e8 <sbrk_aligned+0x38>
 80044e4:	f04f 34ff 	mov.w	r4, #4294967295
 80044e8:	4620      	mov	r0, r4
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	20000340 	.word	0x20000340

080044f0 <_malloc_r>:
 80044f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4607      	mov	r7, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d905      	bls.n	8004518 <_malloc_r+0x28>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	2600      	movs	r6, #0
 8004512:	4630      	mov	r0, r6
 8004514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004518:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045ec <_malloc_r+0xfc>
 800451c:	f000 f868 	bl	80045f0 <__malloc_lock>
 8004520:	f8d8 3000 	ldr.w	r3, [r8]
 8004524:	461c      	mov	r4, r3
 8004526:	bb5c      	cbnz	r4, 8004580 <_malloc_r+0x90>
 8004528:	4629      	mov	r1, r5
 800452a:	4638      	mov	r0, r7
 800452c:	f7ff ffc0 	bl	80044b0 <sbrk_aligned>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	4604      	mov	r4, r0
 8004534:	d155      	bne.n	80045e2 <_malloc_r+0xf2>
 8004536:	f8d8 4000 	ldr.w	r4, [r8]
 800453a:	4626      	mov	r6, r4
 800453c:	2e00      	cmp	r6, #0
 800453e:	d145      	bne.n	80045cc <_malloc_r+0xdc>
 8004540:	2c00      	cmp	r4, #0
 8004542:	d048      	beq.n	80045d6 <_malloc_r+0xe6>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	4631      	mov	r1, r6
 8004548:	4638      	mov	r0, r7
 800454a:	eb04 0903 	add.w	r9, r4, r3
 800454e:	f000 fb5d 	bl	8004c0c <_sbrk_r>
 8004552:	4581      	cmp	r9, r0
 8004554:	d13f      	bne.n	80045d6 <_malloc_r+0xe6>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	1a6d      	subs	r5, r5, r1
 800455a:	4629      	mov	r1, r5
 800455c:	4638      	mov	r0, r7
 800455e:	f7ff ffa7 	bl	80044b0 <sbrk_aligned>
 8004562:	3001      	adds	r0, #1
 8004564:	d037      	beq.n	80045d6 <_malloc_r+0xe6>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	442b      	add	r3, r5
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	f8d8 3000 	ldr.w	r3, [r8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d038      	beq.n	80045e6 <_malloc_r+0xf6>
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	42a2      	cmp	r2, r4
 8004578:	d12b      	bne.n	80045d2 <_malloc_r+0xe2>
 800457a:	2200      	movs	r2, #0
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e00f      	b.n	80045a0 <_malloc_r+0xb0>
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	1b52      	subs	r2, r2, r5
 8004584:	d41f      	bmi.n	80045c6 <_malloc_r+0xd6>
 8004586:	2a0b      	cmp	r2, #11
 8004588:	d917      	bls.n	80045ba <_malloc_r+0xca>
 800458a:	1961      	adds	r1, r4, r5
 800458c:	42a3      	cmp	r3, r4
 800458e:	6025      	str	r5, [r4, #0]
 8004590:	bf18      	it	ne
 8004592:	6059      	strne	r1, [r3, #4]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	bf08      	it	eq
 8004598:	f8c8 1000 	streq.w	r1, [r8]
 800459c:	5162      	str	r2, [r4, r5]
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	4638      	mov	r0, r7
 80045a2:	f104 060b 	add.w	r6, r4, #11
 80045a6:	f000 f829 	bl	80045fc <__malloc_unlock>
 80045aa:	f026 0607 	bic.w	r6, r6, #7
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	1af2      	subs	r2, r6, r3
 80045b2:	d0ae      	beq.n	8004512 <_malloc_r+0x22>
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	50a3      	str	r3, [r4, r2]
 80045b8:	e7ab      	b.n	8004512 <_malloc_r+0x22>
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	6862      	ldr	r2, [r4, #4]
 80045be:	d1dd      	bne.n	800457c <_malloc_r+0x8c>
 80045c0:	f8c8 2000 	str.w	r2, [r8]
 80045c4:	e7ec      	b.n	80045a0 <_malloc_r+0xb0>
 80045c6:	4623      	mov	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7ac      	b.n	8004526 <_malloc_r+0x36>
 80045cc:	4634      	mov	r4, r6
 80045ce:	6876      	ldr	r6, [r6, #4]
 80045d0:	e7b4      	b.n	800453c <_malloc_r+0x4c>
 80045d2:	4613      	mov	r3, r2
 80045d4:	e7cc      	b.n	8004570 <_malloc_r+0x80>
 80045d6:	230c      	movs	r3, #12
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4638      	mov	r0, r7
 80045dc:	f000 f80e 	bl	80045fc <__malloc_unlock>
 80045e0:	e797      	b.n	8004512 <_malloc_r+0x22>
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	e7dc      	b.n	80045a0 <_malloc_r+0xb0>
 80045e6:	605b      	str	r3, [r3, #4]
 80045e8:	deff      	udf	#255	; 0xff
 80045ea:	bf00      	nop
 80045ec:	2000033c 	.word	0x2000033c

080045f0 <__malloc_lock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__malloc_lock+0x8>)
 80045f2:	f7ff bf0f 	b.w	8004414 <__retarget_lock_acquire_recursive>
 80045f6:	bf00      	nop
 80045f8:	20000338 	.word	0x20000338

080045fc <__malloc_unlock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_unlock+0x8>)
 80045fe:	f7ff bf0a 	b.w	8004416 <__retarget_lock_release_recursive>
 8004602:	bf00      	nop
 8004604:	20000338 	.word	0x20000338

08004608 <__ssputs_r>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	688e      	ldr	r6, [r1, #8]
 800460e:	461f      	mov	r7, r3
 8004610:	42be      	cmp	r6, r7
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	4682      	mov	sl, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4690      	mov	r8, r2
 800461a:	d82c      	bhi.n	8004676 <__ssputs_r+0x6e>
 800461c:	898a      	ldrh	r2, [r1, #12]
 800461e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004622:	d026      	beq.n	8004672 <__ssputs_r+0x6a>
 8004624:	6965      	ldr	r5, [r4, #20]
 8004626:	6909      	ldr	r1, [r1, #16]
 8004628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462c:	eba3 0901 	sub.w	r9, r3, r1
 8004630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004634:	1c7b      	adds	r3, r7, #1
 8004636:	444b      	add	r3, r9
 8004638:	106d      	asrs	r5, r5, #1
 800463a:	429d      	cmp	r5, r3
 800463c:	bf38      	it	cc
 800463e:	461d      	movcc	r5, r3
 8004640:	0553      	lsls	r3, r2, #21
 8004642:	d527      	bpl.n	8004694 <__ssputs_r+0x8c>
 8004644:	4629      	mov	r1, r5
 8004646:	f7ff ff53 	bl	80044f0 <_malloc_r>
 800464a:	4606      	mov	r6, r0
 800464c:	b360      	cbz	r0, 80046a8 <__ssputs_r+0xa0>
 800464e:	6921      	ldr	r1, [r4, #16]
 8004650:	464a      	mov	r2, r9
 8004652:	f000 faeb 	bl	8004c2c <memcpy>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	6126      	str	r6, [r4, #16]
 8004664:	6165      	str	r5, [r4, #20]
 8004666:	444e      	add	r6, r9
 8004668:	eba5 0509 	sub.w	r5, r5, r9
 800466c:	6026      	str	r6, [r4, #0]
 800466e:	60a5      	str	r5, [r4, #8]
 8004670:	463e      	mov	r6, r7
 8004672:	42be      	cmp	r6, r7
 8004674:	d900      	bls.n	8004678 <__ssputs_r+0x70>
 8004676:	463e      	mov	r6, r7
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	4632      	mov	r2, r6
 800467c:	4641      	mov	r1, r8
 800467e:	f000 faab 	bl	8004bd8 <memmove>
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	1b9b      	subs	r3, r3, r6
 8004686:	60a3      	str	r3, [r4, #8]
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	4433      	add	r3, r6
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	2000      	movs	r0, #0
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	462a      	mov	r2, r5
 8004696:	f000 fad7 	bl	8004c48 <_realloc_r>
 800469a:	4606      	mov	r6, r0
 800469c:	2800      	cmp	r0, #0
 800469e:	d1e0      	bne.n	8004662 <__ssputs_r+0x5a>
 80046a0:	6921      	ldr	r1, [r4, #16]
 80046a2:	4650      	mov	r0, sl
 80046a4:	f7ff feb8 	bl	8004418 <_free_r>
 80046a8:	230c      	movs	r3, #12
 80046aa:	f8ca 3000 	str.w	r3, [sl]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ba:	e7e9      	b.n	8004690 <__ssputs_r+0x88>

080046bc <_svfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	4698      	mov	r8, r3
 80046c2:	898b      	ldrh	r3, [r1, #12]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	b09d      	sub	sp, #116	; 0x74
 80046c8:	4607      	mov	r7, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	4614      	mov	r4, r2
 80046ce:	d50e      	bpl.n	80046ee <_svfiprintf_r+0x32>
 80046d0:	690b      	ldr	r3, [r1, #16]
 80046d2:	b963      	cbnz	r3, 80046ee <_svfiprintf_r+0x32>
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	f7ff ff0b 	bl	80044f0 <_malloc_r>
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	6128      	str	r0, [r5, #16]
 80046de:	b920      	cbnz	r0, 80046ea <_svfiprintf_r+0x2e>
 80046e0:	230c      	movs	r3, #12
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	e0d0      	b.n	800488c <_svfiprintf_r+0x1d0>
 80046ea:	2340      	movs	r3, #64	; 0x40
 80046ec:	616b      	str	r3, [r5, #20]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9309      	str	r3, [sp, #36]	; 0x24
 80046f2:	2320      	movs	r3, #32
 80046f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fc:	2330      	movs	r3, #48	; 0x30
 80046fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048a4 <_svfiprintf_r+0x1e8>
 8004702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004706:	f04f 0901 	mov.w	r9, #1
 800470a:	4623      	mov	r3, r4
 800470c:	469a      	mov	sl, r3
 800470e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004712:	b10a      	cbz	r2, 8004718 <_svfiprintf_r+0x5c>
 8004714:	2a25      	cmp	r2, #37	; 0x25
 8004716:	d1f9      	bne.n	800470c <_svfiprintf_r+0x50>
 8004718:	ebba 0b04 	subs.w	fp, sl, r4
 800471c:	d00b      	beq.n	8004736 <_svfiprintf_r+0x7a>
 800471e:	465b      	mov	r3, fp
 8004720:	4622      	mov	r2, r4
 8004722:	4629      	mov	r1, r5
 8004724:	4638      	mov	r0, r7
 8004726:	f7ff ff6f 	bl	8004608 <__ssputs_r>
 800472a:	3001      	adds	r0, #1
 800472c:	f000 80a9 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004732:	445a      	add	r2, fp
 8004734:	9209      	str	r2, [sp, #36]	; 0x24
 8004736:	f89a 3000 	ldrb.w	r3, [sl]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80a1 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004740:	2300      	movs	r3, #0
 8004742:	f04f 32ff 	mov.w	r2, #4294967295
 8004746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474a:	f10a 0a01 	add.w	sl, sl, #1
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	9307      	str	r3, [sp, #28]
 8004752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004756:	931a      	str	r3, [sp, #104]	; 0x68
 8004758:	4654      	mov	r4, sl
 800475a:	2205      	movs	r2, #5
 800475c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004760:	4850      	ldr	r0, [pc, #320]	; (80048a4 <_svfiprintf_r+0x1e8>)
 8004762:	f7fb fd55 	bl	8000210 <memchr>
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	b9d8      	cbnz	r0, 80047a2 <_svfiprintf_r+0xe6>
 800476a:	06d0      	lsls	r0, r2, #27
 800476c:	bf44      	itt	mi
 800476e:	2320      	movmi	r3, #32
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004774:	0711      	lsls	r1, r2, #28
 8004776:	bf44      	itt	mi
 8004778:	232b      	movmi	r3, #43	; 0x2b
 800477a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477e:	f89a 3000 	ldrb.w	r3, [sl]
 8004782:	2b2a      	cmp	r3, #42	; 0x2a
 8004784:	d015      	beq.n	80047b2 <_svfiprintf_r+0xf6>
 8004786:	9a07      	ldr	r2, [sp, #28]
 8004788:	4654      	mov	r4, sl
 800478a:	2000      	movs	r0, #0
 800478c:	f04f 0c0a 	mov.w	ip, #10
 8004790:	4621      	mov	r1, r4
 8004792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004796:	3b30      	subs	r3, #48	; 0x30
 8004798:	2b09      	cmp	r3, #9
 800479a:	d94d      	bls.n	8004838 <_svfiprintf_r+0x17c>
 800479c:	b1b0      	cbz	r0, 80047cc <_svfiprintf_r+0x110>
 800479e:	9207      	str	r2, [sp, #28]
 80047a0:	e014      	b.n	80047cc <_svfiprintf_r+0x110>
 80047a2:	eba0 0308 	sub.w	r3, r0, r8
 80047a6:	fa09 f303 	lsl.w	r3, r9, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	46a2      	mov	sl, r4
 80047b0:	e7d2      	b.n	8004758 <_svfiprintf_r+0x9c>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9103      	str	r1, [sp, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbb      	ittet	lt
 80047be:	425b      	neglt	r3, r3
 80047c0:	f042 0202 	orrlt.w	r2, r2, #2
 80047c4:	9307      	strge	r3, [sp, #28]
 80047c6:	9307      	strlt	r3, [sp, #28]
 80047c8:	bfb8      	it	lt
 80047ca:	9204      	strlt	r2, [sp, #16]
 80047cc:	7823      	ldrb	r3, [r4, #0]
 80047ce:	2b2e      	cmp	r3, #46	; 0x2e
 80047d0:	d10c      	bne.n	80047ec <_svfiprintf_r+0x130>
 80047d2:	7863      	ldrb	r3, [r4, #1]
 80047d4:	2b2a      	cmp	r3, #42	; 0x2a
 80047d6:	d134      	bne.n	8004842 <_svfiprintf_r+0x186>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	9203      	str	r2, [sp, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfb8      	it	lt
 80047e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047e8:	3402      	adds	r4, #2
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048b4 <_svfiprintf_r+0x1f8>
 80047f0:	7821      	ldrb	r1, [r4, #0]
 80047f2:	2203      	movs	r2, #3
 80047f4:	4650      	mov	r0, sl
 80047f6:	f7fb fd0b 	bl	8000210 <memchr>
 80047fa:	b138      	cbz	r0, 800480c <_svfiprintf_r+0x150>
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	eba0 000a 	sub.w	r0, r0, sl
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	4082      	lsls	r2, r0
 8004806:	4313      	orrs	r3, r2
 8004808:	3401      	adds	r4, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	4825      	ldr	r0, [pc, #148]	; (80048a8 <_svfiprintf_r+0x1ec>)
 8004812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004816:	2206      	movs	r2, #6
 8004818:	f7fb fcfa 	bl	8000210 <memchr>
 800481c:	2800      	cmp	r0, #0
 800481e:	d038      	beq.n	8004892 <_svfiprintf_r+0x1d6>
 8004820:	4b22      	ldr	r3, [pc, #136]	; (80048ac <_svfiprintf_r+0x1f0>)
 8004822:	bb1b      	cbnz	r3, 800486c <_svfiprintf_r+0x1b0>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	3307      	adds	r3, #7
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	3308      	adds	r3, #8
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004832:	4433      	add	r3, r6
 8004834:	9309      	str	r3, [sp, #36]	; 0x24
 8004836:	e768      	b.n	800470a <_svfiprintf_r+0x4e>
 8004838:	fb0c 3202 	mla	r2, ip, r2, r3
 800483c:	460c      	mov	r4, r1
 800483e:	2001      	movs	r0, #1
 8004840:	e7a6      	b.n	8004790 <_svfiprintf_r+0xd4>
 8004842:	2300      	movs	r3, #0
 8004844:	3401      	adds	r4, #1
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0c0a 	mov.w	ip, #10
 800484e:	4620      	mov	r0, r4
 8004850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004854:	3a30      	subs	r2, #48	; 0x30
 8004856:	2a09      	cmp	r2, #9
 8004858:	d903      	bls.n	8004862 <_svfiprintf_r+0x1a6>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0c6      	beq.n	80047ec <_svfiprintf_r+0x130>
 800485e:	9105      	str	r1, [sp, #20]
 8004860:	e7c4      	b.n	80047ec <_svfiprintf_r+0x130>
 8004862:	fb0c 2101 	mla	r1, ip, r1, r2
 8004866:	4604      	mov	r4, r0
 8004868:	2301      	movs	r3, #1
 800486a:	e7f0      	b.n	800484e <_svfiprintf_r+0x192>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <_svfiprintf_r+0x1f4>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4638      	mov	r0, r7
 8004878:	f3af 8000 	nop.w
 800487c:	1c42      	adds	r2, r0, #1
 800487e:	4606      	mov	r6, r0
 8004880:	d1d6      	bne.n	8004830 <_svfiprintf_r+0x174>
 8004882:	89ab      	ldrh	r3, [r5, #12]
 8004884:	065b      	lsls	r3, r3, #25
 8004886:	f53f af2d 	bmi.w	80046e4 <_svfiprintf_r+0x28>
 800488a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800488c:	b01d      	add	sp, #116	; 0x74
 800488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <_svfiprintf_r+0x1f4>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4638      	mov	r0, r7
 800489e:	f000 f879 	bl	8004994 <_printf_i>
 80048a2:	e7eb      	b.n	800487c <_svfiprintf_r+0x1c0>
 80048a4:	08005b68 	.word	0x08005b68
 80048a8:	08005b72 	.word	0x08005b72
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004609 	.word	0x08004609
 80048b4:	08005b6e 	.word	0x08005b6e

080048b8 <_printf_common>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	4616      	mov	r6, r2
 80048be:	4699      	mov	r9, r3
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfb8      	it	lt
 80048cc:	4613      	movlt	r3, r2
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d4:	4607      	mov	r7, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b10a      	cbz	r2, 80048de <_printf_common+0x26>
 80048da:	3301      	adds	r3, #1
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	6833      	ldrmi	r3, [r6, #0]
 80048e6:	3302      	addmi	r3, #2
 80048e8:	6033      	strmi	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	f015 0506 	ands.w	r5, r5, #6
 80048f0:	d106      	bne.n	8004900 <_printf_common+0x48>
 80048f2:	f104 0a19 	add.w	sl, r4, #25
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dc26      	bgt.n	800494e <_printf_common+0x96>
 8004900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004904:	1e13      	subs	r3, r2, #0
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	bf18      	it	ne
 800490a:	2301      	movne	r3, #1
 800490c:	0692      	lsls	r2, r2, #26
 800490e:	d42b      	bmi.n	8004968 <_printf_common+0xb0>
 8004910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d01e      	beq.n	800495c <_printf_common+0xa4>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	2b04      	cmp	r3, #4
 8004928:	bf02      	ittt	eq
 800492a:	68e5      	ldreq	r5, [r4, #12]
 800492c:	6833      	ldreq	r3, [r6, #0]
 800492e:	1aed      	subeq	r5, r5, r3
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	2600      	movs	r6, #0
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xc8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xa8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4649      	mov	r1, r9
 8004954:	4638      	mov	r0, r7
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xac>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c6      	b.n	80048f6 <_printf_common+0x3e>
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	2030      	movs	r0, #48	; 0x30
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004972:	4422      	add	r2, r4
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497c:	3302      	adds	r3, #2
 800497e:	e7c7      	b.n	8004910 <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa4>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x8e>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800499c:	2f78      	cmp	r7, #120	; 0x78
 800499e:	4691      	mov	r9, r2
 80049a0:	4680      	mov	r8, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	469a      	mov	sl, r3
 80049a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	; 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d4 	beq.w	8004b5e <_printf_i+0x1ca>
 80049b6:	2f58      	cmp	r7, #88	; 0x58
 80049b8:	f000 80c0 	beq.w	8004b3c <_printf_i+0x1a8>
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	; (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b45 	.word	0x08004b45
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	08004aff 	.word	0x08004aff
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b67 	.word	0x08004b67
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b07 	.word	0x08004b07
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09f      	b.n	8004b80 <_printf_i+0x1ec>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	0607      	lsls	r7, r0, #24
 8004a46:	f103 0104 	add.w	r1, r3, #4
 8004a4a:	6029      	str	r1, [r5, #0]
 8004a4c:	d501      	bpl.n	8004a52 <_printf_i+0xbe>
 8004a4e:	681e      	ldr	r6, [r3, #0]
 8004a50:	e003      	b.n	8004a5a <_printf_i+0xc6>
 8004a52:	0646      	lsls	r6, r0, #25
 8004a54:	d5fb      	bpl.n	8004a4e <_printf_i+0xba>
 8004a56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	da03      	bge.n	8004a66 <_printf_i+0xd2>
 8004a5e:	232d      	movs	r3, #45	; 0x2d
 8004a60:	4276      	negs	r6, r6
 8004a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a66:	485a      	ldr	r0, [pc, #360]	; (8004bd0 <_printf_i+0x23c>)
 8004a68:	230a      	movs	r3, #10
 8004a6a:	e012      	b.n	8004a92 <_printf_i+0xfe>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	6029      	str	r1, [r5, #0]
 8004a74:	0605      	lsls	r5, r0, #24
 8004a76:	d501      	bpl.n	8004a7c <_printf_i+0xe8>
 8004a78:	681e      	ldr	r6, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <_printf_i+0xee>
 8004a7c:	0641      	lsls	r1, r0, #25
 8004a7e:	d5fb      	bpl.n	8004a78 <_printf_i+0xe4>
 8004a80:	881e      	ldrh	r6, [r3, #0]
 8004a82:	4853      	ldr	r0, [pc, #332]	; (8004bd0 <_printf_i+0x23c>)
 8004a84:	2f6f      	cmp	r7, #111	; 0x6f
 8004a86:	bf0c      	ite	eq
 8004a88:	2308      	moveq	r3, #8
 8004a8a:	230a      	movne	r3, #10
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a92:	6865      	ldr	r5, [r4, #4]
 8004a94:	60a5      	str	r5, [r4, #8]
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	bfa2      	ittt	ge
 8004a9a:	6821      	ldrge	r1, [r4, #0]
 8004a9c:	f021 0104 	bicge.w	r1, r1, #4
 8004aa0:	6021      	strge	r1, [r4, #0]
 8004aa2:	b90e      	cbnz	r6, 8004aa8 <_printf_i+0x114>
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	d04b      	beq.n	8004b40 <_printf_i+0x1ac>
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aae:	fb03 6711 	mls	r7, r3, r1, r6
 8004ab2:	5dc7      	ldrb	r7, [r0, r7]
 8004ab4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ab8:	4637      	mov	r7, r6
 8004aba:	42bb      	cmp	r3, r7
 8004abc:	460e      	mov	r6, r1
 8004abe:	d9f4      	bls.n	8004aaa <_printf_i+0x116>
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d10b      	bne.n	8004adc <_printf_i+0x148>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	07de      	lsls	r6, r3, #31
 8004ac8:	d508      	bpl.n	8004adc <_printf_i+0x148>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	6861      	ldr	r1, [r4, #4]
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	bfde      	ittt	le
 8004ad2:	2330      	movle	r3, #48	; 0x30
 8004ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004adc:	1b52      	subs	r2, r2, r5
 8004ade:	6122      	str	r2, [r4, #16]
 8004ae0:	f8cd a000 	str.w	sl, [sp]
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	aa03      	add	r2, sp, #12
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7ff fee4 	bl	80048b8 <_printf_common>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d14a      	bne.n	8004b8a <_printf_i+0x1f6>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	b004      	add	sp, #16
 8004afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	f043 0320 	orr.w	r3, r3, #32
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	4833      	ldr	r0, [pc, #204]	; (8004bd4 <_printf_i+0x240>)
 8004b08:	2778      	movs	r7, #120	; 0x78
 8004b0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	6829      	ldr	r1, [r5, #0]
 8004b12:	061f      	lsls	r7, r3, #24
 8004b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b18:	d402      	bmi.n	8004b20 <_printf_i+0x18c>
 8004b1a:	065f      	lsls	r7, r3, #25
 8004b1c:	bf48      	it	mi
 8004b1e:	b2b6      	uxthmi	r6, r6
 8004b20:	07df      	lsls	r7, r3, #31
 8004b22:	bf48      	it	mi
 8004b24:	f043 0320 	orrmi.w	r3, r3, #32
 8004b28:	6029      	str	r1, [r5, #0]
 8004b2a:	bf48      	it	mi
 8004b2c:	6023      	strmi	r3, [r4, #0]
 8004b2e:	b91e      	cbnz	r6, 8004b38 <_printf_i+0x1a4>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	2310      	movs	r3, #16
 8004b3a:	e7a7      	b.n	8004a8c <_printf_i+0xf8>
 8004b3c:	4824      	ldr	r0, [pc, #144]	; (8004bd0 <_printf_i+0x23c>)
 8004b3e:	e7e4      	b.n	8004b0a <_printf_i+0x176>
 8004b40:	4615      	mov	r5, r2
 8004b42:	e7bd      	b.n	8004ac0 <_printf_i+0x12c>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	6826      	ldr	r6, [r4, #0]
 8004b48:	6961      	ldr	r1, [r4, #20]
 8004b4a:	1d18      	adds	r0, r3, #4
 8004b4c:	6028      	str	r0, [r5, #0]
 8004b4e:	0635      	lsls	r5, r6, #24
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	d501      	bpl.n	8004b58 <_printf_i+0x1c4>
 8004b54:	6019      	str	r1, [r3, #0]
 8004b56:	e002      	b.n	8004b5e <_printf_i+0x1ca>
 8004b58:	0670      	lsls	r0, r6, #25
 8004b5a:	d5fb      	bpl.n	8004b54 <_printf_i+0x1c0>
 8004b5c:	8019      	strh	r1, [r3, #0]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	4615      	mov	r5, r2
 8004b64:	e7bc      	b.n	8004ae0 <_printf_i+0x14c>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	1d1a      	adds	r2, r3, #4
 8004b6a:	602a      	str	r2, [r5, #0]
 8004b6c:	681d      	ldr	r5, [r3, #0]
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	2100      	movs	r1, #0
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7fb fb4c 	bl	8000210 <memchr>
 8004b78:	b108      	cbz	r0, 8004b7e <_printf_i+0x1ea>
 8004b7a:	1b40      	subs	r0, r0, r5
 8004b7c:	6060      	str	r0, [r4, #4]
 8004b7e:	6863      	ldr	r3, [r4, #4]
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	2300      	movs	r3, #0
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	e7aa      	b.n	8004ae0 <_printf_i+0x14c>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4649      	mov	r1, r9
 8004b90:	4640      	mov	r0, r8
 8004b92:	47d0      	blx	sl
 8004b94:	3001      	adds	r0, #1
 8004b96:	d0ad      	beq.n	8004af4 <_printf_i+0x160>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	079b      	lsls	r3, r3, #30
 8004b9c:	d413      	bmi.n	8004bc6 <_printf_i+0x232>
 8004b9e:	68e0      	ldr	r0, [r4, #12]
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	4298      	cmp	r0, r3
 8004ba4:	bfb8      	it	lt
 8004ba6:	4618      	movlt	r0, r3
 8004ba8:	e7a6      	b.n	8004af8 <_printf_i+0x164>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4632      	mov	r2, r6
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	47d0      	blx	sl
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d09d      	beq.n	8004af4 <_printf_i+0x160>
 8004bb8:	3501      	adds	r5, #1
 8004bba:	68e3      	ldr	r3, [r4, #12]
 8004bbc:	9903      	ldr	r1, [sp, #12]
 8004bbe:	1a5b      	subs	r3, r3, r1
 8004bc0:	42ab      	cmp	r3, r5
 8004bc2:	dcf2      	bgt.n	8004baa <_printf_i+0x216>
 8004bc4:	e7eb      	b.n	8004b9e <_printf_i+0x20a>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	f104 0619 	add.w	r6, r4, #25
 8004bcc:	e7f5      	b.n	8004bba <_printf_i+0x226>
 8004bce:	bf00      	nop
 8004bd0:	08005b79 	.word	0x08005b79
 8004bd4:	08005b8a 	.word	0x08005b8a

08004bd8 <memmove>:
 8004bd8:	4288      	cmp	r0, r1
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	eb01 0402 	add.w	r4, r1, r2
 8004be0:	d902      	bls.n	8004be8 <memmove+0x10>
 8004be2:	4284      	cmp	r4, r0
 8004be4:	4623      	mov	r3, r4
 8004be6:	d807      	bhi.n	8004bf8 <memmove+0x20>
 8004be8:	1e43      	subs	r3, r0, #1
 8004bea:	42a1      	cmp	r1, r4
 8004bec:	d008      	beq.n	8004c00 <memmove+0x28>
 8004bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf6:	e7f8      	b.n	8004bea <memmove+0x12>
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d100      	bne.n	8004c02 <memmove+0x2a>
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c0a:	e7f7      	b.n	8004bfc <memmove+0x24>

08004c0c <_sbrk_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d06      	ldr	r5, [pc, #24]	; (8004c28 <_sbrk_r+0x1c>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	f7fc fe90 	bl	800193c <_sbrk>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_sbrk_r+0x1a>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_sbrk_r+0x1a>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	20000334 	.word	0x20000334

08004c2c <memcpy>:
 8004c2c:	440a      	add	r2, r1
 8004c2e:	4291      	cmp	r1, r2
 8004c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c34:	d100      	bne.n	8004c38 <memcpy+0xc>
 8004c36:	4770      	bx	lr
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c42:	4291      	cmp	r1, r2
 8004c44:	d1f9      	bne.n	8004c3a <memcpy+0xe>
 8004c46:	bd10      	pop	{r4, pc}

08004c48 <_realloc_r>:
 8004c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4c:	4680      	mov	r8, r0
 8004c4e:	4614      	mov	r4, r2
 8004c50:	460e      	mov	r6, r1
 8004c52:	b921      	cbnz	r1, 8004c5e <_realloc_r+0x16>
 8004c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f7ff bc49 	b.w	80044f0 <_malloc_r>
 8004c5e:	b92a      	cbnz	r2, 8004c6c <_realloc_r+0x24>
 8004c60:	f7ff fbda 	bl	8004418 <_free_r>
 8004c64:	4625      	mov	r5, r4
 8004c66:	4628      	mov	r0, r5
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6c:	f000 f81b 	bl	8004ca6 <_malloc_usable_size_r>
 8004c70:	4284      	cmp	r4, r0
 8004c72:	4607      	mov	r7, r0
 8004c74:	d802      	bhi.n	8004c7c <_realloc_r+0x34>
 8004c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c7a:	d812      	bhi.n	8004ca2 <_realloc_r+0x5a>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fc36 	bl	80044f0 <_malloc_r>
 8004c84:	4605      	mov	r5, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d0ed      	beq.n	8004c66 <_realloc_r+0x1e>
 8004c8a:	42bc      	cmp	r4, r7
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	4631      	mov	r1, r6
 8004c90:	bf28      	it	cs
 8004c92:	463a      	movcs	r2, r7
 8004c94:	f7ff ffca 	bl	8004c2c <memcpy>
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fbbc 	bl	8004418 <_free_r>
 8004ca0:	e7e1      	b.n	8004c66 <_realloc_r+0x1e>
 8004ca2:	4635      	mov	r5, r6
 8004ca4:	e7df      	b.n	8004c66 <_realloc_r+0x1e>

08004ca6 <_malloc_usable_size_r>:
 8004ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004caa:	1f18      	subs	r0, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfbc      	itt	lt
 8004cb0:	580b      	ldrlt	r3, [r1, r0]
 8004cb2:	18c0      	addlt	r0, r0, r3
 8004cb4:	4770      	bx	lr
	...

08004cb8 <pow>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	ed2d 8b02 	vpush	{d8}
 8004cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8004cc2:	eef0 8a60 	vmov.f32	s17, s1
 8004cc6:	ec55 4b11 	vmov	r4, r5, d1
 8004cca:	f000 f871 	bl	8004db0 <__ieee754_pow>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	ec57 6b10 	vmov	r6, r7, d0
 8004cda:	f7fb ff3f 	bl	8000b5c <__aeabi_dcmpun>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d13b      	bne.n	8004d5a <pow+0xa2>
 8004ce2:	ec51 0b18 	vmov	r0, r1, d8
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f7fb ff05 	bl	8000af8 <__aeabi_dcmpeq>
 8004cee:	b1b8      	cbz	r0, 8004d20 <pow+0x68>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d146      	bne.n	8004d8e <pow+0xd6>
 8004d00:	ec45 4b10 	vmov	d0, r4, r5
 8004d04:	f000 f848 	bl	8004d98 <finite>
 8004d08:	b338      	cbz	r0, 8004d5a <pow+0xa2>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7fb fefb 	bl	8000b0c <__aeabi_dcmplt>
 8004d16:	b300      	cbz	r0, 8004d5a <pow+0xa2>
 8004d18:	f7ff fb52 	bl	80043c0 <__errno>
 8004d1c:	2322      	movs	r3, #34	; 0x22
 8004d1e:	e01b      	b.n	8004d58 <pow+0xa0>
 8004d20:	ec47 6b10 	vmov	d0, r6, r7
 8004d24:	f000 f838 	bl	8004d98 <finite>
 8004d28:	b9e0      	cbnz	r0, 8004d64 <pow+0xac>
 8004d2a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d2e:	eef0 0a68 	vmov.f32	s1, s17
 8004d32:	f000 f831 	bl	8004d98 <finite>
 8004d36:	b1a8      	cbz	r0, 8004d64 <pow+0xac>
 8004d38:	ec45 4b10 	vmov	d0, r4, r5
 8004d3c:	f000 f82c 	bl	8004d98 <finite>
 8004d40:	b180      	cbz	r0, 8004d64 <pow+0xac>
 8004d42:	4632      	mov	r2, r6
 8004d44:	463b      	mov	r3, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb ff07 	bl	8000b5c <__aeabi_dcmpun>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d0e2      	beq.n	8004d18 <pow+0x60>
 8004d52:	f7ff fb35 	bl	80043c0 <__errno>
 8004d56:	2321      	movs	r3, #33	; 0x21
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	ecbd 8b02 	vpop	{d8}
 8004d5e:	ec47 6b10 	vmov	d0, r6, r7
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d64:	2200      	movs	r2, #0
 8004d66:	2300      	movs	r3, #0
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fec4 	bl	8000af8 <__aeabi_dcmpeq>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0f2      	beq.n	8004d5a <pow+0xa2>
 8004d74:	eeb0 0a48 	vmov.f32	s0, s16
 8004d78:	eef0 0a68 	vmov.f32	s1, s17
 8004d7c:	f000 f80c 	bl	8004d98 <finite>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d0ea      	beq.n	8004d5a <pow+0xa2>
 8004d84:	ec45 4b10 	vmov	d0, r4, r5
 8004d88:	f000 f806 	bl	8004d98 <finite>
 8004d8c:	e7c3      	b.n	8004d16 <pow+0x5e>
 8004d8e:	4f01      	ldr	r7, [pc, #4]	; (8004d94 <pow+0xdc>)
 8004d90:	2600      	movs	r6, #0
 8004d92:	e7e2      	b.n	8004d5a <pow+0xa2>
 8004d94:	3ff00000 	.word	0x3ff00000

08004d98 <finite>:
 8004d98:	b082      	sub	sp, #8
 8004d9a:	ed8d 0b00 	vstr	d0, [sp]
 8004d9e:	9801      	ldr	r0, [sp, #4]
 8004da0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004da4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004da8:	0fc0      	lsrs	r0, r0, #31
 8004daa:	b002      	add	sp, #8
 8004dac:	4770      	bx	lr
	...

08004db0 <__ieee754_pow>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	ed2d 8b06 	vpush	{d8-d10}
 8004db8:	b089      	sub	sp, #36	; 0x24
 8004dba:	ed8d 1b00 	vstr	d1, [sp]
 8004dbe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004dc2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004dc6:	ea58 0102 	orrs.w	r1, r8, r2
 8004dca:	ec57 6b10 	vmov	r6, r7, d0
 8004dce:	d115      	bne.n	8004dfc <__ieee754_pow+0x4c>
 8004dd0:	19b3      	adds	r3, r6, r6
 8004dd2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004dd6:	4152      	adcs	r2, r2
 8004dd8:	4299      	cmp	r1, r3
 8004dda:	4b89      	ldr	r3, [pc, #548]	; (8005000 <__ieee754_pow+0x250>)
 8004ddc:	4193      	sbcs	r3, r2
 8004dde:	f080 84d1 	bcs.w	8005784 <__ieee754_pow+0x9d4>
 8004de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fa67 	bl	80002bc <__adddf3>
 8004dee:	ec41 0b10 	vmov	d0, r0, r1
 8004df2:	b009      	add	sp, #36	; 0x24
 8004df4:	ecbd 8b06 	vpop	{d8-d10}
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	4b81      	ldr	r3, [pc, #516]	; (8005004 <__ieee754_pow+0x254>)
 8004dfe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004e02:	429c      	cmp	r4, r3
 8004e04:	ee10 aa10 	vmov	sl, s0
 8004e08:	463d      	mov	r5, r7
 8004e0a:	dc06      	bgt.n	8004e1a <__ieee754_pow+0x6a>
 8004e0c:	d101      	bne.n	8004e12 <__ieee754_pow+0x62>
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d1e7      	bne.n	8004de2 <__ieee754_pow+0x32>
 8004e12:	4598      	cmp	r8, r3
 8004e14:	dc01      	bgt.n	8004e1a <__ieee754_pow+0x6a>
 8004e16:	d10f      	bne.n	8004e38 <__ieee754_pow+0x88>
 8004e18:	b172      	cbz	r2, 8004e38 <__ieee754_pow+0x88>
 8004e1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004e1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004e22:	ea55 050a 	orrs.w	r5, r5, sl
 8004e26:	d1dc      	bne.n	8004de2 <__ieee754_pow+0x32>
 8004e28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004e2c:	18db      	adds	r3, r3, r3
 8004e2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004e32:	4152      	adcs	r2, r2
 8004e34:	429d      	cmp	r5, r3
 8004e36:	e7d0      	b.n	8004dda <__ieee754_pow+0x2a>
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	da3b      	bge.n	8004eb4 <__ieee754_pow+0x104>
 8004e3c:	4b72      	ldr	r3, [pc, #456]	; (8005008 <__ieee754_pow+0x258>)
 8004e3e:	4598      	cmp	r8, r3
 8004e40:	dc51      	bgt.n	8004ee6 <__ieee754_pow+0x136>
 8004e42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e46:	4598      	cmp	r8, r3
 8004e48:	f340 84ab 	ble.w	80057a2 <__ieee754_pow+0x9f2>
 8004e4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e54:	2b14      	cmp	r3, #20
 8004e56:	dd0f      	ble.n	8004e78 <__ieee754_pow+0xc8>
 8004e58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e5c:	fa22 f103 	lsr.w	r1, r2, r3
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	4293      	cmp	r3, r2
 8004e66:	f040 849c 	bne.w	80057a2 <__ieee754_pow+0x9f2>
 8004e6a:	f001 0101 	and.w	r1, r1, #1
 8004e6e:	f1c1 0302 	rsb	r3, r1, #2
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	b182      	cbz	r2, 8004e98 <__ieee754_pow+0xe8>
 8004e76:	e05f      	b.n	8004f38 <__ieee754_pow+0x188>
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	d15b      	bne.n	8004f34 <__ieee754_pow+0x184>
 8004e7c:	f1c3 0314 	rsb	r3, r3, #20
 8004e80:	fa48 f103 	asr.w	r1, r8, r3
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	4543      	cmp	r3, r8
 8004e8a:	f040 8487 	bne.w	800579c <__ieee754_pow+0x9ec>
 8004e8e:	f001 0101 	and.w	r1, r1, #1
 8004e92:	f1c1 0302 	rsb	r3, r1, #2
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	4b5c      	ldr	r3, [pc, #368]	; (800500c <__ieee754_pow+0x25c>)
 8004e9a:	4598      	cmp	r8, r3
 8004e9c:	d132      	bne.n	8004f04 <__ieee754_pow+0x154>
 8004e9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ea2:	f280 8477 	bge.w	8005794 <__ieee754_pow+0x9e4>
 8004ea6:	4959      	ldr	r1, [pc, #356]	; (800500c <__ieee754_pow+0x25c>)
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7fb fce5 	bl	800087c <__aeabi_ddiv>
 8004eb2:	e79c      	b.n	8004dee <__ieee754_pow+0x3e>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d13d      	bne.n	8004f38 <__ieee754_pow+0x188>
 8004ebc:	4b51      	ldr	r3, [pc, #324]	; (8005004 <__ieee754_pow+0x254>)
 8004ebe:	4598      	cmp	r8, r3
 8004ec0:	d1ea      	bne.n	8004e98 <__ieee754_pow+0xe8>
 8004ec2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004ec6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004eca:	ea53 030a 	orrs.w	r3, r3, sl
 8004ece:	f000 8459 	beq.w	8005784 <__ieee754_pow+0x9d4>
 8004ed2:	4b4f      	ldr	r3, [pc, #316]	; (8005010 <__ieee754_pow+0x260>)
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	dd08      	ble.n	8004eea <__ieee754_pow+0x13a>
 8004ed8:	f1b9 0f00 	cmp.w	r9, #0
 8004edc:	f2c0 8456 	blt.w	800578c <__ieee754_pow+0x9dc>
 8004ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee4:	e783      	b.n	8004dee <__ieee754_pow+0x3e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e7e5      	b.n	8004eb6 <__ieee754_pow+0x106>
 8004eea:	f1b9 0f00 	cmp.w	r9, #0
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	f6bf af7a 	bge.w	8004dee <__ieee754_pow+0x3e>
 8004efa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004efe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f02:	e774      	b.n	8004dee <__ieee754_pow+0x3e>
 8004f04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004f08:	d106      	bne.n	8004f18 <__ieee754_pow+0x168>
 8004f0a:	4632      	mov	r2, r6
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	4630      	mov	r0, r6
 8004f10:	4639      	mov	r1, r7
 8004f12:	f7fb fb89 	bl	8000628 <__aeabi_dmul>
 8004f16:	e76a      	b.n	8004dee <__ieee754_pow+0x3e>
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <__ieee754_pow+0x264>)
 8004f1a:	4599      	cmp	r9, r3
 8004f1c:	d10c      	bne.n	8004f38 <__ieee754_pow+0x188>
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	db0a      	blt.n	8004f38 <__ieee754_pow+0x188>
 8004f22:	ec47 6b10 	vmov	d0, r6, r7
 8004f26:	b009      	add	sp, #36	; 0x24
 8004f28:	ecbd 8b06 	vpop	{d8-d10}
 8004f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	f000 bd20 	b.w	8005974 <__ieee754_sqrt>
 8004f34:	2300      	movs	r3, #0
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	ec47 6b10 	vmov	d0, r6, r7
 8004f3c:	f000 fc62 	bl	8005804 <fabs>
 8004f40:	ec51 0b10 	vmov	r0, r1, d0
 8004f44:	f1ba 0f00 	cmp.w	sl, #0
 8004f48:	d129      	bne.n	8004f9e <__ieee754_pow+0x1ee>
 8004f4a:	b124      	cbz	r4, 8004f56 <__ieee754_pow+0x1a6>
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <__ieee754_pow+0x25c>)
 8004f4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d123      	bne.n	8004f9e <__ieee754_pow+0x1ee>
 8004f56:	f1b9 0f00 	cmp.w	r9, #0
 8004f5a:	da05      	bge.n	8004f68 <__ieee754_pow+0x1b8>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	2000      	movs	r0, #0
 8004f62:	492a      	ldr	r1, [pc, #168]	; (800500c <__ieee754_pow+0x25c>)
 8004f64:	f7fb fc8a 	bl	800087c <__aeabi_ddiv>
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	f6bf af40 	bge.w	8004dee <__ieee754_pow+0x3e>
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f78:	431c      	orrs	r4, r3
 8004f7a:	d108      	bne.n	8004f8e <__ieee754_pow+0x1de>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f7fb f998 	bl	80002b8 <__aeabi_dsub>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	e78f      	b.n	8004eae <__ieee754_pow+0xfe>
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f47f af2c 	bne.w	8004dee <__ieee754_pow+0x3e>
 8004f96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	e727      	b.n	8004dee <__ieee754_pow+0x3e>
 8004f9e:	0feb      	lsrs	r3, r5, #31
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	9306      	str	r3, [sp, #24]
 8004fa4:	9a06      	ldr	r2, [sp, #24]
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d102      	bne.n	8004fb2 <__ieee754_pow+0x202>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	e7e6      	b.n	8004f80 <__ieee754_pow+0x1d0>
 8004fb2:	4b19      	ldr	r3, [pc, #100]	; (8005018 <__ieee754_pow+0x268>)
 8004fb4:	4598      	cmp	r8, r3
 8004fb6:	f340 80fb 	ble.w	80051b0 <__ieee754_pow+0x400>
 8004fba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fbe:	4598      	cmp	r8, r3
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <__ieee754_pow+0x260>)
 8004fc2:	dd0c      	ble.n	8004fde <__ieee754_pow+0x22e>
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	dc0f      	bgt.n	8004fe8 <__ieee754_pow+0x238>
 8004fc8:	f1b9 0f00 	cmp.w	r9, #0
 8004fcc:	da0f      	bge.n	8004fee <__ieee754_pow+0x23e>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	b009      	add	sp, #36	; 0x24
 8004fd2:	ecbd 8b06 	vpop	{d8-d10}
 8004fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	f000 bcc2 	b.w	8005962 <__math_oflow>
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	dbf2      	blt.n	8004fc8 <__ieee754_pow+0x218>
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <__ieee754_pow+0x25c>)
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	dd19      	ble.n	800501c <__ieee754_pow+0x26c>
 8004fe8:	f1b9 0f00 	cmp.w	r9, #0
 8004fec:	dcef      	bgt.n	8004fce <__ieee754_pow+0x21e>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	b009      	add	sp, #36	; 0x24
 8004ff2:	ecbd 8b06 	vpop	{d8-d10}
 8004ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f000 bca9 	b.w	8005950 <__math_uflow>
 8004ffe:	bf00      	nop
 8005000:	fff00000 	.word	0xfff00000
 8005004:	7ff00000 	.word	0x7ff00000
 8005008:	433fffff 	.word	0x433fffff
 800500c:	3ff00000 	.word	0x3ff00000
 8005010:	3fefffff 	.word	0x3fefffff
 8005014:	3fe00000 	.word	0x3fe00000
 8005018:	41e00000 	.word	0x41e00000
 800501c:	4b60      	ldr	r3, [pc, #384]	; (80051a0 <__ieee754_pow+0x3f0>)
 800501e:	2200      	movs	r2, #0
 8005020:	f7fb f94a 	bl	80002b8 <__aeabi_dsub>
 8005024:	a354      	add	r3, pc, #336	; (adr r3, 8005178 <__ieee754_pow+0x3c8>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	4604      	mov	r4, r0
 800502c:	460d      	mov	r5, r1
 800502e:	f7fb fafb 	bl	8000628 <__aeabi_dmul>
 8005032:	a353      	add	r3, pc, #332	; (adr r3, 8005180 <__ieee754_pow+0x3d0>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	4606      	mov	r6, r0
 800503a:	460f      	mov	r7, r1
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb faf2 	bl	8000628 <__aeabi_dmul>
 8005044:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <__ieee754_pow+0x3f4>)
 8005046:	4682      	mov	sl, r0
 8005048:	468b      	mov	fp, r1
 800504a:	2200      	movs	r2, #0
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f7fb faea 	bl	8000628 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	a14b      	add	r1, pc, #300	; (adr r1, 8005188 <__ieee754_pow+0x3d8>)
 800505a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505e:	f7fb f92b 	bl	80002b8 <__aeabi_dsub>
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	f7fb fadf 	bl	8000628 <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	2000      	movs	r0, #0
 8005070:	494d      	ldr	r1, [pc, #308]	; (80051a8 <__ieee754_pow+0x3f8>)
 8005072:	f7fb f921 	bl	80002b8 <__aeabi_dsub>
 8005076:	4622      	mov	r2, r4
 8005078:	4680      	mov	r8, r0
 800507a:	4689      	mov	r9, r1
 800507c:	462b      	mov	r3, r5
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb fad1 	bl	8000628 <__aeabi_dmul>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	f7fb facb 	bl	8000628 <__aeabi_dmul>
 8005092:	a33f      	add	r3, pc, #252	; (adr r3, 8005190 <__ieee754_pow+0x3e0>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fac6 	bl	8000628 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4650      	mov	r0, sl
 80050a2:	4659      	mov	r1, fp
 80050a4:	f7fb f908 	bl	80002b8 <__aeabi_dsub>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4680      	mov	r8, r0
 80050ae:	4689      	mov	r9, r1
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb f902 	bl	80002bc <__adddf3>
 80050b8:	2000      	movs	r0, #0
 80050ba:	4632      	mov	r2, r6
 80050bc:	463b      	mov	r3, r7
 80050be:	4604      	mov	r4, r0
 80050c0:	460d      	mov	r5, r1
 80050c2:	f7fb f8f9 	bl	80002b8 <__aeabi_dsub>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f7fb f8f3 	bl	80002b8 <__aeabi_dsub>
 80050d2:	9b04      	ldr	r3, [sp, #16]
 80050d4:	9a06      	ldr	r2, [sp, #24]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	4313      	orrs	r3, r2
 80050da:	4682      	mov	sl, r0
 80050dc:	468b      	mov	fp, r1
 80050de:	f040 81e7 	bne.w	80054b0 <__ieee754_pow+0x700>
 80050e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005198 <__ieee754_pow+0x3e8>
 80050e6:	eeb0 8a47 	vmov.f32	s16, s14
 80050ea:	eef0 8a67 	vmov.f32	s17, s15
 80050ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050f2:	2600      	movs	r6, #0
 80050f4:	4632      	mov	r2, r6
 80050f6:	463b      	mov	r3, r7
 80050f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050fc:	f7fb f8dc 	bl	80002b8 <__aeabi_dsub>
 8005100:	4622      	mov	r2, r4
 8005102:	462b      	mov	r3, r5
 8005104:	f7fb fa90 	bl	8000628 <__aeabi_dmul>
 8005108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800510c:	4680      	mov	r8, r0
 800510e:	4689      	mov	r9, r1
 8005110:	4650      	mov	r0, sl
 8005112:	4659      	mov	r1, fp
 8005114:	f7fb fa88 	bl	8000628 <__aeabi_dmul>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4640      	mov	r0, r8
 800511e:	4649      	mov	r1, r9
 8005120:	f7fb f8cc 	bl	80002bc <__adddf3>
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	4680      	mov	r8, r0
 800512a:	4689      	mov	r9, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb fa7a 	bl	8000628 <__aeabi_dmul>
 8005134:	460b      	mov	r3, r1
 8005136:	4604      	mov	r4, r0
 8005138:	460d      	mov	r5, r1
 800513a:	4602      	mov	r2, r0
 800513c:	4649      	mov	r1, r9
 800513e:	4640      	mov	r0, r8
 8005140:	f7fb f8bc 	bl	80002bc <__adddf3>
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <__ieee754_pow+0x3fc>)
 8005146:	4299      	cmp	r1, r3
 8005148:	ec45 4b19 	vmov	d9, r4, r5
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	468b      	mov	fp, r1
 8005152:	f340 82f0 	ble.w	8005736 <__ieee754_pow+0x986>
 8005156:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800515a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800515e:	4303      	orrs	r3, r0
 8005160:	f000 81e4 	beq.w	800552c <__ieee754_pow+0x77c>
 8005164:	ec51 0b18 	vmov	r0, r1, d8
 8005168:	2200      	movs	r2, #0
 800516a:	2300      	movs	r3, #0
 800516c:	f7fb fcce 	bl	8000b0c <__aeabi_dcmplt>
 8005170:	3800      	subs	r0, #0
 8005172:	bf18      	it	ne
 8005174:	2001      	movne	r0, #1
 8005176:	e72b      	b.n	8004fd0 <__ieee754_pow+0x220>
 8005178:	60000000 	.word	0x60000000
 800517c:	3ff71547 	.word	0x3ff71547
 8005180:	f85ddf44 	.word	0xf85ddf44
 8005184:	3e54ae0b 	.word	0x3e54ae0b
 8005188:	55555555 	.word	0x55555555
 800518c:	3fd55555 	.word	0x3fd55555
 8005190:	652b82fe 	.word	0x652b82fe
 8005194:	3ff71547 	.word	0x3ff71547
 8005198:	00000000 	.word	0x00000000
 800519c:	bff00000 	.word	0xbff00000
 80051a0:	3ff00000 	.word	0x3ff00000
 80051a4:	3fd00000 	.word	0x3fd00000
 80051a8:	3fe00000 	.word	0x3fe00000
 80051ac:	408fffff 	.word	0x408fffff
 80051b0:	4bd5      	ldr	r3, [pc, #852]	; (8005508 <__ieee754_pow+0x758>)
 80051b2:	402b      	ands	r3, r5
 80051b4:	2200      	movs	r2, #0
 80051b6:	b92b      	cbnz	r3, 80051c4 <__ieee754_pow+0x414>
 80051b8:	4bd4      	ldr	r3, [pc, #848]	; (800550c <__ieee754_pow+0x75c>)
 80051ba:	f7fb fa35 	bl	8000628 <__aeabi_dmul>
 80051be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051c2:	460c      	mov	r4, r1
 80051c4:	1523      	asrs	r3, r4, #20
 80051c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051ca:	4413      	add	r3, r2
 80051cc:	9305      	str	r3, [sp, #20]
 80051ce:	4bd0      	ldr	r3, [pc, #832]	; (8005510 <__ieee754_pow+0x760>)
 80051d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051d8:	429c      	cmp	r4, r3
 80051da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051de:	dd08      	ble.n	80051f2 <__ieee754_pow+0x442>
 80051e0:	4bcc      	ldr	r3, [pc, #816]	; (8005514 <__ieee754_pow+0x764>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	f340 8162 	ble.w	80054ac <__ieee754_pow+0x6fc>
 80051e8:	9b05      	ldr	r3, [sp, #20]
 80051ea:	3301      	adds	r3, #1
 80051ec:	9305      	str	r3, [sp, #20]
 80051ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80051f2:	2400      	movs	r4, #0
 80051f4:	00e3      	lsls	r3, r4, #3
 80051f6:	9307      	str	r3, [sp, #28]
 80051f8:	4bc7      	ldr	r3, [pc, #796]	; (8005518 <__ieee754_pow+0x768>)
 80051fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051fe:	ed93 7b00 	vldr	d7, [r3]
 8005202:	4629      	mov	r1, r5
 8005204:	ec53 2b17 	vmov	r2, r3, d7
 8005208:	eeb0 9a47 	vmov.f32	s18, s14
 800520c:	eef0 9a67 	vmov.f32	s19, s15
 8005210:	4682      	mov	sl, r0
 8005212:	f7fb f851 	bl	80002b8 <__aeabi_dsub>
 8005216:	4652      	mov	r2, sl
 8005218:	4606      	mov	r6, r0
 800521a:	460f      	mov	r7, r1
 800521c:	462b      	mov	r3, r5
 800521e:	ec51 0b19 	vmov	r0, r1, d9
 8005222:	f7fb f84b 	bl	80002bc <__adddf3>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	2000      	movs	r0, #0
 800522c:	49bb      	ldr	r1, [pc, #748]	; (800551c <__ieee754_pow+0x76c>)
 800522e:	f7fb fb25 	bl	800087c <__aeabi_ddiv>
 8005232:	ec41 0b1a 	vmov	d10, r0, r1
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb f9f3 	bl	8000628 <__aeabi_dmul>
 8005242:	2300      	movs	r3, #0
 8005244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005248:	9302      	str	r3, [sp, #8]
 800524a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800524e:	46ab      	mov	fp, r5
 8005250:	106d      	asrs	r5, r5, #1
 8005252:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005256:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800525a:	ec41 0b18 	vmov	d8, r0, r1
 800525e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005262:	2200      	movs	r2, #0
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	4614      	mov	r4, r2
 800526a:	461d      	mov	r5, r3
 800526c:	f7fb f9dc 	bl	8000628 <__aeabi_dmul>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4630      	mov	r0, r6
 8005276:	4639      	mov	r1, r7
 8005278:	f7fb f81e 	bl	80002b8 <__aeabi_dsub>
 800527c:	ec53 2b19 	vmov	r2, r3, d9
 8005280:	4606      	mov	r6, r0
 8005282:	460f      	mov	r7, r1
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb f816 	bl	80002b8 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4650      	mov	r0, sl
 8005292:	4659      	mov	r1, fp
 8005294:	f7fb f810 	bl	80002b8 <__aeabi_dsub>
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	f7fb f9c4 	bl	8000628 <__aeabi_dmul>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4630      	mov	r0, r6
 80052a6:	4639      	mov	r1, r7
 80052a8:	f7fb f806 	bl	80002b8 <__aeabi_dsub>
 80052ac:	ec53 2b1a 	vmov	r2, r3, d10
 80052b0:	f7fb f9ba 	bl	8000628 <__aeabi_dmul>
 80052b4:	ec53 2b18 	vmov	r2, r3, d8
 80052b8:	ec41 0b19 	vmov	d9, r0, r1
 80052bc:	ec51 0b18 	vmov	r0, r1, d8
 80052c0:	f7fb f9b2 	bl	8000628 <__aeabi_dmul>
 80052c4:	a37c      	add	r3, pc, #496	; (adr r3, 80054b8 <__ieee754_pow+0x708>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	4604      	mov	r4, r0
 80052cc:	460d      	mov	r5, r1
 80052ce:	f7fb f9ab 	bl	8000628 <__aeabi_dmul>
 80052d2:	a37b      	add	r3, pc, #492	; (adr r3, 80054c0 <__ieee754_pow+0x710>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fa fff0 	bl	80002bc <__adddf3>
 80052dc:	4622      	mov	r2, r4
 80052de:	462b      	mov	r3, r5
 80052e0:	f7fb f9a2 	bl	8000628 <__aeabi_dmul>
 80052e4:	a378      	add	r3, pc, #480	; (adr r3, 80054c8 <__ieee754_pow+0x718>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fa ffe7 	bl	80002bc <__adddf3>
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	f7fb f999 	bl	8000628 <__aeabi_dmul>
 80052f6:	a376      	add	r3, pc, #472	; (adr r3, 80054d0 <__ieee754_pow+0x720>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ffde 	bl	80002bc <__adddf3>
 8005300:	4622      	mov	r2, r4
 8005302:	462b      	mov	r3, r5
 8005304:	f7fb f990 	bl	8000628 <__aeabi_dmul>
 8005308:	a373      	add	r3, pc, #460	; (adr r3, 80054d8 <__ieee754_pow+0x728>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fa ffd5 	bl	80002bc <__adddf3>
 8005312:	4622      	mov	r2, r4
 8005314:	462b      	mov	r3, r5
 8005316:	f7fb f987 	bl	8000628 <__aeabi_dmul>
 800531a:	a371      	add	r3, pc, #452	; (adr r3, 80054e0 <__ieee754_pow+0x730>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fa ffcc 	bl	80002bc <__adddf3>
 8005324:	4622      	mov	r2, r4
 8005326:	4606      	mov	r6, r0
 8005328:	460f      	mov	r7, r1
 800532a:	462b      	mov	r3, r5
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fb f97a 	bl	8000628 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	f7fb f974 	bl	8000628 <__aeabi_dmul>
 8005340:	4642      	mov	r2, r8
 8005342:	4604      	mov	r4, r0
 8005344:	460d      	mov	r5, r1
 8005346:	464b      	mov	r3, r9
 8005348:	ec51 0b18 	vmov	r0, r1, d8
 800534c:	f7fa ffb6 	bl	80002bc <__adddf3>
 8005350:	ec53 2b19 	vmov	r2, r3, d9
 8005354:	f7fb f968 	bl	8000628 <__aeabi_dmul>
 8005358:	4622      	mov	r2, r4
 800535a:	462b      	mov	r3, r5
 800535c:	f7fa ffae 	bl	80002bc <__adddf3>
 8005360:	4642      	mov	r2, r8
 8005362:	4682      	mov	sl, r0
 8005364:	468b      	mov	fp, r1
 8005366:	464b      	mov	r3, r9
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fb f95c 	bl	8000628 <__aeabi_dmul>
 8005370:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <__ieee754_pow+0x770>)
 8005372:	2200      	movs	r2, #0
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	f7fa ffa0 	bl	80002bc <__adddf3>
 800537c:	4652      	mov	r2, sl
 800537e:	465b      	mov	r3, fp
 8005380:	f7fa ff9c 	bl	80002bc <__adddf3>
 8005384:	2000      	movs	r0, #0
 8005386:	4604      	mov	r4, r0
 8005388:	460d      	mov	r5, r1
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb f949 	bl	8000628 <__aeabi_dmul>
 8005396:	4b62      	ldr	r3, [pc, #392]	; (8005520 <__ieee754_pow+0x770>)
 8005398:	4680      	mov	r8, r0
 800539a:	4689      	mov	r9, r1
 800539c:	2200      	movs	r2, #0
 800539e:	4620      	mov	r0, r4
 80053a0:	4629      	mov	r1, r5
 80053a2:	f7fa ff89 	bl	80002b8 <__aeabi_dsub>
 80053a6:	4632      	mov	r2, r6
 80053a8:	463b      	mov	r3, r7
 80053aa:	f7fa ff85 	bl	80002b8 <__aeabi_dsub>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4650      	mov	r0, sl
 80053b4:	4659      	mov	r1, fp
 80053b6:	f7fa ff7f 	bl	80002b8 <__aeabi_dsub>
 80053ba:	ec53 2b18 	vmov	r2, r3, d8
 80053be:	f7fb f933 	bl	8000628 <__aeabi_dmul>
 80053c2:	4622      	mov	r2, r4
 80053c4:	4606      	mov	r6, r0
 80053c6:	460f      	mov	r7, r1
 80053c8:	462b      	mov	r3, r5
 80053ca:	ec51 0b19 	vmov	r0, r1, d9
 80053ce:	f7fb f92b 	bl	8000628 <__aeabi_dmul>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4630      	mov	r0, r6
 80053d8:	4639      	mov	r1, r7
 80053da:	f7fa ff6f 	bl	80002bc <__adddf3>
 80053de:	4606      	mov	r6, r0
 80053e0:	460f      	mov	r7, r1
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fa ff67 	bl	80002bc <__adddf3>
 80053ee:	a33e      	add	r3, pc, #248	; (adr r3, 80054e8 <__ieee754_pow+0x738>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	2000      	movs	r0, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	f7fb f915 	bl	8000628 <__aeabi_dmul>
 80053fe:	4642      	mov	r2, r8
 8005400:	ec41 0b18 	vmov	d8, r0, r1
 8005404:	464b      	mov	r3, r9
 8005406:	4620      	mov	r0, r4
 8005408:	4629      	mov	r1, r5
 800540a:	f7fa ff55 	bl	80002b8 <__aeabi_dsub>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4630      	mov	r0, r6
 8005414:	4639      	mov	r1, r7
 8005416:	f7fa ff4f 	bl	80002b8 <__aeabi_dsub>
 800541a:	a335      	add	r3, pc, #212	; (adr r3, 80054f0 <__ieee754_pow+0x740>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb f902 	bl	8000628 <__aeabi_dmul>
 8005424:	a334      	add	r3, pc, #208	; (adr r3, 80054f8 <__ieee754_pow+0x748>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	4606      	mov	r6, r0
 800542c:	460f      	mov	r7, r1
 800542e:	4620      	mov	r0, r4
 8005430:	4629      	mov	r1, r5
 8005432:	f7fb f8f9 	bl	8000628 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa ff3d 	bl	80002bc <__adddf3>
 8005442:	9a07      	ldr	r2, [sp, #28]
 8005444:	4b37      	ldr	r3, [pc, #220]	; (8005524 <__ieee754_pow+0x774>)
 8005446:	4413      	add	r3, r2
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa ff36 	bl	80002bc <__adddf3>
 8005450:	4682      	mov	sl, r0
 8005452:	9805      	ldr	r0, [sp, #20]
 8005454:	468b      	mov	fp, r1
 8005456:	f7fb f87d 	bl	8000554 <__aeabi_i2d>
 800545a:	9a07      	ldr	r2, [sp, #28]
 800545c:	4b32      	ldr	r3, [pc, #200]	; (8005528 <__ieee754_pow+0x778>)
 800545e:	4413      	add	r3, r2
 8005460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005464:	4606      	mov	r6, r0
 8005466:	460f      	mov	r7, r1
 8005468:	4652      	mov	r2, sl
 800546a:	465b      	mov	r3, fp
 800546c:	ec51 0b18 	vmov	r0, r1, d8
 8005470:	f7fa ff24 	bl	80002bc <__adddf3>
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	f7fa ff20 	bl	80002bc <__adddf3>
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	f7fa ff1c 	bl	80002bc <__adddf3>
 8005484:	2000      	movs	r0, #0
 8005486:	4632      	mov	r2, r6
 8005488:	463b      	mov	r3, r7
 800548a:	4604      	mov	r4, r0
 800548c:	460d      	mov	r5, r1
 800548e:	f7fa ff13 	bl	80002b8 <__aeabi_dsub>
 8005492:	4642      	mov	r2, r8
 8005494:	464b      	mov	r3, r9
 8005496:	f7fa ff0f 	bl	80002b8 <__aeabi_dsub>
 800549a:	ec53 2b18 	vmov	r2, r3, d8
 800549e:	f7fa ff0b 	bl	80002b8 <__aeabi_dsub>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4650      	mov	r0, sl
 80054a8:	4659      	mov	r1, fp
 80054aa:	e610      	b.n	80050ce <__ieee754_pow+0x31e>
 80054ac:	2401      	movs	r4, #1
 80054ae:	e6a1      	b.n	80051f4 <__ieee754_pow+0x444>
 80054b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005500 <__ieee754_pow+0x750>
 80054b4:	e617      	b.n	80050e6 <__ieee754_pow+0x336>
 80054b6:	bf00      	nop
 80054b8:	4a454eef 	.word	0x4a454eef
 80054bc:	3fca7e28 	.word	0x3fca7e28
 80054c0:	93c9db65 	.word	0x93c9db65
 80054c4:	3fcd864a 	.word	0x3fcd864a
 80054c8:	a91d4101 	.word	0xa91d4101
 80054cc:	3fd17460 	.word	0x3fd17460
 80054d0:	518f264d 	.word	0x518f264d
 80054d4:	3fd55555 	.word	0x3fd55555
 80054d8:	db6fabff 	.word	0xdb6fabff
 80054dc:	3fdb6db6 	.word	0x3fdb6db6
 80054e0:	33333303 	.word	0x33333303
 80054e4:	3fe33333 	.word	0x3fe33333
 80054e8:	e0000000 	.word	0xe0000000
 80054ec:	3feec709 	.word	0x3feec709
 80054f0:	dc3a03fd 	.word	0xdc3a03fd
 80054f4:	3feec709 	.word	0x3feec709
 80054f8:	145b01f5 	.word	0x145b01f5
 80054fc:	be3e2fe0 	.word	0xbe3e2fe0
 8005500:	00000000 	.word	0x00000000
 8005504:	3ff00000 	.word	0x3ff00000
 8005508:	7ff00000 	.word	0x7ff00000
 800550c:	43400000 	.word	0x43400000
 8005510:	0003988e 	.word	0x0003988e
 8005514:	000bb679 	.word	0x000bb679
 8005518:	08005ba0 	.word	0x08005ba0
 800551c:	3ff00000 	.word	0x3ff00000
 8005520:	40080000 	.word	0x40080000
 8005524:	08005bc0 	.word	0x08005bc0
 8005528:	08005bb0 	.word	0x08005bb0
 800552c:	a3b3      	add	r3, pc, #716	; (adr r3, 80057fc <__ieee754_pow+0xa4c>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	4640      	mov	r0, r8
 8005534:	4649      	mov	r1, r9
 8005536:	f7fa fec1 	bl	80002bc <__adddf3>
 800553a:	4622      	mov	r2, r4
 800553c:	ec41 0b1a 	vmov	d10, r0, r1
 8005540:	462b      	mov	r3, r5
 8005542:	4630      	mov	r0, r6
 8005544:	4639      	mov	r1, r7
 8005546:	f7fa feb7 	bl	80002b8 <__aeabi_dsub>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	ec51 0b1a 	vmov	r0, r1, d10
 8005552:	f7fb faf9 	bl	8000b48 <__aeabi_dcmpgt>
 8005556:	2800      	cmp	r0, #0
 8005558:	f47f ae04 	bne.w	8005164 <__ieee754_pow+0x3b4>
 800555c:	4aa2      	ldr	r2, [pc, #648]	; (80057e8 <__ieee754_pow+0xa38>)
 800555e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005562:	4293      	cmp	r3, r2
 8005564:	f340 8107 	ble.w	8005776 <__ieee754_pow+0x9c6>
 8005568:	151b      	asrs	r3, r3, #20
 800556a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800556e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005572:	fa4a fa03 	asr.w	sl, sl, r3
 8005576:	44da      	add	sl, fp
 8005578:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800557c:	489b      	ldr	r0, [pc, #620]	; (80057ec <__ieee754_pow+0xa3c>)
 800557e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005582:	4108      	asrs	r0, r1
 8005584:	ea00 030a 	and.w	r3, r0, sl
 8005588:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800558c:	f1c1 0114 	rsb	r1, r1, #20
 8005590:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005594:	fa4a fa01 	asr.w	sl, sl, r1
 8005598:	f1bb 0f00 	cmp.w	fp, #0
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	bfb8      	it	lt
 80055a6:	f1ca 0a00 	rsblt	sl, sl, #0
 80055aa:	f7fa fe85 	bl	80002b8 <__aeabi_dsub>
 80055ae:	ec41 0b19 	vmov	d9, r0, r1
 80055b2:	4642      	mov	r2, r8
 80055b4:	464b      	mov	r3, r9
 80055b6:	ec51 0b19 	vmov	r0, r1, d9
 80055ba:	f7fa fe7f 	bl	80002bc <__adddf3>
 80055be:	a37a      	add	r3, pc, #488	; (adr r3, 80057a8 <__ieee754_pow+0x9f8>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	2000      	movs	r0, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	460d      	mov	r5, r1
 80055ca:	f7fb f82d 	bl	8000628 <__aeabi_dmul>
 80055ce:	ec53 2b19 	vmov	r2, r3, d9
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa fe6d 	bl	80002b8 <__aeabi_dsub>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fe67 	bl	80002b8 <__aeabi_dsub>
 80055ea:	a371      	add	r3, pc, #452	; (adr r3, 80057b0 <__ieee754_pow+0xa00>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f7fb f81a 	bl	8000628 <__aeabi_dmul>
 80055f4:	a370      	add	r3, pc, #448	; (adr r3, 80057b8 <__ieee754_pow+0xa08>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	4680      	mov	r8, r0
 80055fc:	4689      	mov	r9, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fb f811 	bl	8000628 <__aeabi_dmul>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fa fe55 	bl	80002bc <__adddf3>
 8005612:	4604      	mov	r4, r0
 8005614:	460d      	mov	r5, r1
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4630      	mov	r0, r6
 800561c:	4639      	mov	r1, r7
 800561e:	f7fa fe4d 	bl	80002bc <__adddf3>
 8005622:	4632      	mov	r2, r6
 8005624:	463b      	mov	r3, r7
 8005626:	4680      	mov	r8, r0
 8005628:	4689      	mov	r9, r1
 800562a:	f7fa fe45 	bl	80002b8 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fa fe3f 	bl	80002b8 <__aeabi_dsub>
 800563a:	4642      	mov	r2, r8
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	464b      	mov	r3, r9
 8005642:	4640      	mov	r0, r8
 8005644:	4649      	mov	r1, r9
 8005646:	f7fa ffef 	bl	8000628 <__aeabi_dmul>
 800564a:	a35d      	add	r3, pc, #372	; (adr r3, 80057c0 <__ieee754_pow+0xa10>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	f7fa ffe8 	bl	8000628 <__aeabi_dmul>
 8005658:	a35b      	add	r3, pc, #364	; (adr r3, 80057c8 <__ieee754_pow+0xa18>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa fe2b 	bl	80002b8 <__aeabi_dsub>
 8005662:	4622      	mov	r2, r4
 8005664:	462b      	mov	r3, r5
 8005666:	f7fa ffdf 	bl	8000628 <__aeabi_dmul>
 800566a:	a359      	add	r3, pc, #356	; (adr r3, 80057d0 <__ieee754_pow+0xa20>)
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f7fa fe24 	bl	80002bc <__adddf3>
 8005674:	4622      	mov	r2, r4
 8005676:	462b      	mov	r3, r5
 8005678:	f7fa ffd6 	bl	8000628 <__aeabi_dmul>
 800567c:	a356      	add	r3, pc, #344	; (adr r3, 80057d8 <__ieee754_pow+0xa28>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fa fe19 	bl	80002b8 <__aeabi_dsub>
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	f7fa ffcd 	bl	8000628 <__aeabi_dmul>
 800568e:	a354      	add	r3, pc, #336	; (adr r3, 80057e0 <__ieee754_pow+0xa30>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fa fe12 	bl	80002bc <__adddf3>
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	f7fa ffc4 	bl	8000628 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fe06 	bl	80002b8 <__aeabi_dsub>
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4640      	mov	r0, r8
 80056b6:	4649      	mov	r1, r9
 80056b8:	f7fa ffb6 	bl	8000628 <__aeabi_dmul>
 80056bc:	2200      	movs	r2, #0
 80056be:	ec41 0b19 	vmov	d9, r0, r1
 80056c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fdf5 	bl	80002b8 <__aeabi_dsub>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	ec51 0b19 	vmov	r0, r1, d9
 80056d6:	f7fb f8d1 	bl	800087c <__aeabi_ddiv>
 80056da:	4632      	mov	r2, r6
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	463b      	mov	r3, r7
 80056e2:	4640      	mov	r0, r8
 80056e4:	4649      	mov	r1, r9
 80056e6:	f7fa ff9f 	bl	8000628 <__aeabi_dmul>
 80056ea:	4632      	mov	r2, r6
 80056ec:	463b      	mov	r3, r7
 80056ee:	f7fa fde5 	bl	80002bc <__adddf3>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa fddd 	bl	80002b8 <__aeabi_dsub>
 80056fe:	4642      	mov	r2, r8
 8005700:	464b      	mov	r3, r9
 8005702:	f7fa fdd9 	bl	80002b8 <__aeabi_dsub>
 8005706:	460b      	mov	r3, r1
 8005708:	4602      	mov	r2, r0
 800570a:	4939      	ldr	r1, [pc, #228]	; (80057f0 <__ieee754_pow+0xa40>)
 800570c:	2000      	movs	r0, #0
 800570e:	f7fa fdd3 	bl	80002b8 <__aeabi_dsub>
 8005712:	ec41 0b10 	vmov	d0, r0, r1
 8005716:	ee10 3a90 	vmov	r3, s1
 800571a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800571e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005722:	da2b      	bge.n	800577c <__ieee754_pow+0x9cc>
 8005724:	4650      	mov	r0, sl
 8005726:	f000 f877 	bl	8005818 <scalbn>
 800572a:	ec51 0b10 	vmov	r0, r1, d0
 800572e:	ec53 2b18 	vmov	r2, r3, d8
 8005732:	f7ff bbee 	b.w	8004f12 <__ieee754_pow+0x162>
 8005736:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <__ieee754_pow+0xa44>)
 8005738:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800573c:	429e      	cmp	r6, r3
 800573e:	f77f af0d 	ble.w	800555c <__ieee754_pow+0x7ac>
 8005742:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <__ieee754_pow+0xa48>)
 8005744:	440b      	add	r3, r1
 8005746:	4303      	orrs	r3, r0
 8005748:	d009      	beq.n	800575e <__ieee754_pow+0x9ae>
 800574a:	ec51 0b18 	vmov	r0, r1, d8
 800574e:	2200      	movs	r2, #0
 8005750:	2300      	movs	r3, #0
 8005752:	f7fb f9db 	bl	8000b0c <__aeabi_dcmplt>
 8005756:	3800      	subs	r0, #0
 8005758:	bf18      	it	ne
 800575a:	2001      	movne	r0, #1
 800575c:	e448      	b.n	8004ff0 <__ieee754_pow+0x240>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f7fa fda9 	bl	80002b8 <__aeabi_dsub>
 8005766:	4642      	mov	r2, r8
 8005768:	464b      	mov	r3, r9
 800576a:	f7fb f9e3 	bl	8000b34 <__aeabi_dcmpge>
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f aef4 	beq.w	800555c <__ieee754_pow+0x7ac>
 8005774:	e7e9      	b.n	800574a <__ieee754_pow+0x99a>
 8005776:	f04f 0a00 	mov.w	sl, #0
 800577a:	e71a      	b.n	80055b2 <__ieee754_pow+0x802>
 800577c:	ec51 0b10 	vmov	r0, r1, d0
 8005780:	4619      	mov	r1, r3
 8005782:	e7d4      	b.n	800572e <__ieee754_pow+0x97e>
 8005784:	491a      	ldr	r1, [pc, #104]	; (80057f0 <__ieee754_pow+0xa40>)
 8005786:	2000      	movs	r0, #0
 8005788:	f7ff bb31 	b.w	8004dee <__ieee754_pow+0x3e>
 800578c:	2000      	movs	r0, #0
 800578e:	2100      	movs	r1, #0
 8005790:	f7ff bb2d 	b.w	8004dee <__ieee754_pow+0x3e>
 8005794:	4630      	mov	r0, r6
 8005796:	4639      	mov	r1, r7
 8005798:	f7ff bb29 	b.w	8004dee <__ieee754_pow+0x3e>
 800579c:	9204      	str	r2, [sp, #16]
 800579e:	f7ff bb7b 	b.w	8004e98 <__ieee754_pow+0xe8>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f7ff bb65 	b.w	8004e72 <__ieee754_pow+0xc2>
 80057a8:	00000000 	.word	0x00000000
 80057ac:	3fe62e43 	.word	0x3fe62e43
 80057b0:	fefa39ef 	.word	0xfefa39ef
 80057b4:	3fe62e42 	.word	0x3fe62e42
 80057b8:	0ca86c39 	.word	0x0ca86c39
 80057bc:	be205c61 	.word	0xbe205c61
 80057c0:	72bea4d0 	.word	0x72bea4d0
 80057c4:	3e663769 	.word	0x3e663769
 80057c8:	c5d26bf1 	.word	0xc5d26bf1
 80057cc:	3ebbbd41 	.word	0x3ebbbd41
 80057d0:	af25de2c 	.word	0xaf25de2c
 80057d4:	3f11566a 	.word	0x3f11566a
 80057d8:	16bebd93 	.word	0x16bebd93
 80057dc:	3f66c16c 	.word	0x3f66c16c
 80057e0:	5555553e 	.word	0x5555553e
 80057e4:	3fc55555 	.word	0x3fc55555
 80057e8:	3fe00000 	.word	0x3fe00000
 80057ec:	fff00000 	.word	0xfff00000
 80057f0:	3ff00000 	.word	0x3ff00000
 80057f4:	4090cbff 	.word	0x4090cbff
 80057f8:	3f6f3400 	.word	0x3f6f3400
 80057fc:	652b82fe 	.word	0x652b82fe
 8005800:	3c971547 	.word	0x3c971547

08005804 <fabs>:
 8005804:	ec51 0b10 	vmov	r0, r1, d0
 8005808:	ee10 2a10 	vmov	r2, s0
 800580c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005810:	ec43 2b10 	vmov	d0, r2, r3
 8005814:	4770      	bx	lr
	...

08005818 <scalbn>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	ec55 4b10 	vmov	r4, r5, d0
 800581e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005822:	4606      	mov	r6, r0
 8005824:	462b      	mov	r3, r5
 8005826:	b999      	cbnz	r1, 8005850 <scalbn+0x38>
 8005828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800582c:	4323      	orrs	r3, r4
 800582e:	d03f      	beq.n	80058b0 <scalbn+0x98>
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <scalbn+0xf0>)
 8005832:	4629      	mov	r1, r5
 8005834:	ee10 0a10 	vmov	r0, s0
 8005838:	2200      	movs	r2, #0
 800583a:	f7fa fef5 	bl	8000628 <__aeabi_dmul>
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <scalbn+0xf4>)
 8005840:	429e      	cmp	r6, r3
 8005842:	4604      	mov	r4, r0
 8005844:	460d      	mov	r5, r1
 8005846:	da10      	bge.n	800586a <scalbn+0x52>
 8005848:	a327      	add	r3, pc, #156	; (adr r3, 80058e8 <scalbn+0xd0>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	e01f      	b.n	8005890 <scalbn+0x78>
 8005850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005854:	4291      	cmp	r1, r2
 8005856:	d10c      	bne.n	8005872 <scalbn+0x5a>
 8005858:	ee10 2a10 	vmov	r2, s0
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fa fd2c 	bl	80002bc <__adddf3>
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
 8005868:	e022      	b.n	80058b0 <scalbn+0x98>
 800586a:	460b      	mov	r3, r1
 800586c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005870:	3936      	subs	r1, #54	; 0x36
 8005872:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005876:	4296      	cmp	r6, r2
 8005878:	dd0d      	ble.n	8005896 <scalbn+0x7e>
 800587a:	2d00      	cmp	r5, #0
 800587c:	a11c      	add	r1, pc, #112	; (adr r1, 80058f0 <scalbn+0xd8>)
 800587e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005882:	da02      	bge.n	800588a <scalbn+0x72>
 8005884:	a11c      	add	r1, pc, #112	; (adr r1, 80058f8 <scalbn+0xe0>)
 8005886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800588a:	a319      	add	r3, pc, #100	; (adr r3, 80058f0 <scalbn+0xd8>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa feca 	bl	8000628 <__aeabi_dmul>
 8005894:	e7e6      	b.n	8005864 <scalbn+0x4c>
 8005896:	1872      	adds	r2, r6, r1
 8005898:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800589c:	428a      	cmp	r2, r1
 800589e:	dcec      	bgt.n	800587a <scalbn+0x62>
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	dd08      	ble.n	80058b6 <scalbn+0x9e>
 80058a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058b0:	ec45 4b10 	vmov	d0, r4, r5
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80058ba:	da08      	bge.n	80058ce <scalbn+0xb6>
 80058bc:	2d00      	cmp	r5, #0
 80058be:	a10a      	add	r1, pc, #40	; (adr r1, 80058e8 <scalbn+0xd0>)
 80058c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c4:	dac0      	bge.n	8005848 <scalbn+0x30>
 80058c6:	a10e      	add	r1, pc, #56	; (adr r1, 8005900 <scalbn+0xe8>)
 80058c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058cc:	e7bc      	b.n	8005848 <scalbn+0x30>
 80058ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058d2:	3236      	adds	r2, #54	; 0x36
 80058d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80058dc:	4620      	mov	r0, r4
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <scalbn+0xf8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	e7d5      	b.n	8005890 <scalbn+0x78>
 80058e4:	f3af 8000 	nop.w
 80058e8:	c2f8f359 	.word	0xc2f8f359
 80058ec:	01a56e1f 	.word	0x01a56e1f
 80058f0:	8800759c 	.word	0x8800759c
 80058f4:	7e37e43c 	.word	0x7e37e43c
 80058f8:	8800759c 	.word	0x8800759c
 80058fc:	fe37e43c 	.word	0xfe37e43c
 8005900:	c2f8f359 	.word	0xc2f8f359
 8005904:	81a56e1f 	.word	0x81a56e1f
 8005908:	43500000 	.word	0x43500000
 800590c:	ffff3cb0 	.word	0xffff3cb0
 8005910:	3c900000 	.word	0x3c900000

08005914 <with_errno>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4604      	mov	r4, r0
 8005918:	460d      	mov	r5, r1
 800591a:	4616      	mov	r6, r2
 800591c:	f7fe fd50 	bl	80043c0 <__errno>
 8005920:	4629      	mov	r1, r5
 8005922:	6006      	str	r6, [r0, #0]
 8005924:	4620      	mov	r0, r4
 8005926:	bd70      	pop	{r4, r5, r6, pc}

08005928 <xflow>:
 8005928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800592a:	4614      	mov	r4, r2
 800592c:	461d      	mov	r5, r3
 800592e:	b108      	cbz	r0, 8005934 <xflow+0xc>
 8005930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005934:	e9cd 2300 	strd	r2, r3, [sp]
 8005938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fe72 	bl	8000628 <__aeabi_dmul>
 8005944:	2222      	movs	r2, #34	; 0x22
 8005946:	b003      	add	sp, #12
 8005948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800594c:	f7ff bfe2 	b.w	8005914 <with_errno>

08005950 <__math_uflow>:
 8005950:	b508      	push	{r3, lr}
 8005952:	2200      	movs	r2, #0
 8005954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005958:	f7ff ffe6 	bl	8005928 <xflow>
 800595c:	ec41 0b10 	vmov	d0, r0, r1
 8005960:	bd08      	pop	{r3, pc}

08005962 <__math_oflow>:
 8005962:	b508      	push	{r3, lr}
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800596a:	f7ff ffdd 	bl	8005928 <xflow>
 800596e:	ec41 0b10 	vmov	d0, r0, r1
 8005972:	bd08      	pop	{r3, pc}

08005974 <__ieee754_sqrt>:
 8005974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	ec55 4b10 	vmov	r4, r5, d0
 800597c:	4e67      	ldr	r6, [pc, #412]	; (8005b1c <__ieee754_sqrt+0x1a8>)
 800597e:	43ae      	bics	r6, r5
 8005980:	ee10 0a10 	vmov	r0, s0
 8005984:	ee10 2a10 	vmov	r2, s0
 8005988:	4629      	mov	r1, r5
 800598a:	462b      	mov	r3, r5
 800598c:	d10d      	bne.n	80059aa <__ieee754_sqrt+0x36>
 800598e:	f7fa fe4b 	bl	8000628 <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fc8f 	bl	80002bc <__adddf3>
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	ec45 4b10 	vmov	d0, r4, r5
 80059a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	dc0b      	bgt.n	80059c6 <__ieee754_sqrt+0x52>
 80059ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80059b2:	4326      	orrs	r6, r4
 80059b4:	d0f5      	beq.n	80059a2 <__ieee754_sqrt+0x2e>
 80059b6:	b135      	cbz	r5, 80059c6 <__ieee754_sqrt+0x52>
 80059b8:	f7fa fc7e 	bl	80002b8 <__aeabi_dsub>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	f7fa ff5c 	bl	800087c <__aeabi_ddiv>
 80059c4:	e7eb      	b.n	800599e <__ieee754_sqrt+0x2a>
 80059c6:	1509      	asrs	r1, r1, #20
 80059c8:	f000 808d 	beq.w	8005ae6 <__ieee754_sqrt+0x172>
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80059d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d8:	07c9      	lsls	r1, r1, #31
 80059da:	bf5c      	itt	pl
 80059dc:	005b      	lslpl	r3, r3, #1
 80059de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80059e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059e6:	bf58      	it	pl
 80059e8:	0052      	lslpl	r2, r2, #1
 80059ea:	2500      	movs	r5, #0
 80059ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80059f0:	1076      	asrs	r6, r6, #1
 80059f2:	0052      	lsls	r2, r2, #1
 80059f4:	f04f 0e16 	mov.w	lr, #22
 80059f8:	46ac      	mov	ip, r5
 80059fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059fe:	eb0c 0001 	add.w	r0, ip, r1
 8005a02:	4298      	cmp	r0, r3
 8005a04:	bfde      	ittt	le
 8005a06:	1a1b      	suble	r3, r3, r0
 8005a08:	eb00 0c01 	addle.w	ip, r0, r1
 8005a0c:	186d      	addle	r5, r5, r1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	f1be 0e01 	subs.w	lr, lr, #1
 8005a14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005a18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005a1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005a20:	d1ed      	bne.n	80059fe <__ieee754_sqrt+0x8a>
 8005a22:	4674      	mov	r4, lr
 8005a24:	2720      	movs	r7, #32
 8005a26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005a2a:	4563      	cmp	r3, ip
 8005a2c:	eb01 000e 	add.w	r0, r1, lr
 8005a30:	dc02      	bgt.n	8005a38 <__ieee754_sqrt+0xc4>
 8005a32:	d113      	bne.n	8005a5c <__ieee754_sqrt+0xe8>
 8005a34:	4290      	cmp	r0, r2
 8005a36:	d811      	bhi.n	8005a5c <__ieee754_sqrt+0xe8>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	eb00 0e01 	add.w	lr, r0, r1
 8005a3e:	da57      	bge.n	8005af0 <__ieee754_sqrt+0x17c>
 8005a40:	f1be 0f00 	cmp.w	lr, #0
 8005a44:	db54      	blt.n	8005af0 <__ieee754_sqrt+0x17c>
 8005a46:	f10c 0801 	add.w	r8, ip, #1
 8005a4a:	eba3 030c 	sub.w	r3, r3, ip
 8005a4e:	4290      	cmp	r0, r2
 8005a50:	bf88      	it	hi
 8005a52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005a56:	1a12      	subs	r2, r2, r0
 8005a58:	440c      	add	r4, r1
 8005a5a:	46c4      	mov	ip, r8
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	3f01      	subs	r7, #1
 8005a60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005a64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005a6c:	d1dd      	bne.n	8005a2a <__ieee754_sqrt+0xb6>
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	d01b      	beq.n	8005aaa <__ieee754_sqrt+0x136>
 8005a72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005b20 <__ieee754_sqrt+0x1ac>
 8005a76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005b24 <__ieee754_sqrt+0x1b0>
 8005a7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8005a7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005a82:	f7fa fc19 	bl	80002b8 <__aeabi_dsub>
 8005a86:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fb f845 	bl	8000b20 <__aeabi_dcmple>
 8005a96:	b140      	cbz	r0, 8005aaa <__ieee754_sqrt+0x136>
 8005a98:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005a9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005aa0:	e9db 2300 	ldrd	r2, r3, [fp]
 8005aa4:	d126      	bne.n	8005af4 <__ieee754_sqrt+0x180>
 8005aa6:	3501      	adds	r5, #1
 8005aa8:	463c      	mov	r4, r7
 8005aaa:	106a      	asrs	r2, r5, #1
 8005aac:	0863      	lsrs	r3, r4, #1
 8005aae:	07e9      	lsls	r1, r5, #31
 8005ab0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005ab4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005ab8:	bf48      	it	mi
 8005aba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	e76d      	b.n	80059a2 <__ieee754_sqrt+0x2e>
 8005ac6:	0ad3      	lsrs	r3, r2, #11
 8005ac8:	3815      	subs	r0, #21
 8005aca:	0552      	lsls	r2, r2, #21
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0fa      	beq.n	8005ac6 <__ieee754_sqrt+0x152>
 8005ad0:	02dc      	lsls	r4, r3, #11
 8005ad2:	d50a      	bpl.n	8005aea <__ieee754_sqrt+0x176>
 8005ad4:	f1c1 0420 	rsb	r4, r1, #32
 8005ad8:	fa22 f404 	lsr.w	r4, r2, r4
 8005adc:	1e4d      	subs	r5, r1, #1
 8005ade:	408a      	lsls	r2, r1
 8005ae0:	4323      	orrs	r3, r4
 8005ae2:	1b41      	subs	r1, r0, r5
 8005ae4:	e772      	b.n	80059cc <__ieee754_sqrt+0x58>
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	e7f0      	b.n	8005acc <__ieee754_sqrt+0x158>
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	3101      	adds	r1, #1
 8005aee:	e7ef      	b.n	8005ad0 <__ieee754_sqrt+0x15c>
 8005af0:	46e0      	mov	r8, ip
 8005af2:	e7aa      	b.n	8005a4a <__ieee754_sqrt+0xd6>
 8005af4:	f7fa fbe2 	bl	80002bc <__adddf3>
 8005af8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4640      	mov	r0, r8
 8005b02:	4649      	mov	r1, r9
 8005b04:	f7fb f802 	bl	8000b0c <__aeabi_dcmplt>
 8005b08:	b120      	cbz	r0, 8005b14 <__ieee754_sqrt+0x1a0>
 8005b0a:	1ca0      	adds	r0, r4, #2
 8005b0c:	bf08      	it	eq
 8005b0e:	3501      	addeq	r5, #1
 8005b10:	3402      	adds	r4, #2
 8005b12:	e7ca      	b.n	8005aaa <__ieee754_sqrt+0x136>
 8005b14:	3401      	adds	r4, #1
 8005b16:	f024 0401 	bic.w	r4, r4, #1
 8005b1a:	e7c6      	b.n	8005aaa <__ieee754_sqrt+0x136>
 8005b1c:	7ff00000 	.word	0x7ff00000
 8005b20:	20000080 	.word	0x20000080
 8005b24:	20000088 	.word	0x20000088

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
