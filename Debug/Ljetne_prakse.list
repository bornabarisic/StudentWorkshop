
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c70  08003c70  00013c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb8  08003cb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08003d30  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003d30  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a1e  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013bb  00000000  00000000  00025b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  00026ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000400  00000000  00000000  00027430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b33  00000000  00000000  00027830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007990  00000000  00000000  00049363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d243b  00000000  00000000  00050cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ab4  00000000  00000000  00123130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00124be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c58 	.word	0x08003c58

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08003c58 	.word	0x08003c58

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b970 	b.w	8000e18 <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9e08      	ldr	r6, [sp, #32]
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	460f      	mov	r7, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14a      	bne.n	8000bf6 <__udivmoddi4+0xa6>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4694      	mov	ip, r2
 8000b64:	d965      	bls.n	8000c32 <__udivmoddi4+0xe2>
 8000b66:	fab2 f382 	clz	r3, r2
 8000b6a:	b143      	cbz	r3, 8000b7e <__udivmoddi4+0x2e>
 8000b6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b70:	f1c3 0220 	rsb	r2, r3, #32
 8000b74:	409f      	lsls	r7, r3
 8000b76:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7a:	4317      	orrs	r7, r2
 8000b7c:	409c      	lsls	r4, r3
 8000b7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b82:	fa1f f58c 	uxth.w	r5, ip
 8000b86:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b8a:	0c22      	lsrs	r2, r4, #16
 8000b8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b94:	fb01 f005 	mul.w	r0, r1, r5
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x62>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba4:	f080 811c 	bcs.w	8000de0 <__udivmoddi4+0x290>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f240 8119 	bls.w	8000de0 <__udivmoddi4+0x290>
 8000bae:	3902      	subs	r1, #2
 8000bb0:	4462      	add	r2, ip
 8000bb2:	1a12      	subs	r2, r2, r0
 8000bb4:	b2a4      	uxth	r4, r4
 8000bb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc2:	fb00 f505 	mul.w	r5, r0, r5
 8000bc6:	42a5      	cmp	r5, r4
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x90>
 8000bca:	eb1c 0404 	adds.w	r4, ip, r4
 8000bce:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd2:	f080 8107 	bcs.w	8000de4 <__udivmoddi4+0x294>
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	f240 8104 	bls.w	8000de4 <__udivmoddi4+0x294>
 8000bdc:	4464      	add	r4, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11e      	cbz	r6, 8000bf2 <__udivmoddi4+0xa2>
 8000bea:	40dc      	lsrs	r4, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0xbc>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f000 80ed 	beq.w	8000dda <__udivmoddi4+0x28a>
 8000c00:	2100      	movs	r1, #0
 8000c02:	e9c6 0500 	strd	r0, r5, [r6]
 8000c06:	4608      	mov	r0, r1
 8000c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d149      	bne.n	8000ca8 <__udivmoddi4+0x158>
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	d302      	bcc.n	8000c1e <__udivmoddi4+0xce>
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	f200 80f8 	bhi.w	8000e0e <__udivmoddi4+0x2be>
 8000c1e:	1a84      	subs	r4, r0, r2
 8000c20:	eb65 0203 	sbc.w	r2, r5, r3
 8000c24:	2001      	movs	r0, #1
 8000c26:	4617      	mov	r7, r2
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d0e2      	beq.n	8000bf2 <__udivmoddi4+0xa2>
 8000c2c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c30:	e7df      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xe6>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f382 	clz	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x210>
 8000c40:	1a8a      	subs	r2, r1, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c50:	fb07 2015 	mls	r0, r7, r5, r2
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c5a:	fb0e f005 	mul.w	r0, lr, r5
 8000c5e:	4290      	cmp	r0, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x124>
 8000c62:	eb1c 0202 	adds.w	r2, ip, r2
 8000c66:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x122>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f200 80cb 	bhi.w	8000e08 <__udivmoddi4+0x2b8>
 8000c72:	4645      	mov	r5, r8
 8000c74:	1a12      	subs	r2, r2, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c84:	fb0e fe00 	mul.w	lr, lr, r0
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x14e>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x14c>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	f200 80bb 	bhi.w	8000e12 <__udivmoddi4+0x2c2>
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca6:	e79f      	b.n	8000be8 <__udivmoddi4+0x98>
 8000ca8:	f1c1 0720 	rsb	r7, r1, #32
 8000cac:	408b      	lsls	r3, r1
 8000cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cba:	fa20 f307 	lsr.w	r3, r0, r7
 8000cbe:	40fd      	lsrs	r5, r7
 8000cc0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	fb09 5518 	mls	r5, r9, r8, r5
 8000cd2:	0c1c      	lsrs	r4, r3, #16
 8000cd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cdc:	42a5      	cmp	r5, r4
 8000cde:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce2:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b0>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf0:	f080 8088 	bcs.w	8000e04 <__udivmoddi4+0x2b4>
 8000cf4:	42a5      	cmp	r5, r4
 8000cf6:	f240 8085 	bls.w	8000e04 <__udivmoddi4+0x2b4>
 8000cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfe:	4464      	add	r4, ip
 8000d00:	1b64      	subs	r4, r4, r5
 8000d02:	b29d      	uxth	r5, r3
 8000d04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d08:	fb09 4413 	mls	r4, r9, r3, r4
 8000d0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1da>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d20:	d26c      	bcs.n	8000dfc <__udivmoddi4+0x2ac>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	d96a      	bls.n	8000dfc <__udivmoddi4+0x2ac>
 8000d26:	3b02      	subs	r3, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	42ac      	cmp	r4, r5
 8000d38:	46c8      	mov	r8, r9
 8000d3a:	46ae      	mov	lr, r5
 8000d3c:	d356      	bcc.n	8000dec <__udivmoddi4+0x29c>
 8000d3e:	d053      	beq.n	8000de8 <__udivmoddi4+0x298>
 8000d40:	b156      	cbz	r6, 8000d58 <__udivmoddi4+0x208>
 8000d42:	ebb0 0208 	subs.w	r2, r0, r8
 8000d46:	eb64 040e 	sbc.w	r4, r4, lr
 8000d4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4e:	40ca      	lsrs	r2, r1
 8000d50:	40cc      	lsrs	r4, r1
 8000d52:	4317      	orrs	r7, r2
 8000d54:	e9c6 7400 	strd	r7, r4, [r6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	f1c3 0120 	rsb	r1, r3, #32
 8000d64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d68:	fa20 f201 	lsr.w	r2, r0, r1
 8000d6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d70:	409d      	lsls	r5, r3
 8000d72:	432a      	orrs	r2, r5
 8000d74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1510 	mls	r5, r7, r0, r1
 8000d84:	0c11      	lsrs	r1, r2, #16
 8000d86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8e:	428d      	cmp	r5, r1
 8000d90:	fa04 f403 	lsl.w	r4, r4, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x258>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9e:	d22f      	bcs.n	8000e00 <__udivmoddi4+0x2b0>
 8000da0:	428d      	cmp	r5, r1
 8000da2:	d92d      	bls.n	8000e00 <__udivmoddi4+0x2b0>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	1b49      	subs	r1, r1, r5
 8000daa:	b292      	uxth	r2, r2
 8000dac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000db0:	fb07 1115 	mls	r1, r7, r5, r1
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dbc:	4291      	cmp	r1, r2
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x282>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc8:	d216      	bcs.n	8000df8 <__udivmoddi4+0x2a8>
 8000dca:	4291      	cmp	r1, r2
 8000dcc:	d914      	bls.n	8000df8 <__udivmoddi4+0x2a8>
 8000dce:	3d02      	subs	r5, #2
 8000dd0:	4462      	add	r2, ip
 8000dd2:	1a52      	subs	r2, r2, r1
 8000dd4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd8:	e738      	b.n	8000c4c <__udivmoddi4+0xfc>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000de0:	4639      	mov	r1, r7
 8000de2:	e6e6      	b.n	8000bb2 <__udivmoddi4+0x62>
 8000de4:	4610      	mov	r0, r2
 8000de6:	e6fb      	b.n	8000be0 <__udivmoddi4+0x90>
 8000de8:	4548      	cmp	r0, r9
 8000dea:	d2a9      	bcs.n	8000d40 <__udivmoddi4+0x1f0>
 8000dec:	ebb9 0802 	subs.w	r8, r9, r2
 8000df0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df4:	3b01      	subs	r3, #1
 8000df6:	e7a3      	b.n	8000d40 <__udivmoddi4+0x1f0>
 8000df8:	4645      	mov	r5, r8
 8000dfa:	e7ea      	b.n	8000dd2 <__udivmoddi4+0x282>
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	e794      	b.n	8000d2a <__udivmoddi4+0x1da>
 8000e00:	4640      	mov	r0, r8
 8000e02:	e7d1      	b.n	8000da8 <__udivmoddi4+0x258>
 8000e04:	46d0      	mov	r8, sl
 8000e06:	e77b      	b.n	8000d00 <__udivmoddi4+0x1b0>
 8000e08:	3d02      	subs	r5, #2
 8000e0a:	4462      	add	r2, ip
 8000e0c:	e732      	b.n	8000c74 <__udivmoddi4+0x124>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e70a      	b.n	8000c28 <__udivmoddi4+0xd8>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e742      	b.n	8000c9e <__udivmoddi4+0x14e>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 faa4 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f858 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 f916 	bl	800105c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e30:	f000 f8c2 	bl	8000fb8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <main+0xa8>)
 8000e36:	f000 fb75 	bl	8001524 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3e:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <main+0xa8>)
 8000e40:	f000 fc75 	bl	800172e <HAL_ADC_PollForConversion>
	  readVal = HAL_ADC_GetValue(&hadc1);
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <main+0xa8>)
 8000e46:	f000 fcfd 	bl	8001844 <HAL_ADC_GetValue>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <main+0xac>)
 8000e50:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc1);
 8000e52:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <main+0xa8>)
 8000e54:	f000 fc38 	bl	80016c8 <HAL_ADC_Stop>
	  // log e (x)
//	  delay_factor = 0.01 + 0.119*log10((1 + (double)readVal));
	  // log 10 (x)
//	  delay_factor = 0.01 + 0.27406*log10((1 + (double)readVal));
	  // exponential
	  delay_factor = 0.1 * pow(1.0005623126, (double)readVal);
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <main+0xac>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb15 	bl	800048c <__aeabi_ui2d>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	ec43 2b11 	vmov	d1, r2, r3
 8000e6a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8000eb8 <main+0x98>
 8000e6e:	f001 ffb9 	bl	8002de4 <pow>
 8000e72:	ec51 0b10 	vmov	r0, r1, d0
 8000e76:	a312      	add	r3, pc, #72	; (adr r3, 8000ec0 <main+0xa0>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fb80 	bl	8000580 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4912      	ldr	r1, [pc, #72]	; (8000ed0 <main+0xb0>)
 8000e86:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1000*delay_factor);
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <main+0xb0>)
 8000e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <main+0xb4>)
 8000e96:	f7ff fb73 	bl	8000580 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe1d 	bl	8000ae0 <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fad3 	bl	8001454 <HAL_Delay>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <main+0xb8>)
 8000eb2:	f001 f996 	bl	80021e2 <HAL_GPIO_TogglePin>
	  HAL_ADC_Start(&hadc1);
 8000eb6:	e7bd      	b.n	8000e34 <main+0x14>
 8000eb8:	a0a3a252 	.word	0xa0a3a252
 8000ebc:	3ff0024d 	.word	0x3ff0024d
 8000ec0:	9999999a 	.word	0x9999999a
 8000ec4:	3fb99999 	.word	0x3fb99999
 8000ec8:	2000008c 	.word	0x2000008c
 8000ecc:	200000d4 	.word	0x200000d4
 8000ed0:	200000d8 	.word	0x200000d8
 8000ed4:	408f4000 	.word	0x408f4000
 8000ed8:	40020000 	.word	0x40020000

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2234      	movs	r2, #52	; 0x34
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 ff48 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f50:	2310      	movs	r3, #16
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc6a 	bl	8002844 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f76:	f000 f923 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f93e 	bl	8002218 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fa2:	f000 f90d 	bl	80011c0 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <MX_ADC1_Init+0x9c>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <MX_ADC1_Init+0xa0>)
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_ADC1_Init+0x98>)
 8001006:	2201      	movs	r2, #1
 8001008:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_ADC1_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_ADC1_Init+0x98>)
 800101a:	f000 fa3f 	bl	800149c <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 f8cc 	bl	80011c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_ADC1_Init+0x98>)
 800103a:	f000 fc11 	bl	8001860 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 f8bc 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000008c 	.word	0x2000008c
 8001054:	40012000 	.word	0x40012000
 8001058:	0f000001 	.word	0x0f000001

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <MX_GPIO_Init+0x154>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <MX_GPIO_Init+0x154>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <MX_GPIO_Init+0x154>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <MX_GPIO_Init+0x154>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <MX_GPIO_Init+0x154>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_GPIO_Init+0x154>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <MX_GPIO_Init+0x158>)
 80010e8:	f001 f862 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	482d      	ldr	r0, [pc, #180]	; (80011b8 <MX_GPIO_Init+0x15c>)
 8001104:	f000 fec0 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001108:	230c      	movs	r3, #12
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001118:	2307      	movs	r3, #7
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4824      	ldr	r0, [pc, #144]	; (80011b4 <MX_GPIO_Init+0x158>)
 8001124:	f000 feb0 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001128:	2320      	movs	r3, #32
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	481d      	ldr	r0, [pc, #116]	; (80011b4 <MX_GPIO_Init+0x158>)
 8001140:	f000 fea2 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x15c>)
 8001162:	f000 fe91 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001178:	2304      	movs	r3, #4
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_GPIO_Init+0x158>)
 8001184:	f000 fe80 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_GPIO_Init+0x160>)
 80011a4:	f000 fe70 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020400 	.word	0x40020400

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120a:	2007      	movs	r0, #7
 800120c:	f000 fe08 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_ADC_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d127      	bne.n	800128e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_ADC_MspInit+0x80>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_ADC_MspInit+0x80>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_MspInit+0x80>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_ADC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_ADC_MspInit+0x80>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_ADC_MspInit+0x80>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_ADC_MspInit+0x84>)
 800128a:	f000 fdfd 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40012000 	.word	0x40012000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 f890 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemInit+0x20>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <SystemInit+0x20>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001320:	f7ff ffea 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 fd27 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff fd67 	bl	8000e20 <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001360:	08003cc0 	.word	0x08003cc0
  ldr r2, =_sbss
 8001364:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001368:	2000021c 	.word	0x2000021c

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_Init+0x40>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_Init+0x40>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_Init+0x40>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 fd41 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f808 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a4:	f7ff ff12 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x54>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x58>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd4b 	bl	8001e6e <HAL_SYSTICK_Config>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00e      	b.n	8001400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d80a      	bhi.n	80013fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 fd21 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_InitTick+0x5c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	20000008 	.word	0x20000008
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200000e0 	.word	0x200000e0

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200000e0 	.word	0x200000e0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e033      	b.n	800151a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff feae 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014e2:	f023 0302 	bic.w	r3, r3, #2
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fae8 	bl	8001ac4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
 800150a:	e001      	b.n	8001510 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_Start+0x1a>
 800153a:	2302      	movs	r3, #2
 800153c:	e0b2      	b.n	80016a4 <HAL_ADC_Start+0x180>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001564:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <HAL_ADC_Start+0x18c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_ADC_Start+0x190>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9a      	lsrs	r2, r3, #18
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d17a      	bne.n	800168a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f023 0206 	bic.w	r2, r3, #6
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	645a      	str	r2, [r3, #68]	; 0x44
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_ADC_Start+0x194>)
 80015f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d12a      	bne.n	8001660 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <HAL_ADC_Start+0x198>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d015      	beq.n	8001640 <HAL_ADC_Start+0x11c>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_ADC_Start+0x19c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d105      	bne.n	800162a <HAL_ADC_Start+0x106>
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_ADC_Start+0x194>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_ADC_Start+0x1a0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d136      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_ADC_Start+0x194>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d130      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d129      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e020      	b.n	80016a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <HAL_ADC_Start+0x198>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11b      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d114      	bne.n	80016a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00b      	b.n	80016a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20000000 	.word	0x20000000
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	40012300 	.word	0x40012300
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40012100 	.word	0x40012100
 80016c4:	40012200 	.word	0x40012200

080016c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Stop+0x16>
 80016da:	2302      	movs	r3, #2
 80016dc:	e021      	b.n	8001722 <HAL_ADC_Stop+0x5a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d113      	bne.n	8001774 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800175a:	d10b      	bne.n	8001774 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e063      	b.n	800183c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fe62 	bl	800143c <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800177a:	e021      	b.n	80017c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001782:	d01d      	beq.n	80017c0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_ADC_PollForConversion+0x6c>
 800178a:	f7ff fe57 	bl	800143c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d212      	bcs.n	80017c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d00b      	beq.n	80017c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f043 0204 	orr.w	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03d      	b.n	800183c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d1d6      	bne.n	800177c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f06f 0212 	mvn.w	r2, #18
 80017d6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d123      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11f      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	d111      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1c>
 8001878:	2302      	movs	r3, #2
 800187a:	e113      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x244>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d925      	bls.n	80018d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	3b1e      	subs	r3, #30
 80018a2:	2207      	movs	r2, #7
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43da      	mvns	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68d9      	ldr	r1, [r3, #12]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4403      	add	r3, r0
 80018ca:	3b1e      	subs	r3, #30
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	e022      	b.n	800191e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	2207      	movs	r2, #7
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6919      	ldr	r1, [r3, #16]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	4603      	mov	r3, r0
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4403      	add	r3, r0
 8001914:	409a      	lsls	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d824      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b05      	subs	r3, #5
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b05      	subs	r3, #5
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
 800196e:	e04c      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d824      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b23      	subs	r3, #35	; 0x23
 800198a:	221f      	movs	r2, #31
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43da      	mvns	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	400a      	ands	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b23      	subs	r3, #35	; 0x23
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
 80019c0:	e023      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b41      	subs	r3, #65	; 0x41
 80019d4:	221f      	movs	r2, #31
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	400a      	ands	r2, r1
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b41      	subs	r3, #65	; 0x41
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_ADC_ConfigChannel+0x250>)
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_ADC_ConfigChannel+0x254>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d10f      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1d8>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d10b      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_ADC_ConfigChannel+0x254>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12b      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x23a>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_ADC_ConfigChannel+0x258>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0x1f4>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d122      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_ADC_ConfigChannel+0x258>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d111      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_ADC_ConfigChannel+0x25c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_ADC_ConfigChannel+0x260>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9a      	lsrs	r2, r3, #18
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40012300 	.word	0x40012300
 8001ab4:	40012000 	.word	0x40012000
 8001ab8:	10000012 	.word	0x10000012
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001acc:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <ADC_Init+0x1f0>)
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <ADC_Init+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e00f      	b.n	8001bc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0202 	bic.w	r2, r2, #2
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
 8001bdc:	005a      	lsls	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	035a      	lsls	r2, r3, #13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e007      	b.n	8001c38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	051a      	lsls	r2, r3, #20
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7a:	025a      	lsls	r2, r3, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	029a      	lsls	r2, r3, #10
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	0f000001 	.word	0x0f000001

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff47 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff5c 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffb0 	bl	8001ddc <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e165      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 8154 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d130      	bne.n	8001f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d017      	beq.n	8001f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d123      	bne.n	8001fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80ae 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_GPIO_Init+0x304>)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_GPIO_Init+0x308>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d025      	beq.n	80020a2 <HAL_GPIO_Init+0x21a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_GPIO_Init+0x30c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <HAL_GPIO_Init+0x216>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4d      	ldr	r2, [pc, #308]	; (8002198 <HAL_GPIO_Init+0x310>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x212>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x314>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_GPIO_Init+0x318>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x20a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_GPIO_Init+0x31c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x206>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a49      	ldr	r2, [pc, #292]	; (80021a8 <HAL_GPIO_Init+0x320>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x202>
 8002086:	2306      	movs	r3, #6
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800208a:	2307      	movs	r3, #7
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <HAL_GPIO_Init+0x304>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a31      	ldr	r2, [pc, #196]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_GPIO_Init+0x324>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae96 	bls.w	8001ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f4:	887a      	ldrh	r2, [r7, #2]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43d9      	mvns	r1, r3
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	400b      	ands	r3, r1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff f898 	bl	800143c <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff f894 	bl	800143c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fff8 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08003c70 	.word	0x08003c70
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b0ae      	sub	sp, #184	; 0xb8
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240a:	4bcb      	ldr	r3, [pc, #812]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b0c      	cmp	r3, #12
 8002414:	f200 8206 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x440>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_RCC_GetSysClockFreq+0x3c>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002455 	.word	0x08002455
 8002424:	08002825 	.word	0x08002825
 8002428:	08002825 	.word	0x08002825
 800242c:	08002825 	.word	0x08002825
 8002430:	0800245d 	.word	0x0800245d
 8002434:	08002825 	.word	0x08002825
 8002438:	08002825 	.word	0x08002825
 800243c:	08002825 	.word	0x08002825
 8002440:	08002465 	.word	0x08002465
 8002444:	08002825 	.word	0x08002825
 8002448:	08002825 	.word	0x08002825
 800244c:	08002825 	.word	0x08002825
 8002450:	08002655 	.word	0x08002655
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4bb9      	ldr	r3, [pc, #740]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800245a:	e1e7      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4bb8      	ldr	r3, [pc, #736]	; (8002740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002462:	e1e3      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4bb4      	ldr	r3, [pc, #720]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800246c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002470:	4bb1      	ldr	r3, [pc, #708]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d071      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4bae      	ldr	r3, [pc, #696]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002488:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800249e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4621      	mov	r1, r4
 80024bc:	1a51      	subs	r1, r2, r1
 80024be:	6439      	str	r1, [r7, #64]	; 0x40
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb63 0301 	sbc.w	r3, r3, r1
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024d4:	4649      	mov	r1, r9
 80024d6:	018b      	lsls	r3, r1, #6
 80024d8:	4641      	mov	r1, r8
 80024da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024de:	4641      	mov	r1, r8
 80024e0:	018a      	lsls	r2, r1, #6
 80024e2:	4641      	mov	r1, r8
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e8:	4649      	mov	r1, r9
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80024fc:	4649      	mov	r1, r9
 80024fe:	00cb      	lsls	r3, r1, #3
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002506:	4641      	mov	r1, r8
 8002508:	00ca      	lsls	r2, r1, #3
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4603      	mov	r3, r0
 8002510:	4622      	mov	r2, r4
 8002512:	189b      	adds	r3, r3, r2
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
 8002516:	462b      	mov	r3, r5
 8002518:	460a      	mov	r2, r1
 800251a:	eb42 0303 	adc.w	r3, r2, r3
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800252c:	4629      	mov	r1, r5
 800252e:	024b      	lsls	r3, r1, #9
 8002530:	4621      	mov	r1, r4
 8002532:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002536:	4621      	mov	r1, r4
 8002538:	024a      	lsls	r2, r1, #9
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800254c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002550:	f7fe fae6 	bl	8000b20 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800255e:	e067      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800256c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	67bb      	str	r3, [r7, #120]	; 0x78
 800257a:	2300      	movs	r3, #0
 800257c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800257e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002582:	4622      	mov	r2, r4
 8002584:	462b      	mov	r3, r5
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002594:	0150      	lsls	r0, r2, #5
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4621      	mov	r1, r4
 800259c:	1a51      	subs	r1, r2, r1
 800259e:	62b9      	str	r1, [r7, #40]	; 0x28
 80025a0:	4629      	mov	r1, r5
 80025a2:	eb63 0301 	sbc.w	r3, r3, r1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025b4:	4649      	mov	r1, r9
 80025b6:	018b      	lsls	r3, r1, #6
 80025b8:	4641      	mov	r1, r8
 80025ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025be:	4641      	mov	r1, r8
 80025c0:	018a      	lsls	r2, r1, #6
 80025c2:	4641      	mov	r1, r8
 80025c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025c8:	4649      	mov	r1, r9
 80025ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e2:	4692      	mov	sl, r2
 80025e4:	469b      	mov	fp, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	eb1a 0303 	adds.w	r3, sl, r3
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	462b      	mov	r3, r5
 80025f0:	eb4b 0303 	adc.w	r3, fp, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	2200      	movs	r2, #0
 800261a:	673b      	str	r3, [r7, #112]	; 0x70
 800261c:	677a      	str	r2, [r7, #116]	; 0x74
 800261e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002622:	f7fe fa7d 	bl	8000b20 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002652:	e0eb      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06b      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
 8002676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
 8002680:	2300      	movs	r3, #0
 8002682:	667b      	str	r3, [r7, #100]	; 0x64
 8002684:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002688:	4622      	mov	r2, r4
 800268a:	462b      	mov	r3, r5
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0159      	lsls	r1, r3, #5
 8002696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269a:	0150      	lsls	r0, r2, #5
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4621      	mov	r1, r4
 80026a2:	1a51      	subs	r1, r2, r1
 80026a4:	61b9      	str	r1, [r7, #24]
 80026a6:	4629      	mov	r1, r5
 80026a8:	eb63 0301 	sbc.w	r3, r3, r1
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ba:	4659      	mov	r1, fp
 80026bc:	018b      	lsls	r3, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c4:	4651      	mov	r1, sl
 80026c6:	018a      	lsls	r2, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ebb2 0801 	subs.w	r8, r2, r1
 80026ce:	4659      	mov	r1, fp
 80026d0:	eb63 0901 	sbc.w	r9, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e8:	4690      	mov	r8, r2
 80026ea:	4699      	mov	r9, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	eb18 0303 	adds.w	r3, r8, r3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	462b      	mov	r3, r5
 80026f6:	eb49 0303 	adc.w	r3, r9, r3
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002708:	4629      	mov	r1, r5
 800270a:	024b      	lsls	r3, r1, #9
 800270c:	4621      	mov	r1, r4
 800270e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002712:	4621      	mov	r1, r4
 8002714:	024a      	lsls	r2, r1, #9
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271e:	2200      	movs	r2, #0
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
 8002722:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002728:	f7fe f9fa 	bl	8000b20 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002736:	e065      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x420>
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	2200      	movs	r2, #0
 800274c:	4618      	mov	r0, r3
 800274e:	4611      	mov	r1, r2
 8002750:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002754:	653b      	str	r3, [r7, #80]	; 0x50
 8002756:	2300      	movs	r3, #0
 8002758:	657b      	str	r3, [r7, #84]	; 0x54
 800275a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002770:	0150      	lsls	r0, r2, #5
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4641      	mov	r1, r8
 8002778:	1a51      	subs	r1, r2, r1
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	4649      	mov	r1, r9
 800277e:	eb63 0301 	sbc.w	r3, r3, r1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002790:	4659      	mov	r1, fp
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279a:	4651      	mov	r1, sl
 800279c:	018a      	lsls	r2, r1, #6
 800279e:	4651      	mov	r1, sl
 80027a0:	1a54      	subs	r4, r2, r1
 80027a2:	4659      	mov	r1, fp
 80027a4:	eb63 0501 	sbc.w	r5, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ec:	2200      	movs	r2, #0
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027f6:	f7fe f993 	bl	8000b20 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4613      	mov	r3, r2
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002822:	e003      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800282a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002830:	4618      	mov	r0, r3
 8002832:	37b8      	adds	r7, #184	; 0xb8
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400

08002844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e28d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8083 	beq.w	800296a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002864:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002870:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002878:	2b08      	cmp	r3, #8
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d00c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d112      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <HAL_RCC_OscConfig+0x124>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d157      	bne.n	8002968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e25a      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x90>
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7b      	ldr	r2, [pc, #492]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xb4>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6b      	ldr	r2, [pc, #428]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fd90 	bl	800143c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fd8c 	bl	800143c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e21f      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xdc>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fd7c 	bl	800143c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fd78 	bl	800143c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e20b      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x104>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06f      	beq.n	8002a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1d3      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x278>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fd25 	bl	800143c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe fd21 	bl	800143c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1b4      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x278>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fd04 	bl	800143c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe fd00 	bl	800143c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e193      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fce4 	bl	800143c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe fce0 	bl	800143c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e173      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x234>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fccd 	bl	800143c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fcc9 	bl	800143c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e15c      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b83      	ldr	r3, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7e      	ldr	r2, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fc89 	bl	800143c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fe fc85 	bl	800143c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e118      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x31e>
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x340>
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b84:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a56      	ldr	r2, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fc4a 	bl	800143c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe fc46 	bl	800143c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0d7      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b4b      	ldr	r3, [pc, #300]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x368>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fc34 	bl	800143c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fc30 	bl	800143c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0c1      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ad 	beq.w	8002d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d060      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d145      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fc04 	bl	800143c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fc00 	bl	800143c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e093      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	491b      	ldr	r1, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fbd5 	bl	800143c <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe fbd1 	bl	800143c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e064      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x452>
 8002cb4:	e05c      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fbbe 	bl	800143c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fbba 	bl	800143c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x480>
 8002ce2:	e045      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e040      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <HAL_RCC_OscConfig+0x538>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d129      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d122      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d119      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10f      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <memset>:
 8002d80:	4402      	add	r2, r0
 8002d82:	4603      	mov	r3, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000058 	.word	0x20000058

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	; (8002dd4 <__libc_init_array+0x38>)
 8002da0:	4c0d      	ldr	r4, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	2600      	movs	r6, #0
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	4d0b      	ldr	r5, [pc, #44]	; (8002ddc <__libc_init_array+0x40>)
 8002dae:	4c0c      	ldr	r4, [pc, #48]	; (8002de0 <__libc_init_array+0x44>)
 8002db0:	f000 ff52 	bl	8003c58 <_init>
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	2600      	movs	r6, #0
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08003cb8 	.word	0x08003cb8
 8002dd8:	08003cb8 	.word	0x08003cb8
 8002ddc:	08003cb8 	.word	0x08003cb8
 8002de0:	08003cbc 	.word	0x08003cbc

08002de4 <pow>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	ed2d 8b02 	vpush	{d8}
 8002dea:	eeb0 8a40 	vmov.f32	s16, s0
 8002dee:	eef0 8a60 	vmov.f32	s17, s1
 8002df2:	ec55 4b11 	vmov	r4, r5, d1
 8002df6:	f000 f873 	bl	8002ee0 <__ieee754_pow>
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4629      	mov	r1, r5
 8002e02:	ec57 6b10 	vmov	r6, r7, d0
 8002e06:	f7fd fe55 	bl	8000ab4 <__aeabi_dcmpun>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d13b      	bne.n	8002e86 <pow+0xa2>
 8002e0e:	ec51 0b18 	vmov	r0, r1, d8
 8002e12:	2200      	movs	r2, #0
 8002e14:	2300      	movs	r3, #0
 8002e16:	f7fd fe1b 	bl	8000a50 <__aeabi_dcmpeq>
 8002e1a:	b1b8      	cbz	r0, 8002e4c <pow+0x68>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	f7fd fe14 	bl	8000a50 <__aeabi_dcmpeq>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d146      	bne.n	8002eba <pow+0xd6>
 8002e2c:	ec45 4b10 	vmov	d0, r4, r5
 8002e30:	f000 f848 	bl	8002ec4 <finite>
 8002e34:	b338      	cbz	r0, 8002e86 <pow+0xa2>
 8002e36:	2200      	movs	r2, #0
 8002e38:	2300      	movs	r3, #0
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f7fd fe11 	bl	8000a64 <__aeabi_dcmplt>
 8002e42:	b300      	cbz	r0, 8002e86 <pow+0xa2>
 8002e44:	f7ff ffa4 	bl	8002d90 <__errno>
 8002e48:	2322      	movs	r3, #34	; 0x22
 8002e4a:	e01b      	b.n	8002e84 <pow+0xa0>
 8002e4c:	ec47 6b10 	vmov	d0, r6, r7
 8002e50:	f000 f838 	bl	8002ec4 <finite>
 8002e54:	b9e0      	cbnz	r0, 8002e90 <pow+0xac>
 8002e56:	eeb0 0a48 	vmov.f32	s0, s16
 8002e5a:	eef0 0a68 	vmov.f32	s1, s17
 8002e5e:	f000 f831 	bl	8002ec4 <finite>
 8002e62:	b1a8      	cbz	r0, 8002e90 <pow+0xac>
 8002e64:	ec45 4b10 	vmov	d0, r4, r5
 8002e68:	f000 f82c 	bl	8002ec4 <finite>
 8002e6c:	b180      	cbz	r0, 8002e90 <pow+0xac>
 8002e6e:	4632      	mov	r2, r6
 8002e70:	463b      	mov	r3, r7
 8002e72:	4630      	mov	r0, r6
 8002e74:	4639      	mov	r1, r7
 8002e76:	f7fd fe1d 	bl	8000ab4 <__aeabi_dcmpun>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d0e2      	beq.n	8002e44 <pow+0x60>
 8002e7e:	f7ff ff87 	bl	8002d90 <__errno>
 8002e82:	2321      	movs	r3, #33	; 0x21
 8002e84:	6003      	str	r3, [r0, #0]
 8002e86:	ecbd 8b02 	vpop	{d8}
 8002e8a:	ec47 6b10 	vmov	d0, r6, r7
 8002e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e90:	2200      	movs	r2, #0
 8002e92:	2300      	movs	r3, #0
 8002e94:	4630      	mov	r0, r6
 8002e96:	4639      	mov	r1, r7
 8002e98:	f7fd fdda 	bl	8000a50 <__aeabi_dcmpeq>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d0f2      	beq.n	8002e86 <pow+0xa2>
 8002ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ea4:	eef0 0a68 	vmov.f32	s1, s17
 8002ea8:	f000 f80c 	bl	8002ec4 <finite>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d0ea      	beq.n	8002e86 <pow+0xa2>
 8002eb0:	ec45 4b10 	vmov	d0, r4, r5
 8002eb4:	f000 f806 	bl	8002ec4 <finite>
 8002eb8:	e7c3      	b.n	8002e42 <pow+0x5e>
 8002eba:	4f01      	ldr	r7, [pc, #4]	; (8002ec0 <pow+0xdc>)
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	e7e2      	b.n	8002e86 <pow+0xa2>
 8002ec0:	3ff00000 	.word	0x3ff00000

08002ec4 <finite>:
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	ed8d 0b00 	vstr	d0, [sp]
 8002eca:	9801      	ldr	r0, [sp, #4]
 8002ecc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002ed0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002ed4:	0fc0      	lsrs	r0, r0, #31
 8002ed6:	b002      	add	sp, #8
 8002ed8:	4770      	bx	lr
 8002eda:	0000      	movs	r0, r0
 8002edc:	0000      	movs	r0, r0
	...

08002ee0 <__ieee754_pow>:
 8002ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	ed2d 8b06 	vpush	{d8-d10}
 8002ee8:	b089      	sub	sp, #36	; 0x24
 8002eea:	ed8d 1b00 	vstr	d1, [sp]
 8002eee:	e9dd 2900 	ldrd	r2, r9, [sp]
 8002ef2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002ef6:	ea58 0102 	orrs.w	r1, r8, r2
 8002efa:	ec57 6b10 	vmov	r6, r7, d0
 8002efe:	d115      	bne.n	8002f2c <__ieee754_pow+0x4c>
 8002f00:	19b3      	adds	r3, r6, r6
 8002f02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8002f06:	4152      	adcs	r2, r2
 8002f08:	4299      	cmp	r1, r3
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <__ieee754_pow+0x250>)
 8002f0c:	4193      	sbcs	r3, r2
 8002f0e:	f080 84d1 	bcs.w	80038b4 <__ieee754_pow+0x9d4>
 8002f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f16:	4630      	mov	r0, r6
 8002f18:	4639      	mov	r1, r7
 8002f1a:	f7fd f97b 	bl	8000214 <__adddf3>
 8002f1e:	ec41 0b10 	vmov	d0, r0, r1
 8002f22:	b009      	add	sp, #36	; 0x24
 8002f24:	ecbd 8b06 	vpop	{d8-d10}
 8002f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2c:	4b81      	ldr	r3, [pc, #516]	; (8003134 <__ieee754_pow+0x254>)
 8002f2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002f32:	429c      	cmp	r4, r3
 8002f34:	ee10 aa10 	vmov	sl, s0
 8002f38:	463d      	mov	r5, r7
 8002f3a:	dc06      	bgt.n	8002f4a <__ieee754_pow+0x6a>
 8002f3c:	d101      	bne.n	8002f42 <__ieee754_pow+0x62>
 8002f3e:	2e00      	cmp	r6, #0
 8002f40:	d1e7      	bne.n	8002f12 <__ieee754_pow+0x32>
 8002f42:	4598      	cmp	r8, r3
 8002f44:	dc01      	bgt.n	8002f4a <__ieee754_pow+0x6a>
 8002f46:	d10f      	bne.n	8002f68 <__ieee754_pow+0x88>
 8002f48:	b172      	cbz	r2, 8002f68 <__ieee754_pow+0x88>
 8002f4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002f4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002f52:	ea55 050a 	orrs.w	r5, r5, sl
 8002f56:	d1dc      	bne.n	8002f12 <__ieee754_pow+0x32>
 8002f58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002f5c:	18db      	adds	r3, r3, r3
 8002f5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002f62:	4152      	adcs	r2, r2
 8002f64:	429d      	cmp	r5, r3
 8002f66:	e7d0      	b.n	8002f0a <__ieee754_pow+0x2a>
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	da3b      	bge.n	8002fe4 <__ieee754_pow+0x104>
 8002f6c:	4b72      	ldr	r3, [pc, #456]	; (8003138 <__ieee754_pow+0x258>)
 8002f6e:	4598      	cmp	r8, r3
 8002f70:	dc51      	bgt.n	8003016 <__ieee754_pow+0x136>
 8002f72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002f76:	4598      	cmp	r8, r3
 8002f78:	f340 84ab 	ble.w	80038d2 <__ieee754_pow+0x9f2>
 8002f7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002f80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f84:	2b14      	cmp	r3, #20
 8002f86:	dd0f      	ble.n	8002fa8 <__ieee754_pow+0xc8>
 8002f88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002f8c:	fa22 f103 	lsr.w	r1, r2, r3
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f040 849c 	bne.w	80038d2 <__ieee754_pow+0x9f2>
 8002f9a:	f001 0101 	and.w	r1, r1, #1
 8002f9e:	f1c1 0302 	rsb	r3, r1, #2
 8002fa2:	9304      	str	r3, [sp, #16]
 8002fa4:	b182      	cbz	r2, 8002fc8 <__ieee754_pow+0xe8>
 8002fa6:	e05f      	b.n	8003068 <__ieee754_pow+0x188>
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d15b      	bne.n	8003064 <__ieee754_pow+0x184>
 8002fac:	f1c3 0314 	rsb	r3, r3, #20
 8002fb0:	fa48 f103 	asr.w	r1, r8, r3
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	4543      	cmp	r3, r8
 8002fba:	f040 8487 	bne.w	80038cc <__ieee754_pow+0x9ec>
 8002fbe:	f001 0101 	and.w	r1, r1, #1
 8002fc2:	f1c1 0302 	rsb	r3, r1, #2
 8002fc6:	9304      	str	r3, [sp, #16]
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	; (800313c <__ieee754_pow+0x25c>)
 8002fca:	4598      	cmp	r8, r3
 8002fcc:	d132      	bne.n	8003034 <__ieee754_pow+0x154>
 8002fce:	f1b9 0f00 	cmp.w	r9, #0
 8002fd2:	f280 8477 	bge.w	80038c4 <__ieee754_pow+0x9e4>
 8002fd6:	4959      	ldr	r1, [pc, #356]	; (800313c <__ieee754_pow+0x25c>)
 8002fd8:	4632      	mov	r2, r6
 8002fda:	463b      	mov	r3, r7
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fbf9 	bl	80007d4 <__aeabi_ddiv>
 8002fe2:	e79c      	b.n	8002f1e <__ieee754_pow+0x3e>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d13d      	bne.n	8003068 <__ieee754_pow+0x188>
 8002fec:	4b51      	ldr	r3, [pc, #324]	; (8003134 <__ieee754_pow+0x254>)
 8002fee:	4598      	cmp	r8, r3
 8002ff0:	d1ea      	bne.n	8002fc8 <__ieee754_pow+0xe8>
 8002ff2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002ff6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002ffa:	ea53 030a 	orrs.w	r3, r3, sl
 8002ffe:	f000 8459 	beq.w	80038b4 <__ieee754_pow+0x9d4>
 8003002:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <__ieee754_pow+0x260>)
 8003004:	429c      	cmp	r4, r3
 8003006:	dd08      	ble.n	800301a <__ieee754_pow+0x13a>
 8003008:	f1b9 0f00 	cmp.w	r9, #0
 800300c:	f2c0 8456 	blt.w	80038bc <__ieee754_pow+0x9dc>
 8003010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003014:	e783      	b.n	8002f1e <__ieee754_pow+0x3e>
 8003016:	2302      	movs	r3, #2
 8003018:	e7e5      	b.n	8002fe6 <__ieee754_pow+0x106>
 800301a:	f1b9 0f00 	cmp.w	r9, #0
 800301e:	f04f 0000 	mov.w	r0, #0
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	f6bf af7a 	bge.w	8002f1e <__ieee754_pow+0x3e>
 800302a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800302e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003032:	e774      	b.n	8002f1e <__ieee754_pow+0x3e>
 8003034:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003038:	d106      	bne.n	8003048 <__ieee754_pow+0x168>
 800303a:	4632      	mov	r2, r6
 800303c:	463b      	mov	r3, r7
 800303e:	4630      	mov	r0, r6
 8003040:	4639      	mov	r1, r7
 8003042:	f7fd fa9d 	bl	8000580 <__aeabi_dmul>
 8003046:	e76a      	b.n	8002f1e <__ieee754_pow+0x3e>
 8003048:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <__ieee754_pow+0x264>)
 800304a:	4599      	cmp	r9, r3
 800304c:	d10c      	bne.n	8003068 <__ieee754_pow+0x188>
 800304e:	2d00      	cmp	r5, #0
 8003050:	db0a      	blt.n	8003068 <__ieee754_pow+0x188>
 8003052:	ec47 6b10 	vmov	d0, r6, r7
 8003056:	b009      	add	sp, #36	; 0x24
 8003058:	ecbd 8b06 	vpop	{d8-d10}
 800305c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	f000 bd20 	b.w	8003aa4 <__ieee754_sqrt>
 8003064:	2300      	movs	r3, #0
 8003066:	9304      	str	r3, [sp, #16]
 8003068:	ec47 6b10 	vmov	d0, r6, r7
 800306c:	f000 fc62 	bl	8003934 <fabs>
 8003070:	ec51 0b10 	vmov	r0, r1, d0
 8003074:	f1ba 0f00 	cmp.w	sl, #0
 8003078:	d129      	bne.n	80030ce <__ieee754_pow+0x1ee>
 800307a:	b124      	cbz	r4, 8003086 <__ieee754_pow+0x1a6>
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <__ieee754_pow+0x25c>)
 800307e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003082:	429a      	cmp	r2, r3
 8003084:	d123      	bne.n	80030ce <__ieee754_pow+0x1ee>
 8003086:	f1b9 0f00 	cmp.w	r9, #0
 800308a:	da05      	bge.n	8003098 <__ieee754_pow+0x1b8>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	2000      	movs	r0, #0
 8003092:	492a      	ldr	r1, [pc, #168]	; (800313c <__ieee754_pow+0x25c>)
 8003094:	f7fd fb9e 	bl	80007d4 <__aeabi_ddiv>
 8003098:	2d00      	cmp	r5, #0
 800309a:	f6bf af40 	bge.w	8002f1e <__ieee754_pow+0x3e>
 800309e:	9b04      	ldr	r3, [sp, #16]
 80030a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80030a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80030a8:	431c      	orrs	r4, r3
 80030aa:	d108      	bne.n	80030be <__ieee754_pow+0x1de>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd f8ac 	bl	8000210 <__aeabi_dsub>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	e78f      	b.n	8002fde <__ieee754_pow+0xfe>
 80030be:	9b04      	ldr	r3, [sp, #16]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f47f af2c 	bne.w	8002f1e <__ieee754_pow+0x3e>
 80030c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80030ca:	4619      	mov	r1, r3
 80030cc:	e727      	b.n	8002f1e <__ieee754_pow+0x3e>
 80030ce:	0feb      	lsrs	r3, r5, #31
 80030d0:	3b01      	subs	r3, #1
 80030d2:	9306      	str	r3, [sp, #24]
 80030d4:	9a06      	ldr	r2, [sp, #24]
 80030d6:	9b04      	ldr	r3, [sp, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	d102      	bne.n	80030e2 <__ieee754_pow+0x202>
 80030dc:	4632      	mov	r2, r6
 80030de:	463b      	mov	r3, r7
 80030e0:	e7e6      	b.n	80030b0 <__ieee754_pow+0x1d0>
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <__ieee754_pow+0x268>)
 80030e4:	4598      	cmp	r8, r3
 80030e6:	f340 80fb 	ble.w	80032e0 <__ieee754_pow+0x400>
 80030ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80030ee:	4598      	cmp	r8, r3
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <__ieee754_pow+0x260>)
 80030f2:	dd0c      	ble.n	800310e <__ieee754_pow+0x22e>
 80030f4:	429c      	cmp	r4, r3
 80030f6:	dc0f      	bgt.n	8003118 <__ieee754_pow+0x238>
 80030f8:	f1b9 0f00 	cmp.w	r9, #0
 80030fc:	da0f      	bge.n	800311e <__ieee754_pow+0x23e>
 80030fe:	2000      	movs	r0, #0
 8003100:	b009      	add	sp, #36	; 0x24
 8003102:	ecbd 8b06 	vpop	{d8-d10}
 8003106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310a:	f000 bcc2 	b.w	8003a92 <__math_oflow>
 800310e:	429c      	cmp	r4, r3
 8003110:	dbf2      	blt.n	80030f8 <__ieee754_pow+0x218>
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <__ieee754_pow+0x25c>)
 8003114:	429c      	cmp	r4, r3
 8003116:	dd19      	ble.n	800314c <__ieee754_pow+0x26c>
 8003118:	f1b9 0f00 	cmp.w	r9, #0
 800311c:	dcef      	bgt.n	80030fe <__ieee754_pow+0x21e>
 800311e:	2000      	movs	r0, #0
 8003120:	b009      	add	sp, #36	; 0x24
 8003122:	ecbd 8b06 	vpop	{d8-d10}
 8003126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	f000 bca9 	b.w	8003a80 <__math_uflow>
 800312e:	bf00      	nop
 8003130:	fff00000 	.word	0xfff00000
 8003134:	7ff00000 	.word	0x7ff00000
 8003138:	433fffff 	.word	0x433fffff
 800313c:	3ff00000 	.word	0x3ff00000
 8003140:	3fefffff 	.word	0x3fefffff
 8003144:	3fe00000 	.word	0x3fe00000
 8003148:	41e00000 	.word	0x41e00000
 800314c:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <__ieee754_pow+0x3f0>)
 800314e:	2200      	movs	r2, #0
 8003150:	f7fd f85e 	bl	8000210 <__aeabi_dsub>
 8003154:	a354      	add	r3, pc, #336	; (adr r3, 80032a8 <__ieee754_pow+0x3c8>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	4604      	mov	r4, r0
 800315c:	460d      	mov	r5, r1
 800315e:	f7fd fa0f 	bl	8000580 <__aeabi_dmul>
 8003162:	a353      	add	r3, pc, #332	; (adr r3, 80032b0 <__ieee754_pow+0x3d0>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	4606      	mov	r6, r0
 800316a:	460f      	mov	r7, r1
 800316c:	4620      	mov	r0, r4
 800316e:	4629      	mov	r1, r5
 8003170:	f7fd fa06 	bl	8000580 <__aeabi_dmul>
 8003174:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <__ieee754_pow+0x3f4>)
 8003176:	4682      	mov	sl, r0
 8003178:	468b      	mov	fp, r1
 800317a:	2200      	movs	r2, #0
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd f9fe 	bl	8000580 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	a14b      	add	r1, pc, #300	; (adr r1, 80032b8 <__ieee754_pow+0x3d8>)
 800318a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800318e:	f7fd f83f 	bl	8000210 <__aeabi_dsub>
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	f7fd f9f3 	bl	8000580 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	2000      	movs	r0, #0
 80031a0:	494d      	ldr	r1, [pc, #308]	; (80032d8 <__ieee754_pow+0x3f8>)
 80031a2:	f7fd f835 	bl	8000210 <__aeabi_dsub>
 80031a6:	4622      	mov	r2, r4
 80031a8:	4680      	mov	r8, r0
 80031aa:	4689      	mov	r9, r1
 80031ac:	462b      	mov	r3, r5
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd f9e5 	bl	8000580 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4640      	mov	r0, r8
 80031bc:	4649      	mov	r1, r9
 80031be:	f7fd f9df 	bl	8000580 <__aeabi_dmul>
 80031c2:	a33f      	add	r3, pc, #252	; (adr r3, 80032c0 <__ieee754_pow+0x3e0>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd f9da 	bl	8000580 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4650      	mov	r0, sl
 80031d2:	4659      	mov	r1, fp
 80031d4:	f7fd f81c 	bl	8000210 <__aeabi_dsub>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4680      	mov	r8, r0
 80031de:	4689      	mov	r9, r1
 80031e0:	4630      	mov	r0, r6
 80031e2:	4639      	mov	r1, r7
 80031e4:	f7fd f816 	bl	8000214 <__adddf3>
 80031e8:	2000      	movs	r0, #0
 80031ea:	4632      	mov	r2, r6
 80031ec:	463b      	mov	r3, r7
 80031ee:	4604      	mov	r4, r0
 80031f0:	460d      	mov	r5, r1
 80031f2:	f7fd f80d 	bl	8000210 <__aeabi_dsub>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4640      	mov	r0, r8
 80031fc:	4649      	mov	r1, r9
 80031fe:	f7fd f807 	bl	8000210 <__aeabi_dsub>
 8003202:	9b04      	ldr	r3, [sp, #16]
 8003204:	9a06      	ldr	r2, [sp, #24]
 8003206:	3b01      	subs	r3, #1
 8003208:	4313      	orrs	r3, r2
 800320a:	4682      	mov	sl, r0
 800320c:	468b      	mov	fp, r1
 800320e:	f040 81e7 	bne.w	80035e0 <__ieee754_pow+0x700>
 8003212:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80032c8 <__ieee754_pow+0x3e8>
 8003216:	eeb0 8a47 	vmov.f32	s16, s14
 800321a:	eef0 8a67 	vmov.f32	s17, s15
 800321e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003222:	2600      	movs	r6, #0
 8003224:	4632      	mov	r2, r6
 8003226:	463b      	mov	r3, r7
 8003228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800322c:	f7fc fff0 	bl	8000210 <__aeabi_dsub>
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	f7fd f9a4 	bl	8000580 <__aeabi_dmul>
 8003238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800323c:	4680      	mov	r8, r0
 800323e:	4689      	mov	r9, r1
 8003240:	4650      	mov	r0, sl
 8003242:	4659      	mov	r1, fp
 8003244:	f7fd f99c 	bl	8000580 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4640      	mov	r0, r8
 800324e:	4649      	mov	r1, r9
 8003250:	f7fc ffe0 	bl	8000214 <__adddf3>
 8003254:	4632      	mov	r2, r6
 8003256:	463b      	mov	r3, r7
 8003258:	4680      	mov	r8, r0
 800325a:	4689      	mov	r9, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fd f98e 	bl	8000580 <__aeabi_dmul>
 8003264:	460b      	mov	r3, r1
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	4602      	mov	r2, r0
 800326c:	4649      	mov	r1, r9
 800326e:	4640      	mov	r0, r8
 8003270:	f7fc ffd0 	bl	8000214 <__adddf3>
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <__ieee754_pow+0x3fc>)
 8003276:	4299      	cmp	r1, r3
 8003278:	ec45 4b19 	vmov	d9, r4, r5
 800327c:	4606      	mov	r6, r0
 800327e:	460f      	mov	r7, r1
 8003280:	468b      	mov	fp, r1
 8003282:	f340 82f0 	ble.w	8003866 <__ieee754_pow+0x986>
 8003286:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800328a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800328e:	4303      	orrs	r3, r0
 8003290:	f000 81e4 	beq.w	800365c <__ieee754_pow+0x77c>
 8003294:	ec51 0b18 	vmov	r0, r1, d8
 8003298:	2200      	movs	r2, #0
 800329a:	2300      	movs	r3, #0
 800329c:	f7fd fbe2 	bl	8000a64 <__aeabi_dcmplt>
 80032a0:	3800      	subs	r0, #0
 80032a2:	bf18      	it	ne
 80032a4:	2001      	movne	r0, #1
 80032a6:	e72b      	b.n	8003100 <__ieee754_pow+0x220>
 80032a8:	60000000 	.word	0x60000000
 80032ac:	3ff71547 	.word	0x3ff71547
 80032b0:	f85ddf44 	.word	0xf85ddf44
 80032b4:	3e54ae0b 	.word	0x3e54ae0b
 80032b8:	55555555 	.word	0x55555555
 80032bc:	3fd55555 	.word	0x3fd55555
 80032c0:	652b82fe 	.word	0x652b82fe
 80032c4:	3ff71547 	.word	0x3ff71547
 80032c8:	00000000 	.word	0x00000000
 80032cc:	bff00000 	.word	0xbff00000
 80032d0:	3ff00000 	.word	0x3ff00000
 80032d4:	3fd00000 	.word	0x3fd00000
 80032d8:	3fe00000 	.word	0x3fe00000
 80032dc:	408fffff 	.word	0x408fffff
 80032e0:	4bd5      	ldr	r3, [pc, #852]	; (8003638 <__ieee754_pow+0x758>)
 80032e2:	402b      	ands	r3, r5
 80032e4:	2200      	movs	r2, #0
 80032e6:	b92b      	cbnz	r3, 80032f4 <__ieee754_pow+0x414>
 80032e8:	4bd4      	ldr	r3, [pc, #848]	; (800363c <__ieee754_pow+0x75c>)
 80032ea:	f7fd f949 	bl	8000580 <__aeabi_dmul>
 80032ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80032f2:	460c      	mov	r4, r1
 80032f4:	1523      	asrs	r3, r4, #20
 80032f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80032fa:	4413      	add	r3, r2
 80032fc:	9305      	str	r3, [sp, #20]
 80032fe:	4bd0      	ldr	r3, [pc, #832]	; (8003640 <__ieee754_pow+0x760>)
 8003300:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003304:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003308:	429c      	cmp	r4, r3
 800330a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800330e:	dd08      	ble.n	8003322 <__ieee754_pow+0x442>
 8003310:	4bcc      	ldr	r3, [pc, #816]	; (8003644 <__ieee754_pow+0x764>)
 8003312:	429c      	cmp	r4, r3
 8003314:	f340 8162 	ble.w	80035dc <__ieee754_pow+0x6fc>
 8003318:	9b05      	ldr	r3, [sp, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	9305      	str	r3, [sp, #20]
 800331e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003322:	2400      	movs	r4, #0
 8003324:	00e3      	lsls	r3, r4, #3
 8003326:	9307      	str	r3, [sp, #28]
 8003328:	4bc7      	ldr	r3, [pc, #796]	; (8003648 <__ieee754_pow+0x768>)
 800332a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800332e:	ed93 7b00 	vldr	d7, [r3]
 8003332:	4629      	mov	r1, r5
 8003334:	ec53 2b17 	vmov	r2, r3, d7
 8003338:	eeb0 9a47 	vmov.f32	s18, s14
 800333c:	eef0 9a67 	vmov.f32	s19, s15
 8003340:	4682      	mov	sl, r0
 8003342:	f7fc ff65 	bl	8000210 <__aeabi_dsub>
 8003346:	4652      	mov	r2, sl
 8003348:	4606      	mov	r6, r0
 800334a:	460f      	mov	r7, r1
 800334c:	462b      	mov	r3, r5
 800334e:	ec51 0b19 	vmov	r0, r1, d9
 8003352:	f7fc ff5f 	bl	8000214 <__adddf3>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	2000      	movs	r0, #0
 800335c:	49bb      	ldr	r1, [pc, #748]	; (800364c <__ieee754_pow+0x76c>)
 800335e:	f7fd fa39 	bl	80007d4 <__aeabi_ddiv>
 8003362:	ec41 0b1a 	vmov	d10, r0, r1
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4630      	mov	r0, r6
 800336c:	4639      	mov	r1, r7
 800336e:	f7fd f907 	bl	8000580 <__aeabi_dmul>
 8003372:	2300      	movs	r3, #0
 8003374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003378:	9302      	str	r3, [sp, #8]
 800337a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800337e:	46ab      	mov	fp, r5
 8003380:	106d      	asrs	r5, r5, #1
 8003382:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003386:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800338a:	ec41 0b18 	vmov	d8, r0, r1
 800338e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003392:	2200      	movs	r2, #0
 8003394:	4640      	mov	r0, r8
 8003396:	4649      	mov	r1, r9
 8003398:	4614      	mov	r4, r2
 800339a:	461d      	mov	r5, r3
 800339c:	f7fd f8f0 	bl	8000580 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4630      	mov	r0, r6
 80033a6:	4639      	mov	r1, r7
 80033a8:	f7fc ff32 	bl	8000210 <__aeabi_dsub>
 80033ac:	ec53 2b19 	vmov	r2, r3, d9
 80033b0:	4606      	mov	r6, r0
 80033b2:	460f      	mov	r7, r1
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fc ff2a 	bl	8000210 <__aeabi_dsub>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4650      	mov	r0, sl
 80033c2:	4659      	mov	r1, fp
 80033c4:	f7fc ff24 	bl	8000210 <__aeabi_dsub>
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	f7fd f8d8 	bl	8000580 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4630      	mov	r0, r6
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fc ff1a 	bl	8000210 <__aeabi_dsub>
 80033dc:	ec53 2b1a 	vmov	r2, r3, d10
 80033e0:	f7fd f8ce 	bl	8000580 <__aeabi_dmul>
 80033e4:	ec53 2b18 	vmov	r2, r3, d8
 80033e8:	ec41 0b19 	vmov	d9, r0, r1
 80033ec:	ec51 0b18 	vmov	r0, r1, d8
 80033f0:	f7fd f8c6 	bl	8000580 <__aeabi_dmul>
 80033f4:	a37c      	add	r3, pc, #496	; (adr r3, 80035e8 <__ieee754_pow+0x708>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	4604      	mov	r4, r0
 80033fc:	460d      	mov	r5, r1
 80033fe:	f7fd f8bf 	bl	8000580 <__aeabi_dmul>
 8003402:	a37b      	add	r3, pc, #492	; (adr r3, 80035f0 <__ieee754_pow+0x710>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fc ff04 	bl	8000214 <__adddf3>
 800340c:	4622      	mov	r2, r4
 800340e:	462b      	mov	r3, r5
 8003410:	f7fd f8b6 	bl	8000580 <__aeabi_dmul>
 8003414:	a378      	add	r3, pc, #480	; (adr r3, 80035f8 <__ieee754_pow+0x718>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fc fefb 	bl	8000214 <__adddf3>
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f7fd f8ad 	bl	8000580 <__aeabi_dmul>
 8003426:	a376      	add	r3, pc, #472	; (adr r3, 8003600 <__ieee754_pow+0x720>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fc fef2 	bl	8000214 <__adddf3>
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	f7fd f8a4 	bl	8000580 <__aeabi_dmul>
 8003438:	a373      	add	r3, pc, #460	; (adr r3, 8003608 <__ieee754_pow+0x728>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fc fee9 	bl	8000214 <__adddf3>
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	f7fd f89b 	bl	8000580 <__aeabi_dmul>
 800344a:	a371      	add	r3, pc, #452	; (adr r3, 8003610 <__ieee754_pow+0x730>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fc fee0 	bl	8000214 <__adddf3>
 8003454:	4622      	mov	r2, r4
 8003456:	4606      	mov	r6, r0
 8003458:	460f      	mov	r7, r1
 800345a:	462b      	mov	r3, r5
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fd f88e 	bl	8000580 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4630      	mov	r0, r6
 800346a:	4639      	mov	r1, r7
 800346c:	f7fd f888 	bl	8000580 <__aeabi_dmul>
 8003470:	4642      	mov	r2, r8
 8003472:	4604      	mov	r4, r0
 8003474:	460d      	mov	r5, r1
 8003476:	464b      	mov	r3, r9
 8003478:	ec51 0b18 	vmov	r0, r1, d8
 800347c:	f7fc feca 	bl	8000214 <__adddf3>
 8003480:	ec53 2b19 	vmov	r2, r3, d9
 8003484:	f7fd f87c 	bl	8000580 <__aeabi_dmul>
 8003488:	4622      	mov	r2, r4
 800348a:	462b      	mov	r3, r5
 800348c:	f7fc fec2 	bl	8000214 <__adddf3>
 8003490:	4642      	mov	r2, r8
 8003492:	4682      	mov	sl, r0
 8003494:	468b      	mov	fp, r1
 8003496:	464b      	mov	r3, r9
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd f870 	bl	8000580 <__aeabi_dmul>
 80034a0:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <__ieee754_pow+0x770>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	4606      	mov	r6, r0
 80034a6:	460f      	mov	r7, r1
 80034a8:	f7fc feb4 	bl	8000214 <__adddf3>
 80034ac:	4652      	mov	r2, sl
 80034ae:	465b      	mov	r3, fp
 80034b0:	f7fc feb0 	bl	8000214 <__adddf3>
 80034b4:	2000      	movs	r0, #0
 80034b6:	4604      	mov	r4, r0
 80034b8:	460d      	mov	r5, r1
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4640      	mov	r0, r8
 80034c0:	4649      	mov	r1, r9
 80034c2:	f7fd f85d 	bl	8000580 <__aeabi_dmul>
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <__ieee754_pow+0x770>)
 80034c8:	4680      	mov	r8, r0
 80034ca:	4689      	mov	r9, r1
 80034cc:	2200      	movs	r2, #0
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f7fc fe9d 	bl	8000210 <__aeabi_dsub>
 80034d6:	4632      	mov	r2, r6
 80034d8:	463b      	mov	r3, r7
 80034da:	f7fc fe99 	bl	8000210 <__aeabi_dsub>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4650      	mov	r0, sl
 80034e4:	4659      	mov	r1, fp
 80034e6:	f7fc fe93 	bl	8000210 <__aeabi_dsub>
 80034ea:	ec53 2b18 	vmov	r2, r3, d8
 80034ee:	f7fd f847 	bl	8000580 <__aeabi_dmul>
 80034f2:	4622      	mov	r2, r4
 80034f4:	4606      	mov	r6, r0
 80034f6:	460f      	mov	r7, r1
 80034f8:	462b      	mov	r3, r5
 80034fa:	ec51 0b19 	vmov	r0, r1, d9
 80034fe:	f7fd f83f 	bl	8000580 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4630      	mov	r0, r6
 8003508:	4639      	mov	r1, r7
 800350a:	f7fc fe83 	bl	8000214 <__adddf3>
 800350e:	4606      	mov	r6, r0
 8003510:	460f      	mov	r7, r1
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fc fe7b 	bl	8000214 <__adddf3>
 800351e:	a33e      	add	r3, pc, #248	; (adr r3, 8003618 <__ieee754_pow+0x738>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	2000      	movs	r0, #0
 8003526:	4604      	mov	r4, r0
 8003528:	460d      	mov	r5, r1
 800352a:	f7fd f829 	bl	8000580 <__aeabi_dmul>
 800352e:	4642      	mov	r2, r8
 8003530:	ec41 0b18 	vmov	d8, r0, r1
 8003534:	464b      	mov	r3, r9
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fc fe69 	bl	8000210 <__aeabi_dsub>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4630      	mov	r0, r6
 8003544:	4639      	mov	r1, r7
 8003546:	f7fc fe63 	bl	8000210 <__aeabi_dsub>
 800354a:	a335      	add	r3, pc, #212	; (adr r3, 8003620 <__ieee754_pow+0x740>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fd f816 	bl	8000580 <__aeabi_dmul>
 8003554:	a334      	add	r3, pc, #208	; (adr r3, 8003628 <__ieee754_pow+0x748>)
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	4606      	mov	r6, r0
 800355c:	460f      	mov	r7, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd f80d 	bl	8000580 <__aeabi_dmul>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4630      	mov	r0, r6
 800356c:	4639      	mov	r1, r7
 800356e:	f7fc fe51 	bl	8000214 <__adddf3>
 8003572:	9a07      	ldr	r2, [sp, #28]
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <__ieee754_pow+0x774>)
 8003576:	4413      	add	r3, r2
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fc fe4a 	bl	8000214 <__adddf3>
 8003580:	4682      	mov	sl, r0
 8003582:	9805      	ldr	r0, [sp, #20]
 8003584:	468b      	mov	fp, r1
 8003586:	f7fc ff91 	bl	80004ac <__aeabi_i2d>
 800358a:	9a07      	ldr	r2, [sp, #28]
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <__ieee754_pow+0x778>)
 800358e:	4413      	add	r3, r2
 8003590:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003594:	4606      	mov	r6, r0
 8003596:	460f      	mov	r7, r1
 8003598:	4652      	mov	r2, sl
 800359a:	465b      	mov	r3, fp
 800359c:	ec51 0b18 	vmov	r0, r1, d8
 80035a0:	f7fc fe38 	bl	8000214 <__adddf3>
 80035a4:	4642      	mov	r2, r8
 80035a6:	464b      	mov	r3, r9
 80035a8:	f7fc fe34 	bl	8000214 <__adddf3>
 80035ac:	4632      	mov	r2, r6
 80035ae:	463b      	mov	r3, r7
 80035b0:	f7fc fe30 	bl	8000214 <__adddf3>
 80035b4:	2000      	movs	r0, #0
 80035b6:	4632      	mov	r2, r6
 80035b8:	463b      	mov	r3, r7
 80035ba:	4604      	mov	r4, r0
 80035bc:	460d      	mov	r5, r1
 80035be:	f7fc fe27 	bl	8000210 <__aeabi_dsub>
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	f7fc fe23 	bl	8000210 <__aeabi_dsub>
 80035ca:	ec53 2b18 	vmov	r2, r3, d8
 80035ce:	f7fc fe1f 	bl	8000210 <__aeabi_dsub>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4650      	mov	r0, sl
 80035d8:	4659      	mov	r1, fp
 80035da:	e610      	b.n	80031fe <__ieee754_pow+0x31e>
 80035dc:	2401      	movs	r4, #1
 80035de:	e6a1      	b.n	8003324 <__ieee754_pow+0x444>
 80035e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003630 <__ieee754_pow+0x750>
 80035e4:	e617      	b.n	8003216 <__ieee754_pow+0x336>
 80035e6:	bf00      	nop
 80035e8:	4a454eef 	.word	0x4a454eef
 80035ec:	3fca7e28 	.word	0x3fca7e28
 80035f0:	93c9db65 	.word	0x93c9db65
 80035f4:	3fcd864a 	.word	0x3fcd864a
 80035f8:	a91d4101 	.word	0xa91d4101
 80035fc:	3fd17460 	.word	0x3fd17460
 8003600:	518f264d 	.word	0x518f264d
 8003604:	3fd55555 	.word	0x3fd55555
 8003608:	db6fabff 	.word	0xdb6fabff
 800360c:	3fdb6db6 	.word	0x3fdb6db6
 8003610:	33333303 	.word	0x33333303
 8003614:	3fe33333 	.word	0x3fe33333
 8003618:	e0000000 	.word	0xe0000000
 800361c:	3feec709 	.word	0x3feec709
 8003620:	dc3a03fd 	.word	0xdc3a03fd
 8003624:	3feec709 	.word	0x3feec709
 8003628:	145b01f5 	.word	0x145b01f5
 800362c:	be3e2fe0 	.word	0xbe3e2fe0
 8003630:	00000000 	.word	0x00000000
 8003634:	3ff00000 	.word	0x3ff00000
 8003638:	7ff00000 	.word	0x7ff00000
 800363c:	43400000 	.word	0x43400000
 8003640:	0003988e 	.word	0x0003988e
 8003644:	000bb679 	.word	0x000bb679
 8003648:	08003c80 	.word	0x08003c80
 800364c:	3ff00000 	.word	0x3ff00000
 8003650:	40080000 	.word	0x40080000
 8003654:	08003ca0 	.word	0x08003ca0
 8003658:	08003c90 	.word	0x08003c90
 800365c:	a3b3      	add	r3, pc, #716	; (adr r3, 800392c <__ieee754_pow+0xa4c>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	4640      	mov	r0, r8
 8003664:	4649      	mov	r1, r9
 8003666:	f7fc fdd5 	bl	8000214 <__adddf3>
 800366a:	4622      	mov	r2, r4
 800366c:	ec41 0b1a 	vmov	d10, r0, r1
 8003670:	462b      	mov	r3, r5
 8003672:	4630      	mov	r0, r6
 8003674:	4639      	mov	r1, r7
 8003676:	f7fc fdcb 	bl	8000210 <__aeabi_dsub>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ec51 0b1a 	vmov	r0, r1, d10
 8003682:	f7fd fa0d 	bl	8000aa0 <__aeabi_dcmpgt>
 8003686:	2800      	cmp	r0, #0
 8003688:	f47f ae04 	bne.w	8003294 <__ieee754_pow+0x3b4>
 800368c:	4aa2      	ldr	r2, [pc, #648]	; (8003918 <__ieee754_pow+0xa38>)
 800368e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003692:	4293      	cmp	r3, r2
 8003694:	f340 8107 	ble.w	80038a6 <__ieee754_pow+0x9c6>
 8003698:	151b      	asrs	r3, r3, #20
 800369a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800369e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80036a2:	fa4a fa03 	asr.w	sl, sl, r3
 80036a6:	44da      	add	sl, fp
 80036a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80036ac:	489b      	ldr	r0, [pc, #620]	; (800391c <__ieee754_pow+0xa3c>)
 80036ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80036b2:	4108      	asrs	r0, r1
 80036b4:	ea00 030a 	and.w	r3, r0, sl
 80036b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80036bc:	f1c1 0114 	rsb	r1, r1, #20
 80036c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80036c4:	fa4a fa01 	asr.w	sl, sl, r1
 80036c8:	f1bb 0f00 	cmp.w	fp, #0
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	bfb8      	it	lt
 80036d6:	f1ca 0a00 	rsblt	sl, sl, #0
 80036da:	f7fc fd99 	bl	8000210 <__aeabi_dsub>
 80036de:	ec41 0b19 	vmov	d9, r0, r1
 80036e2:	4642      	mov	r2, r8
 80036e4:	464b      	mov	r3, r9
 80036e6:	ec51 0b19 	vmov	r0, r1, d9
 80036ea:	f7fc fd93 	bl	8000214 <__adddf3>
 80036ee:	a37a      	add	r3, pc, #488	; (adr r3, 80038d8 <__ieee754_pow+0x9f8>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	2000      	movs	r0, #0
 80036f6:	4604      	mov	r4, r0
 80036f8:	460d      	mov	r5, r1
 80036fa:	f7fc ff41 	bl	8000580 <__aeabi_dmul>
 80036fe:	ec53 2b19 	vmov	r2, r3, d9
 8003702:	4606      	mov	r6, r0
 8003704:	460f      	mov	r7, r1
 8003706:	4620      	mov	r0, r4
 8003708:	4629      	mov	r1, r5
 800370a:	f7fc fd81 	bl	8000210 <__aeabi_dsub>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fd7b 	bl	8000210 <__aeabi_dsub>
 800371a:	a371      	add	r3, pc, #452	; (adr r3, 80038e0 <__ieee754_pow+0xa00>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f7fc ff2e 	bl	8000580 <__aeabi_dmul>
 8003724:	a370      	add	r3, pc, #448	; (adr r3, 80038e8 <__ieee754_pow+0xa08>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	4680      	mov	r8, r0
 800372c:	4689      	mov	r9, r1
 800372e:	4620      	mov	r0, r4
 8003730:	4629      	mov	r1, r5
 8003732:	f7fc ff25 	bl	8000580 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4640      	mov	r0, r8
 800373c:	4649      	mov	r1, r9
 800373e:	f7fc fd69 	bl	8000214 <__adddf3>
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4630      	mov	r0, r6
 800374c:	4639      	mov	r1, r7
 800374e:	f7fc fd61 	bl	8000214 <__adddf3>
 8003752:	4632      	mov	r2, r6
 8003754:	463b      	mov	r3, r7
 8003756:	4680      	mov	r8, r0
 8003758:	4689      	mov	r9, r1
 800375a:	f7fc fd59 	bl	8000210 <__aeabi_dsub>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4620      	mov	r0, r4
 8003764:	4629      	mov	r1, r5
 8003766:	f7fc fd53 	bl	8000210 <__aeabi_dsub>
 800376a:	4642      	mov	r2, r8
 800376c:	4606      	mov	r6, r0
 800376e:	460f      	mov	r7, r1
 8003770:	464b      	mov	r3, r9
 8003772:	4640      	mov	r0, r8
 8003774:	4649      	mov	r1, r9
 8003776:	f7fc ff03 	bl	8000580 <__aeabi_dmul>
 800377a:	a35d      	add	r3, pc, #372	; (adr r3, 80038f0 <__ieee754_pow+0xa10>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	4604      	mov	r4, r0
 8003782:	460d      	mov	r5, r1
 8003784:	f7fc fefc 	bl	8000580 <__aeabi_dmul>
 8003788:	a35b      	add	r3, pc, #364	; (adr r3, 80038f8 <__ieee754_pow+0xa18>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc fd3f 	bl	8000210 <__aeabi_dsub>
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	f7fc fef3 	bl	8000580 <__aeabi_dmul>
 800379a:	a359      	add	r3, pc, #356	; (adr r3, 8003900 <__ieee754_pow+0xa20>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f7fc fd38 	bl	8000214 <__adddf3>
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f7fc feea 	bl	8000580 <__aeabi_dmul>
 80037ac:	a356      	add	r3, pc, #344	; (adr r3, 8003908 <__ieee754_pow+0xa28>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc fd2d 	bl	8000210 <__aeabi_dsub>
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	f7fc fee1 	bl	8000580 <__aeabi_dmul>
 80037be:	a354      	add	r3, pc, #336	; (adr r3, 8003910 <__ieee754_pow+0xa30>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc fd26 	bl	8000214 <__adddf3>
 80037c8:	4622      	mov	r2, r4
 80037ca:	462b      	mov	r3, r5
 80037cc:	f7fc fed8 	bl	8000580 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4640      	mov	r0, r8
 80037d6:	4649      	mov	r1, r9
 80037d8:	f7fc fd1a 	bl	8000210 <__aeabi_dsub>
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4640      	mov	r0, r8
 80037e6:	4649      	mov	r1, r9
 80037e8:	f7fc feca 	bl	8000580 <__aeabi_dmul>
 80037ec:	2200      	movs	r2, #0
 80037ee:	ec41 0b19 	vmov	d9, r0, r1
 80037f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037f6:	4620      	mov	r0, r4
 80037f8:	4629      	mov	r1, r5
 80037fa:	f7fc fd09 	bl	8000210 <__aeabi_dsub>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	ec51 0b19 	vmov	r0, r1, d9
 8003806:	f7fc ffe5 	bl	80007d4 <__aeabi_ddiv>
 800380a:	4632      	mov	r2, r6
 800380c:	4604      	mov	r4, r0
 800380e:	460d      	mov	r5, r1
 8003810:	463b      	mov	r3, r7
 8003812:	4640      	mov	r0, r8
 8003814:	4649      	mov	r1, r9
 8003816:	f7fc feb3 	bl	8000580 <__aeabi_dmul>
 800381a:	4632      	mov	r2, r6
 800381c:	463b      	mov	r3, r7
 800381e:	f7fc fcf9 	bl	8000214 <__adddf3>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fc fcf1 	bl	8000210 <__aeabi_dsub>
 800382e:	4642      	mov	r2, r8
 8003830:	464b      	mov	r3, r9
 8003832:	f7fc fced 	bl	8000210 <__aeabi_dsub>
 8003836:	460b      	mov	r3, r1
 8003838:	4602      	mov	r2, r0
 800383a:	4939      	ldr	r1, [pc, #228]	; (8003920 <__ieee754_pow+0xa40>)
 800383c:	2000      	movs	r0, #0
 800383e:	f7fc fce7 	bl	8000210 <__aeabi_dsub>
 8003842:	ec41 0b10 	vmov	d0, r0, r1
 8003846:	ee10 3a90 	vmov	r3, s1
 800384a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800384e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003852:	da2b      	bge.n	80038ac <__ieee754_pow+0x9cc>
 8003854:	4650      	mov	r0, sl
 8003856:	f000 f877 	bl	8003948 <scalbn>
 800385a:	ec51 0b10 	vmov	r0, r1, d0
 800385e:	ec53 2b18 	vmov	r2, r3, d8
 8003862:	f7ff bbee 	b.w	8003042 <__ieee754_pow+0x162>
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <__ieee754_pow+0xa44>)
 8003868:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800386c:	429e      	cmp	r6, r3
 800386e:	f77f af0d 	ble.w	800368c <__ieee754_pow+0x7ac>
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <__ieee754_pow+0xa48>)
 8003874:	440b      	add	r3, r1
 8003876:	4303      	orrs	r3, r0
 8003878:	d009      	beq.n	800388e <__ieee754_pow+0x9ae>
 800387a:	ec51 0b18 	vmov	r0, r1, d8
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	f7fd f8ef 	bl	8000a64 <__aeabi_dcmplt>
 8003886:	3800      	subs	r0, #0
 8003888:	bf18      	it	ne
 800388a:	2001      	movne	r0, #1
 800388c:	e448      	b.n	8003120 <__ieee754_pow+0x240>
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	f7fc fcbd 	bl	8000210 <__aeabi_dsub>
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	f7fd f8f7 	bl	8000a8c <__aeabi_dcmpge>
 800389e:	2800      	cmp	r0, #0
 80038a0:	f43f aef4 	beq.w	800368c <__ieee754_pow+0x7ac>
 80038a4:	e7e9      	b.n	800387a <__ieee754_pow+0x99a>
 80038a6:	f04f 0a00 	mov.w	sl, #0
 80038aa:	e71a      	b.n	80036e2 <__ieee754_pow+0x802>
 80038ac:	ec51 0b10 	vmov	r0, r1, d0
 80038b0:	4619      	mov	r1, r3
 80038b2:	e7d4      	b.n	800385e <__ieee754_pow+0x97e>
 80038b4:	491a      	ldr	r1, [pc, #104]	; (8003920 <__ieee754_pow+0xa40>)
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7ff bb31 	b.w	8002f1e <__ieee754_pow+0x3e>
 80038bc:	2000      	movs	r0, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	f7ff bb2d 	b.w	8002f1e <__ieee754_pow+0x3e>
 80038c4:	4630      	mov	r0, r6
 80038c6:	4639      	mov	r1, r7
 80038c8:	f7ff bb29 	b.w	8002f1e <__ieee754_pow+0x3e>
 80038cc:	9204      	str	r2, [sp, #16]
 80038ce:	f7ff bb7b 	b.w	8002fc8 <__ieee754_pow+0xe8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	f7ff bb65 	b.w	8002fa2 <__ieee754_pow+0xc2>
 80038d8:	00000000 	.word	0x00000000
 80038dc:	3fe62e43 	.word	0x3fe62e43
 80038e0:	fefa39ef 	.word	0xfefa39ef
 80038e4:	3fe62e42 	.word	0x3fe62e42
 80038e8:	0ca86c39 	.word	0x0ca86c39
 80038ec:	be205c61 	.word	0xbe205c61
 80038f0:	72bea4d0 	.word	0x72bea4d0
 80038f4:	3e663769 	.word	0x3e663769
 80038f8:	c5d26bf1 	.word	0xc5d26bf1
 80038fc:	3ebbbd41 	.word	0x3ebbbd41
 8003900:	af25de2c 	.word	0xaf25de2c
 8003904:	3f11566a 	.word	0x3f11566a
 8003908:	16bebd93 	.word	0x16bebd93
 800390c:	3f66c16c 	.word	0x3f66c16c
 8003910:	5555553e 	.word	0x5555553e
 8003914:	3fc55555 	.word	0x3fc55555
 8003918:	3fe00000 	.word	0x3fe00000
 800391c:	fff00000 	.word	0xfff00000
 8003920:	3ff00000 	.word	0x3ff00000
 8003924:	4090cbff 	.word	0x4090cbff
 8003928:	3f6f3400 	.word	0x3f6f3400
 800392c:	652b82fe 	.word	0x652b82fe
 8003930:	3c971547 	.word	0x3c971547

08003934 <fabs>:
 8003934:	ec51 0b10 	vmov	r0, r1, d0
 8003938:	ee10 2a10 	vmov	r2, s0
 800393c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003940:	ec43 2b10 	vmov	d0, r2, r3
 8003944:	4770      	bx	lr
	...

08003948 <scalbn>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	ec55 4b10 	vmov	r4, r5, d0
 800394e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003952:	4606      	mov	r6, r0
 8003954:	462b      	mov	r3, r5
 8003956:	b999      	cbnz	r1, 8003980 <scalbn+0x38>
 8003958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800395c:	4323      	orrs	r3, r4
 800395e:	d03f      	beq.n	80039e0 <scalbn+0x98>
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <scalbn+0xf0>)
 8003962:	4629      	mov	r1, r5
 8003964:	ee10 0a10 	vmov	r0, s0
 8003968:	2200      	movs	r2, #0
 800396a:	f7fc fe09 	bl	8000580 <__aeabi_dmul>
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <scalbn+0xf4>)
 8003970:	429e      	cmp	r6, r3
 8003972:	4604      	mov	r4, r0
 8003974:	460d      	mov	r5, r1
 8003976:	da10      	bge.n	800399a <scalbn+0x52>
 8003978:	a327      	add	r3, pc, #156	; (adr r3, 8003a18 <scalbn+0xd0>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	e01f      	b.n	80039c0 <scalbn+0x78>
 8003980:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003984:	4291      	cmp	r1, r2
 8003986:	d10c      	bne.n	80039a2 <scalbn+0x5a>
 8003988:	ee10 2a10 	vmov	r2, s0
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc40 	bl	8000214 <__adddf3>
 8003994:	4604      	mov	r4, r0
 8003996:	460d      	mov	r5, r1
 8003998:	e022      	b.n	80039e0 <scalbn+0x98>
 800399a:	460b      	mov	r3, r1
 800399c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80039a0:	3936      	subs	r1, #54	; 0x36
 80039a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80039a6:	4296      	cmp	r6, r2
 80039a8:	dd0d      	ble.n	80039c6 <scalbn+0x7e>
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	a11c      	add	r1, pc, #112	; (adr r1, 8003a20 <scalbn+0xd8>)
 80039ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039b2:	da02      	bge.n	80039ba <scalbn+0x72>
 80039b4:	a11c      	add	r1, pc, #112	; (adr r1, 8003a28 <scalbn+0xe0>)
 80039b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039ba:	a319      	add	r3, pc, #100	; (adr r3, 8003a20 <scalbn+0xd8>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fdde 	bl	8000580 <__aeabi_dmul>
 80039c4:	e7e6      	b.n	8003994 <scalbn+0x4c>
 80039c6:	1872      	adds	r2, r6, r1
 80039c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80039cc:	428a      	cmp	r2, r1
 80039ce:	dcec      	bgt.n	80039aa <scalbn+0x62>
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	dd08      	ble.n	80039e6 <scalbn+0x9e>
 80039d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80039d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80039e0:	ec45 4b10 	vmov	d0, r4, r5
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80039ea:	da08      	bge.n	80039fe <scalbn+0xb6>
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	a10a      	add	r1, pc, #40	; (adr r1, 8003a18 <scalbn+0xd0>)
 80039f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f4:	dac0      	bge.n	8003978 <scalbn+0x30>
 80039f6:	a10e      	add	r1, pc, #56	; (adr r1, 8003a30 <scalbn+0xe8>)
 80039f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039fc:	e7bc      	b.n	8003978 <scalbn+0x30>
 80039fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a02:	3236      	adds	r2, #54	; 0x36
 8003a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <scalbn+0xf8>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	e7d5      	b.n	80039c0 <scalbn+0x78>
 8003a14:	f3af 8000 	nop.w
 8003a18:	c2f8f359 	.word	0xc2f8f359
 8003a1c:	01a56e1f 	.word	0x01a56e1f
 8003a20:	8800759c 	.word	0x8800759c
 8003a24:	7e37e43c 	.word	0x7e37e43c
 8003a28:	8800759c 	.word	0x8800759c
 8003a2c:	fe37e43c 	.word	0xfe37e43c
 8003a30:	c2f8f359 	.word	0xc2f8f359
 8003a34:	81a56e1f 	.word	0x81a56e1f
 8003a38:	43500000 	.word	0x43500000
 8003a3c:	ffff3cb0 	.word	0xffff3cb0
 8003a40:	3c900000 	.word	0x3c900000

08003a44 <with_errno>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	4616      	mov	r6, r2
 8003a4c:	f7ff f9a0 	bl	8002d90 <__errno>
 8003a50:	4629      	mov	r1, r5
 8003a52:	6006      	str	r6, [r0, #0]
 8003a54:	4620      	mov	r0, r4
 8003a56:	bd70      	pop	{r4, r5, r6, pc}

08003a58 <xflow>:
 8003a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	b108      	cbz	r0, 8003a64 <xflow+0xc>
 8003a60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a64:	e9cd 2300 	strd	r2, r3, [sp]
 8003a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	f7fc fd86 	bl	8000580 <__aeabi_dmul>
 8003a74:	2222      	movs	r2, #34	; 0x22
 8003a76:	b003      	add	sp, #12
 8003a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a7c:	f7ff bfe2 	b.w	8003a44 <with_errno>

08003a80 <__math_uflow>:
 8003a80:	b508      	push	{r3, lr}
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a88:	f7ff ffe6 	bl	8003a58 <xflow>
 8003a8c:	ec41 0b10 	vmov	d0, r0, r1
 8003a90:	bd08      	pop	{r3, pc}

08003a92 <__math_oflow>:
 8003a92:	b508      	push	{r3, lr}
 8003a94:	2200      	movs	r2, #0
 8003a96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003a9a:	f7ff ffdd 	bl	8003a58 <xflow>
 8003a9e:	ec41 0b10 	vmov	d0, r0, r1
 8003aa2:	bd08      	pop	{r3, pc}

08003aa4 <__ieee754_sqrt>:
 8003aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	ec55 4b10 	vmov	r4, r5, d0
 8003aac:	4e67      	ldr	r6, [pc, #412]	; (8003c4c <__ieee754_sqrt+0x1a8>)
 8003aae:	43ae      	bics	r6, r5
 8003ab0:	ee10 0a10 	vmov	r0, s0
 8003ab4:	ee10 2a10 	vmov	r2, s0
 8003ab8:	4629      	mov	r1, r5
 8003aba:	462b      	mov	r3, r5
 8003abc:	d10d      	bne.n	8003ada <__ieee754_sqrt+0x36>
 8003abe:	f7fc fd5f 	bl	8000580 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7fc fba3 	bl	8000214 <__adddf3>
 8003ace:	4604      	mov	r4, r0
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	ec45 4b10 	vmov	d0, r4, r5
 8003ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	dc0b      	bgt.n	8003af6 <__ieee754_sqrt+0x52>
 8003ade:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003ae2:	4326      	orrs	r6, r4
 8003ae4:	d0f5      	beq.n	8003ad2 <__ieee754_sqrt+0x2e>
 8003ae6:	b135      	cbz	r5, 8003af6 <__ieee754_sqrt+0x52>
 8003ae8:	f7fc fb92 	bl	8000210 <__aeabi_dsub>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	f7fc fe70 	bl	80007d4 <__aeabi_ddiv>
 8003af4:	e7eb      	b.n	8003ace <__ieee754_sqrt+0x2a>
 8003af6:	1509      	asrs	r1, r1, #20
 8003af8:	f000 808d 	beq.w	8003c16 <__ieee754_sqrt+0x172>
 8003afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b00:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8003b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b08:	07c9      	lsls	r1, r1, #31
 8003b0a:	bf5c      	itt	pl
 8003b0c:	005b      	lslpl	r3, r3, #1
 8003b0e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8003b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b16:	bf58      	it	pl
 8003b18:	0052      	lslpl	r2, r2, #1
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003b20:	1076      	asrs	r6, r6, #1
 8003b22:	0052      	lsls	r2, r2, #1
 8003b24:	f04f 0e16 	mov.w	lr, #22
 8003b28:	46ac      	mov	ip, r5
 8003b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b2e:	eb0c 0001 	add.w	r0, ip, r1
 8003b32:	4298      	cmp	r0, r3
 8003b34:	bfde      	ittt	le
 8003b36:	1a1b      	suble	r3, r3, r0
 8003b38:	eb00 0c01 	addle.w	ip, r0, r1
 8003b3c:	186d      	addle	r5, r5, r1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	f1be 0e01 	subs.w	lr, lr, #1
 8003b44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003b48:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003b50:	d1ed      	bne.n	8003b2e <__ieee754_sqrt+0x8a>
 8003b52:	4674      	mov	r4, lr
 8003b54:	2720      	movs	r7, #32
 8003b56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b5a:	4563      	cmp	r3, ip
 8003b5c:	eb01 000e 	add.w	r0, r1, lr
 8003b60:	dc02      	bgt.n	8003b68 <__ieee754_sqrt+0xc4>
 8003b62:	d113      	bne.n	8003b8c <__ieee754_sqrt+0xe8>
 8003b64:	4290      	cmp	r0, r2
 8003b66:	d811      	bhi.n	8003b8c <__ieee754_sqrt+0xe8>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	eb00 0e01 	add.w	lr, r0, r1
 8003b6e:	da57      	bge.n	8003c20 <__ieee754_sqrt+0x17c>
 8003b70:	f1be 0f00 	cmp.w	lr, #0
 8003b74:	db54      	blt.n	8003c20 <__ieee754_sqrt+0x17c>
 8003b76:	f10c 0801 	add.w	r8, ip, #1
 8003b7a:	eba3 030c 	sub.w	r3, r3, ip
 8003b7e:	4290      	cmp	r0, r2
 8003b80:	bf88      	it	hi
 8003b82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003b86:	1a12      	subs	r2, r2, r0
 8003b88:	440c      	add	r4, r1
 8003b8a:	46c4      	mov	ip, r8
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	3f01      	subs	r7, #1
 8003b90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003b94:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003b9c:	d1dd      	bne.n	8003b5a <__ieee754_sqrt+0xb6>
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	d01b      	beq.n	8003bda <__ieee754_sqrt+0x136>
 8003ba2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003c50 <__ieee754_sqrt+0x1ac>
 8003ba6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003c54 <__ieee754_sqrt+0x1b0>
 8003baa:	e9da 0100 	ldrd	r0, r1, [sl]
 8003bae:	e9db 2300 	ldrd	r2, r3, [fp]
 8003bb2:	f7fc fb2d 	bl	8000210 <__aeabi_dsub>
 8003bb6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	f7fc ff59 	bl	8000a78 <__aeabi_dcmple>
 8003bc6:	b140      	cbz	r0, 8003bda <__ieee754_sqrt+0x136>
 8003bc8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003bcc:	e9da 0100 	ldrd	r0, r1, [sl]
 8003bd0:	e9db 2300 	ldrd	r2, r3, [fp]
 8003bd4:	d126      	bne.n	8003c24 <__ieee754_sqrt+0x180>
 8003bd6:	3501      	adds	r5, #1
 8003bd8:	463c      	mov	r4, r7
 8003bda:	106a      	asrs	r2, r5, #1
 8003bdc:	0863      	lsrs	r3, r4, #1
 8003bde:	07e9      	lsls	r1, r5, #31
 8003be0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003be4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003be8:	bf48      	it	mi
 8003bea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003bee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	e76d      	b.n	8003ad2 <__ieee754_sqrt+0x2e>
 8003bf6:	0ad3      	lsrs	r3, r2, #11
 8003bf8:	3815      	subs	r0, #21
 8003bfa:	0552      	lsls	r2, r2, #21
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0fa      	beq.n	8003bf6 <__ieee754_sqrt+0x152>
 8003c00:	02dc      	lsls	r4, r3, #11
 8003c02:	d50a      	bpl.n	8003c1a <__ieee754_sqrt+0x176>
 8003c04:	f1c1 0420 	rsb	r4, r1, #32
 8003c08:	fa22 f404 	lsr.w	r4, r2, r4
 8003c0c:	1e4d      	subs	r5, r1, #1
 8003c0e:	408a      	lsls	r2, r1
 8003c10:	4323      	orrs	r3, r4
 8003c12:	1b41      	subs	r1, r0, r5
 8003c14:	e772      	b.n	8003afc <__ieee754_sqrt+0x58>
 8003c16:	4608      	mov	r0, r1
 8003c18:	e7f0      	b.n	8003bfc <__ieee754_sqrt+0x158>
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	3101      	adds	r1, #1
 8003c1e:	e7ef      	b.n	8003c00 <__ieee754_sqrt+0x15c>
 8003c20:	46e0      	mov	r8, ip
 8003c22:	e7aa      	b.n	8003b7a <__ieee754_sqrt+0xd6>
 8003c24:	f7fc faf6 	bl	8000214 <__adddf3>
 8003c28:	e9da 8900 	ldrd	r8, r9, [sl]
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4640      	mov	r0, r8
 8003c32:	4649      	mov	r1, r9
 8003c34:	f7fc ff16 	bl	8000a64 <__aeabi_dcmplt>
 8003c38:	b120      	cbz	r0, 8003c44 <__ieee754_sqrt+0x1a0>
 8003c3a:	1ca0      	adds	r0, r4, #2
 8003c3c:	bf08      	it	eq
 8003c3e:	3501      	addeq	r5, #1
 8003c40:	3402      	adds	r4, #2
 8003c42:	e7ca      	b.n	8003bda <__ieee754_sqrt+0x136>
 8003c44:	3401      	adds	r4, #1
 8003c46:	f024 0401 	bic.w	r4, r4, #1
 8003c4a:	e7c6      	b.n	8003bda <__ieee754_sqrt+0x136>
 8003c4c:	7ff00000 	.word	0x7ff00000
 8003c50:	20000060 	.word	0x20000060
 8003c54:	20000068 	.word	0x20000068

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
