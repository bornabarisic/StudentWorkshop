
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800435c  0800435c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004364  08004364  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800436c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000007c  080043e8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080043e8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ced4  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219b  00000000  00000000  0002cfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b5  00000000  00000000  0002fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237dc  00000000  00000000  0003054d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105cd  00000000  00000000  00053d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8292  00000000  00000000  000642f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003298  00000000  00000000  0013c588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042f4 	.word	0x080042f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080042f4 	.word	0x080042f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 80005c0:	2300      	movs	r3, #0
 80005c2:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <SendToLCD+0x24>
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d005      	beq.n	80005da <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 80005ce:	e009      	b.n	80005e4 <SendToLCD+0x38>
			buffer[0] = 0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	727b      	strb	r3, [r7, #9]
		break;
 80005d8:	e004      	b.n	80005e4 <SendToLCD+0x38>
			buffer[0] = 0x40;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	727b      	strb	r3, [r7, #9]
		break;
 80005e2:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f937 	bl	800085c <TransmitI2CDataToLCD>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 80005f4:	2303      	movs	r3, #3
 80005f6:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <InitializeLCD>:

static void InitializeLCD(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 800060c:	f000 f8de 	bl	80007cc <InitializeLCDI2C>
 8000610:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffc9 	bl	80005ac <SendToLCD>
 800061a:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fda9 	bl	8001174 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8000622:	2138      	movs	r1, #56	; 0x38
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffc1 	bl	80005ac <SendToLCD>
 800062a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800062c:	2032      	movs	r0, #50	; 0x32
 800062e:	f000 fda1 	bl	8001174 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8000632:	210c      	movs	r1, #12
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ffb9 	bl	80005ac <SendToLCD>
 800063a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 fd99 	bl	8001174 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8000642:	2106      	movs	r1, #6
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffb1 	bl	80005ac <SendToLCD>
 800064a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800064c:	2032      	movs	r0, #50	; 0x32
 800064e:	f000 fd91 	bl	8001174 <HAL_Delay>

//	ASSERT(lcd_state != LCD_OK);

	HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f000 fd8d 	bl	8001174 <HAL_Delay>

	lcd_state = ClearLCD();
 800065a:	f000 f85f 	bl	800071c <ClearLCD>
 800065e:	6078      	str	r0, [r7, #4]

//	ASSERT(lcd_state != LCD_OK);
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SendDataToLCD>:

static int SendDataToLCD(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 8000676:	e011      	b.n	800069c <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <SendDataToLCD+0x54>)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff92 	bl	80005ac <SendToLCD>
 8000688:	6078      	str	r0, [r7, #4]
		i++;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d109      	bne.n	80006aa <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	dc08      	bgt.n	80006ae <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <SendDataToLCD+0x54>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1e7      	bne.n	8000678 <SendDataToLCD+0x10>
 80006a8:	e002      	b.n	80006b0 <SendDataToLCD+0x48>
			break;
 80006aa:	bf00      	nop
 80006ac:	e000      	b.n	80006b0 <SendDataToLCD+0x48>
		{
			break;
 80006ae:	bf00      	nop
		}
	}

	return lcd_state;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]

	switch (row)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <MoveLCDCursor+0x20>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d007      	beq.n	80006ee <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 80006de:	e00d      	b.n	80006fc <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e8:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 80006ea:	72fb      	strb	r3, [r7, #11]
		break;
 80006ec:	e006      	b.n	80006fc <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006f6:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 80006f8:	72fb      	strb	r3, [r7, #11]
		break;
 80006fa:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	4619      	mov	r1, r3
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff53 	bl	80005ac <SendToLCD>
 8000706:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 800070e:	2305      	movs	r3, #5
 8000710:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <ClearLCD>:

static int ClearLCD(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff41 	bl	80005ac <SendToLCD>
 800072a:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fd21 	bl	8001174 <HAL_Delay>

	if (lcd_state != LCD_OK)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 8000738:	2304      	movs	r3, #4
 800073a:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	return &lcd_interface;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <GetLCDInterface+0x10>)
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	20000000 	.word	0x20000000

0800075c <InitializeI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeI2CGPIOPins(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN | I2C_SDA_PIN;
 800077e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000782:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 8000790:	2304      	movs	r3, #4
 8000792:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT, &gpio);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <InitializeI2CGPIOPins+0x6c>)
 800079c:	f001 fa0e 	bl	8001bbc <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 80007aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <InitializeI2CGPIOPins+0x68>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	InitializeI2CGPIOPins();
 80007d2:	f7ff ffc3 	bl	800075c <InitializeI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <InitializeLCDI2C+0x80>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <InitializeLCDI2C+0x80>)
 80007e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <InitializeLCDI2C+0x80>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <InitializeLCDI2C+0x84>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <InitializeLCDI2C+0x84>)
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <InitializeLCDI2C+0x88>)
 80007fe:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <InitializeLCDI2C+0x84>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <InitializeLCDI2C+0x8c>)
 8000804:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <InitializeLCDI2C+0x84>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <InitializeLCDI2C+0x84>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <InitializeLCDI2C+0x84>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <InitializeLCDI2C+0x84>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <InitializeLCDI2C+0x84>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <InitializeLCDI2C+0x84>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <InitializeLCDI2C+0x84>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <InitializeLCDI2C+0x84>)
 8000834:	f001 fb70 	bl	8001f18 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	20000098 	.word	0x20000098
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
 8000862:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2302      	movs	r3, #2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	217c      	movs	r1, #124	; 0x7c
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <TransmitI2CDataToLCD+0x2c>)
 8000870:	f001 fc96 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 800087a:	2303      	movs	r3, #3
 800087c:	e000      	b.n	8000880 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098

0800088c <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 8000892:	f7ff ff59 	bl	8000748 <GetLCDInterface>
 8000896:	6078      	str	r0, [r7, #4]

//	ASSERT(plcd == NULL);

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2210      	movs	r2, #16
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 f8a4 	bl	80039ec <memset>

	plcd->init();
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	4798      	blx	r3
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 80008c2:	f7ff ff41 	bl	8000748 <GetLCDInterface>
 80008c6:	6138      	str	r0, [r7, #16]

//	ASSERT(plcd == NULL);

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	dc16      	bgt.n	80008fc <LCDWriteData+0x4a>
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	dc13      	bgt.n	80008fc <LCDWriteData+0x4a>
				"\n\rStupac: %d",
				row);
		return;
	}

	sprintf(plcd->buffer, pdata);
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f867 	bl	80039ac <siprintf>

	lcd_state = plcd->clear_data();
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4798      	blx	r3
 80008e4:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->move_cursor(row, col);
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	68b9      	ldr	r1, [r7, #8]
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	4798      	blx	r3
 80008f0:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4798      	blx	r3
 80008f8:	6178      	str	r0, [r7, #20]
 80008fa:	e000      	b.n	80008fe <LCDWriteData+0x4c>
		return;
 80008fc:	bf00      	nop
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
				"\n\tError: %d",
				lcd_state);
	}
}
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <ADC1_Init_Pins>:
* This function configures the hardware resources for ADC1
* @param hadc: ADC handle pointer
* @retval None
*/
static void ADC1_Init_Pins(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <ADC1_Init_Pins+0x7c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d127      	bne.n	8000976 <ADC1_Init_Pins+0x72>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <ADC1_Init_Pins+0x80>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <ADC1_Init_Pins+0x80>)
 8000930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <ADC1_Init_Pins+0x80>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <ADC1_Init_Pins+0x80>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <ADC1_Init_Pins+0x80>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <ADC1_Init_Pins+0x80>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <ADC1_Init_Pins+0x84>)
 8000972:	f001 f923 	bl	8001bbc <HAL_GPIO_Init>
  }
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40012000 	.word	0x40012000
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <ADC1_Init+0xa0>)
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <ADC1_Init+0xa4>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <ADC1_Init+0xa0>)
 80009a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <ADC1_Init+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <ADC1_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <ADC1_Init+0xa0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <ADC1_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <ADC1_Init+0xa0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <ADC1_Init+0xa0>)
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <ADC1_Init+0xa8>)
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <ADC1_Init+0xa0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <ADC1_Init+0xa0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <ADC1_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <ADC1_Init+0xa0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <ADC1_Init+0xa0>)
 80009ee:	f000 fbe5 	bl	80011bc <HAL_ADC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <ADC1_Init+0x70>
  {
    Error_Handler();
 80009f8:	f000 f998 	bl	8000d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <ADC1_Init+0xa0>)
 8000a0e:	f000 fdc1 	bl	8001594 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <ADC1_Init+0x90>
  {
    Error_Handler();
 8000a18:	f000 f988 	bl	8000d2c <Error_Handler>
  }

  ADC1_Init_Pins(&hadc1);
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <ADC1_Init+0xa0>)
 8000a1e:	f7ff ff71 	bl	8000904 <ADC1_Init_Pins>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000f0 	.word	0x200000f0
 8000a30:	40012000 	.word	0x40012000
 8000a34:	0f000001 	.word	0x0f000001

08000a38 <LCD_control_with_ADC>:
/**
  * @brief  This function makes the LED blink with the frequency set by the potentiometer using ADC.
  * @retval None
  */
void LCD_control_with_ADC (void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <LCD_control_with_ADC+0x58>)
 8000a40:	f000 fc0a 	bl	8001258 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <LCD_control_with_ADC+0x58>)
 8000a4a:	f000 fd0a 	bl	8001462 <HAL_ADC_PollForConversion>
	readVal = HAL_ADC_GetValue(&hadc1);
 8000a4e:	4810      	ldr	r0, [pc, #64]	; (8000a90 <LCD_control_with_ADC+0x58>)
 8000a50:	f000 fd92 	bl	8001578 <HAL_ADC_GetValue>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <LCD_control_with_ADC+0x5c>)
 8000a5a:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <LCD_control_with_ADC+0x58>)
 8000a5e:	f000 fccd 	bl	80013fc <HAL_ADC_Stop>

	char pdata[14];
	sprintf(pdata, "%d", readVal);
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LCD_control_with_ADC+0x5c>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	463b      	mov	r3, r7
 8000a6a:	490b      	ldr	r1, [pc, #44]	; (8000a98 <LCD_control_with_ADC+0x60>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 ff9d 	bl	80039ac <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8000a72:	463b      	mov	r3, r7
 8000a74:	461a      	mov	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff1a 	bl	80008b2 <LCDWriteData>

	HAL_Delay(500);
 8000a7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a82:	f000 fb77 	bl	8001174 <HAL_Delay>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000f0 	.word	0x200000f0
 8000a94:	200000ec 	.word	0x200000ec
 8000a98:	0800430c 	.word	0x0800430c

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 faf6 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f80e 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f8d2 	bl	8000c50 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000aac:	f000 f878 	bl	8000ba0 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000ab0:	f000 f8a4 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC1_Init();
 8000ab4:	f7ff ff6a 	bl	800098c <ADC1_Init>
  LCDInit();
 8000ab8:	f7ff fee8 	bl	800088c <LCDInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	LCD_control_with_ADC();
 8000abc:	f7ff ffbc 	bl	8000a38 <LCD_control_with_ADC>
 8000ac0:	e7fc      	b.n	8000abc <main+0x20>
	...

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 ff8a 	bl	80039ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <SystemClock_Config+0xd4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <SystemClock_Config+0xd4>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <SystemClock_Config+0xd4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <SystemClock_Config+0xd8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <SystemClock_Config+0xd8>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <SystemClock_Config+0xd8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b30:	2302      	movs	r3, #2
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b42:	2304      	movs	r3, #4
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 f9c8 	bl	8002ee8 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b5e:	f000 f8e5 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2302      	movs	r3, #2
 8000b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fe68 	bl	8002854 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b8a:	f000 f8cf 	bl	8000d2c <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C3_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C3_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bde:	f001 f99b 	bl	8001f18 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 f8a0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	40005c00 	.word	0x40005c00
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 fbf6 	bl	8003424 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f875 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000018c 	.word	0x2000018c
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_GPIO_Init+0xd4>)
 8000cdc:	f001 f902 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0xd8>)
 8000cf8:	f000 ff60 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_GPIO_Init+0xd4>)
 8000d14:	f000 ff52 	bl	8001bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020800 	.word	0x40020800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 feec 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <HAL_I2C_MspInit+0x128>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12d      	bne.n	8000e06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <HAL_I2C_MspInit+0x130>)
 8000de4:	f000 feea 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e04:	e050      	b.n	8000ea8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <HAL_I2C_MspInit+0x134>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d14b      	bne.n	8000ea8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <HAL_I2C_MspInit+0x138>)
 8000e66:	f000 fea9 	bl	8001bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <HAL_I2C_MspInit+0x13c>)
 8000e88:	f000 fe98 	bl	8001bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_I2C_MspInit+0x12c>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
}
 8000ea8:	bf00      	nop
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40005c00 	.word	0x40005c00
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_UART_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f22:	230c      	movs	r3, #12
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f32:	2307      	movs	r3, #7
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000f3e:	f000 fe3d 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004400 	.word	0x40004400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8c6 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f002 fd0e 	bl	80039fc <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20020000 	.word	0x20020000
 800100c:	00000400 	.word	0x00000400
 8001010:	200001d4 	.word	0x200001d4
 8001014:	20000328 	.word	0x20000328

08001018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800106a:	f002 fccd 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fd15 	bl	8000a9c <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001080:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 8001084:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001088:	20000324 	.word	0x20000324

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fd4b 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe38 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fd55 	bl	8001ba2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 fd2b 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000020 	.word	0x20000020
 800112c:	20000028 	.word	0x20000028
 8001130:	20000024 	.word	0x20000024

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000028 	.word	0x20000028
 8001158:	200001d8 	.word	0x200001d8

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200001d8 	.word	0x200001d8

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000028 	.word	0x20000028

080011bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e033      	b.n	800123a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f831 	bl	8001242 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001202:	f023 0302 	bic.w	r3, r3, #2
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 faf2 	bl	80017f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
 800122a:	e001      	b.n	8001230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Start+0x1a>
 800126e:	2302      	movs	r3, #2
 8001270:	e0b2      	b.n	80013d8 <HAL_ADC_Start+0x180>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d018      	beq.n	80012ba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <HAL_ADC_Start+0x18c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_ADC_Start+0x190>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9a      	lsrs	r2, r3, #18
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d17a      	bne.n	80013be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001306:	d106      	bne.n	8001316 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f023 0206 	bic.w	r2, r3, #6
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
 8001314:	e002      	b.n	800131c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001324:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_ADC_Start+0x194>)
 8001326:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001330:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2b00      	cmp	r3, #0
 800133c:	d12a      	bne.n	8001394 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <HAL_ADC_Start+0x198>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d015      	beq.n	8001374 <HAL_ADC_Start+0x11c>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_ADC_Start+0x19c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d105      	bne.n	800135e <HAL_ADC_Start+0x106>
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_ADC_Start+0x194>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <HAL_ADC_Start+0x1a0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d136      	bne.n	80013d6 <HAL_ADC_Start+0x17e>
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_ADC_Start+0x194>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d130      	bne.n	80013d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d129      	bne.n	80013d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	e020      	b.n	80013d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <HAL_ADC_Start+0x198>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d11b      	bne.n	80013d6 <HAL_ADC_Start+0x17e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d114      	bne.n	80013d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e00b      	b.n	80013d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000020 	.word	0x20000020
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	40012300 	.word	0x40012300
 80013f0:	40012000 	.word	0x40012000
 80013f4:	40012100 	.word	0x40012100
 80013f8:	40012200 	.word	0x40012200

080013fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Stop+0x16>
 800140e:	2302      	movs	r3, #2
 8001410:	e021      	b.n	8001456 <HAL_ADC_Stop+0x5a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d113      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800148a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f043 0220 	orr.w	r2, r3, #32
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e063      	b.n	8001570 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a8:	f7ff fe58 	bl	800115c <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ae:	e021      	b.n	80014f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	d01d      	beq.n	80014f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_ADC_PollForConversion+0x6c>
 80014be:	f7ff fe4d 	bl	800115c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d212      	bcs.n	80014f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d00b      	beq.n	80014f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f043 0204 	orr.w	r2, r3, #4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e03d      	b.n	8001570 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d1d6      	bne.n	80014b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f06f 0212 	mvn.w	r2, #18
 800150a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d123      	bne.n	800156e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d11f      	bne.n	800156e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001546:	2b00      	cmp	r3, #0
 8001548:	d111      	bne.n	800156e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x1c>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e113      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x244>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d925      	bls.n	800160c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68d9      	ldr	r1, [r3, #12]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	3b1e      	subs	r3, #30
 80015d6:	2207      	movs	r2, #7
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43da      	mvns	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	400a      	ands	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	4603      	mov	r3, r0
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4403      	add	r3, r0
 80015fe:	3b1e      	subs	r3, #30
 8001600:	409a      	lsls	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	e022      	b.n	8001652 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	2207      	movs	r2, #7
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	4603      	mov	r3, r0
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4403      	add	r3, r0
 8001648:	409a      	lsls	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d824      	bhi.n	80016a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b05      	subs	r3, #5
 800166c:	221f      	movs	r2, #31
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	400a      	ands	r2, r1
 800167a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3b05      	subs	r3, #5
 8001696:	fa00 f203 	lsl.w	r2, r0, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
 80016a2:	e04c      	b.n	800173e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d824      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b23      	subs	r3, #35	; 0x23
 80016be:	221f      	movs	r2, #31
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b23      	subs	r3, #35	; 0x23
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
 80016f4:	e023      	b.n	800173e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b41      	subs	r3, #65	; 0x41
 8001708:	221f      	movs	r2, #31
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3b41      	subs	r3, #65	; 0x41
 8001732:	fa00 f203 	lsl.w	r2, r0, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_ADC_ConfigChannel+0x250>)
 8001740:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_ADC_ConfigChannel+0x254>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d10f      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1d8>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b12      	cmp	r3, #18
 8001752:	d10b      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_ADC_ConfigChannel+0x254>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12b      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x23a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_ADC_ConfigChannel+0x258>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_ADC_ConfigChannel+0x1f4>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b11      	cmp	r3, #17
 8001786:	d122      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_ADC_ConfigChannel+0x258>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d111      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_ADC_ConfigChannel+0x25c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_ADC_ConfigChannel+0x260>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9a      	lsrs	r2, r3, #18
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40012300 	.word	0x40012300
 80017e8:	40012000 	.word	0x40012000
 80017ec:	10000012 	.word	0x10000012
 80017f0:	20000020 	.word	0x20000020
 80017f4:	431bde83 	.word	0x431bde83

080017f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001800:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <ADC_Init+0x1f0>)
 8001802:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	431a      	orrs	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800182c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	021a      	lsls	r2, r3, #8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	4a58      	ldr	r2, [pc, #352]	; (80019ec <ADC_Init+0x1f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800189e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6899      	ldr	r1, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	e00f      	b.n	80018f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0202 	bic.w	r2, r2, #2
 8001904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
 8001910:	005a      	lsls	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01b      	beq.n	800195c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001932:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6859      	ldr	r1, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	3b01      	subs	r3, #1
 8001950:	035a      	lsls	r2, r3, #13
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	e007      	b.n	800196c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	3b01      	subs	r3, #1
 8001988:	051a      	lsls	r2, r3, #20
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6899      	ldr	r1, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ae:	025a      	lsls	r2, r3, #9
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	029a      	lsls	r2, r3, #10
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40012300 	.word	0x40012300
 80019ec:	0f000001 	.word	0x0f000001

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff47 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff5c 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffb0 	bl	8001b10 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e165      	b.n	8001ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8154 	bne.w	8001e9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80ae 	beq.w	8001e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x308>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x21a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <HAL_GPIO_Init+0x30c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x216>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4d      	ldr	r2, [pc, #308]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x212>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x314>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x20e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4b      	ldr	r2, [pc, #300]	; (8001ed4 <HAL_GPIO_Init+0x318>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x20a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4a      	ldr	r2, [pc, #296]	; (8001ed8 <HAL_GPIO_Init+0x31c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a49      	ldr	r2, [pc, #292]	; (8001edc <HAL_GPIO_Init+0x320>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x202>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x21c>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae96 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e12b      	b.n	8002182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe ff22 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f000 fd5c 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a81      	ldr	r2, [pc, #516]	; (800218c <HAL_I2C_Init+0x274>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d807      	bhi.n	8001f9c <HAL_I2C_Init+0x84>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a80      	ldr	r2, [pc, #512]	; (8002190 <HAL_I2C_Init+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e006      	b.n	8001faa <HAL_I2C_Init+0x92>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	; (8002194 <HAL_I2C_Init+0x27c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bf94      	ite	ls
 8001fa4:	2301      	movls	r3, #1
 8001fa6:	2300      	movhi	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0e7      	b.n	8002182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a78      	ldr	r2, [pc, #480]	; (8002198 <HAL_I2C_Init+0x280>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_I2C_Init+0x274>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d802      	bhi.n	8001fec <HAL_I2C_Init+0xd4>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	e009      	b.n	8002000 <HAL_I2C_Init+0xe8>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_I2C_Init+0x284>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	495c      	ldr	r1, [pc, #368]	; (800218c <HAL_I2C_Init+0x274>)
 800201c:	428b      	cmp	r3, r1
 800201e:	d819      	bhi.n	8002054 <HAL_I2C_Init+0x13c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e59      	subs	r1, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fbb1 f3f3 	udiv	r3, r1, r3
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002034:	400b      	ands	r3, r1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_I2C_Init+0x138>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e59      	subs	r1, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb1 f3f3 	udiv	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	e051      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002050:	2304      	movs	r3, #4
 8002052:	e04f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_I2C_Init+0x168>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e012      	b.n	80020a6 <HAL_I2C_Init+0x18e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x196>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e022      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10e      	bne.n	80020d4 <HAL_I2C_Init+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e58      	subs	r0, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	440b      	add	r3, r1
 80020c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d2:	e00f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	0099      	lsls	r1, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	6809      	ldr	r1, [r1, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6911      	ldr	r1, [r2, #16]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	000186a0 	.word	0x000186a0
 8002190:	001e847f 	.word	0x001e847f
 8002194:	003d08ff 	.word	0x003d08ff
 8002198:	431bde83 	.word	0x431bde83
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	817b      	strh	r3, [r7, #10]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7fe ffd2 	bl	800115c <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	f040 80e0 	bne.w	8002388 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2319      	movs	r3, #25
 80021ce:	2201      	movs	r2, #1
 80021d0:	4970      	ldr	r1, [pc, #448]	; (8002394 <HAL_I2C_Master_Transmit+0x1f4>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f964 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	e0d3      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x50>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0cc      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d007      	beq.n	8002216 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2221      	movs	r2, #33	; 0x21
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2210      	movs	r2, #16
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	893a      	ldrh	r2, [r7, #8]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_I2C_Master_Transmit+0x1f8>)
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f89c 	bl	800239c <I2C_MasterRequestWrite>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e08d      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002284:	e066      	b.n	8002354 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa22 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d107      	bne.n	80022ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_I2C_Master_Transmit+0x188>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	6a39      	ldr	r1, [r7, #32]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fa19 	bl	8002764 <I2C_WaitOnBTFFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e01a      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d194      	bne.n	8002286 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	00100002 	.word	0x00100002
 8002398:	ffff0000 	.word	0xffff0000

0800239c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	460b      	mov	r3, r1
 80023aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d006      	beq.n	80023c6 <I2C_MasterRequestWrite+0x2a>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d003      	beq.n	80023c6 <I2C_MasterRequestWrite+0x2a>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e00b      	b.n	80023f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	2b12      	cmp	r3, #18
 80023de:	d107      	bne.n	80023f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f84f 	bl	80024a0 <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002416:	d103      	bne.n	8002420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e035      	b.n	8002490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242c:	d108      	bne.n	8002440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	e01b      	b.n	8002478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	11db      	asrs	r3, r3, #7
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f063 030f 	orn	r3, r3, #15
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <I2C_MasterRequestWrite+0xfc>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f898 	bl	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e010      	b.n	8002490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <I2C_MasterRequestWrite+0x100>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f888 	bl	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	00010008 	.word	0x00010008
 800249c:	00010002 	.word	0x00010002

080024a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	e048      	b.n	8002544 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d044      	beq.n	8002544 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7fe fe4f 	bl	800115c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d139      	bne.n	8002544 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10d      	bne.n	80024f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	e00c      	b.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	429a      	cmp	r2, r3
 8002514:	d116      	bne.n	8002544 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e023      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10d      	bne.n	800256a <I2C_WaitOnFlagUntilTimeout+0xca>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	e00c      	b.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	43da      	mvns	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	429a      	cmp	r2, r3
 8002588:	d093      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a2:	e071      	b.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d123      	bne.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e067      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d041      	beq.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002604:	f7fe fdaa 	bl	800115c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d302      	bcc.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d136      	bne.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10c      	bne.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e00b      	b.n	8002656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	43da      	mvns	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e021      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	0c1b      	lsrs	r3, r3, #16
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d10c      	bne.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	43da      	mvns	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e00b      	b.n	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f af6d 	bne.w	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e0:	e034      	b.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f886 	bl	80027f4 <I2C_IsAcknowledgeFailed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e034      	b.n	800275c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d028      	beq.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe fd2f 	bl	800115c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11d      	bne.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d016      	beq.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e007      	b.n	800275c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d1c3      	bne.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002770:	e034      	b.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f83e 	bl	80027f4 <I2C_IsAcknowledgeFailed>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e034      	b.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d028      	beq.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7fe fce7 	bl	800115c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11d      	bne.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d016      	beq.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d1c3      	bne.n	8002772 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d11b      	bne.n	8002844 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002814:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0204 	orr.w	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fc0a 	bl	800115c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fc06 	bl	800115c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f855 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fb6a 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08004310 	.word	0x08004310
 8002a18:	20000020 	.word	0x20000020
 8002a1c:	20000024 	.word	0x20000024

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000020 	.word	0x20000020

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a9b      	lsrs	r3, r3, #10
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08004320 	.word	0x08004320

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a64:	f7ff ffdc 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08004320 	.word	0x08004320

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b0ae      	sub	sp, #184	; 0xb8
 8002a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4bcb      	ldr	r3, [pc, #812]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	f200 8206 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x440>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002ec9 	.word	0x08002ec9
 8002acc:	08002ec9 	.word	0x08002ec9
 8002ad0:	08002ec9 	.word	0x08002ec9
 8002ad4:	08002b01 	.word	0x08002b01
 8002ad8:	08002ec9 	.word	0x08002ec9
 8002adc:	08002ec9 	.word	0x08002ec9
 8002ae0:	08002ec9 	.word	0x08002ec9
 8002ae4:	08002b09 	.word	0x08002b09
 8002ae8:	08002ec9 	.word	0x08002ec9
 8002aec:	08002ec9 	.word	0x08002ec9
 8002af0:	08002ec9 	.word	0x08002ec9
 8002af4:	08002cf9 	.word	0x08002cf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4bb9      	ldr	r3, [pc, #740]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002afe:	e1e7      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4bb8      	ldr	r3, [pc, #736]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b06:	e1e3      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4bb4      	ldr	r3, [pc, #720]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b14:	4bb1      	ldr	r3, [pc, #708]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d071      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4bae      	ldr	r3, [pc, #696]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	0159      	lsls	r1, r3, #5
 8002b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b58:	0150      	lsls	r0, r2, #5
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	1a51      	subs	r1, r2, r1
 8002b62:	6439      	str	r1, [r7, #64]	; 0x40
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b78:	4649      	mov	r1, r9
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b82:	4641      	mov	r1, r8
 8002b84:	018a      	lsls	r2, r1, #6
 8002b86:	4641      	mov	r1, r8
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4641      	mov	r1, r8
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bba:	462b      	mov	r3, r5
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	eb42 0303 	adc.w	r3, r2, r3
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	024b      	lsls	r3, r1, #9
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bda:	4621      	mov	r1, r4
 8002bdc:	024a      	lsls	r2, r1, #9
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bf4:	f7fd fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c02:	e067      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c1e:	2300      	movs	r3, #0
 8002c20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c26:	4622      	mov	r2, r4
 8002c28:	462b      	mov	r3, r5
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	0159      	lsls	r1, r3, #5
 8002c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c38:	0150      	lsls	r0, r2, #5
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4621      	mov	r1, r4
 8002c40:	1a51      	subs	r1, r2, r1
 8002c42:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c44:	4629      	mov	r1, r5
 8002c46:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c58:	4649      	mov	r1, r9
 8002c5a:	018b      	lsls	r3, r1, #6
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c62:	4641      	mov	r1, r8
 8002c64:	018a      	lsls	r2, r1, #6
 8002c66:	4641      	mov	r1, r8
 8002c68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c86:	4692      	mov	sl, r2
 8002c88:	469b      	mov	fp, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	462b      	mov	r3, r5
 8002c94:	eb4b 0303 	adc.w	r3, fp, r3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	028b      	lsls	r3, r1, #10
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	028a      	lsls	r2, r1, #10
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002cc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cc6:	f7fd faf3 	bl	80002b0 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd4:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cf6:	e0eb      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	663b      	str	r3, [r7, #96]	; 0x60
 8002d24:	2300      	movs	r3, #0
 8002d26:	667b      	str	r3, [r7, #100]	; 0x64
 8002d28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	462b      	mov	r3, r5
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	0159      	lsls	r1, r3, #5
 8002d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3e:	0150      	lsls	r0, r2, #5
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4621      	mov	r1, r4
 8002d46:	1a51      	subs	r1, r2, r1
 8002d48:	61b9      	str	r1, [r7, #24]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d5e:	4659      	mov	r1, fp
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	4651      	mov	r1, sl
 8002d64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d68:	4651      	mov	r1, sl
 8002d6a:	018a      	lsls	r2, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d72:	4659      	mov	r1, fp
 8002d74:	eb63 0901 	sbc.w	r9, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8c:	4690      	mov	r8, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	4623      	mov	r3, r4
 8002d92:	eb18 0303 	adds.w	r3, r8, r3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	462b      	mov	r3, r5
 8002d9a:	eb49 0303 	adc.w	r3, r9, r3
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002dac:	4629      	mov	r1, r5
 8002dae:	024b      	lsls	r3, r1, #9
 8002db0:	4621      	mov	r1, r4
 8002db2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db6:	4621      	mov	r1, r4
 8002db8:	024a      	lsls	r2, r1, #9
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dcc:	f7fd fa70 	bl	80002b0 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dda:	e065      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x420>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	4611      	mov	r1, r2
 8002df4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e02:	4642      	mov	r2, r8
 8002e04:	464b      	mov	r3, r9
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	4649      	mov	r1, r9
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e34:	4659      	mov	r1, fp
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4651      	mov	r1, sl
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4651      	mov	r1, sl
 8002e44:	1a54      	subs	r4, r2, r1
 8002e46:	4659      	mov	r1, fp
 8002e48:	eb63 0501 	sbc.w	r5, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	00eb      	lsls	r3, r5, #3
 8002e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5a:	00e2      	lsls	r2, r4, #3
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	461d      	mov	r5, r3
 8002e60:	4643      	mov	r3, r8
 8002e62:	18e3      	adds	r3, r4, r3
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	464b      	mov	r3, r9
 8002e68:	eb45 0303 	adc.w	r3, r5, r3
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	028b      	lsls	r3, r1, #10
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e84:	4621      	mov	r1, r4
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e90:	2200      	movs	r2, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e9a:	f7fd fa09 	bl	80002b0 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0f1b      	lsrs	r3, r3, #28
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ece:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	37b8      	adds	r7, #184	; 0xb8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	00f42400 	.word	0x00f42400

08002ee8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e28d      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8083 	beq.w	800300e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f08:	4b94      	ldr	r3, [pc, #592]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d019      	beq.n	8002f48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f14:	4b91      	ldr	r3, [pc, #580]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f20:	4b8e      	ldr	r3, [pc, #568]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b8b      	ldr	r3, [pc, #556]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b84      	ldr	r3, [pc, #528]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x124>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e25a      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x90>
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xcc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0xb4>
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a72      	ldr	r2, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xcc>
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6b      	ldr	r2, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f8ce 	bl	800115c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe f8ca 	bl	800115c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e21f      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xdc>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f8ba 	bl	800115c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe f8b6 	bl	800115c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e20b      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b57      	ldr	r3, [pc, #348]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x104>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d06f      	beq.n	80030fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800301a:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800302e:	2b08      	cmp	r3, #8
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b44      	ldr	r3, [pc, #272]	; (800315c <HAL_RCC_OscConfig+0x274>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x186>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1d3      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4937      	ldr	r1, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x274>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e03a      	b.n	80030fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x278>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fe f863 	bl	800115c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309a:	f7fe f85f 	bl	800115c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e1b4      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_RCC_OscConfig+0x274>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4925      	ldr	r1, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x274>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x278>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe f842 	bl	800115c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030dc:	f7fe f83e 	bl	800115c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e193      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d036      	beq.n	8003174 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe f822 	bl	800115c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311c:	f7fe f81e 	bl	800115c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e173      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x234>
 800313a:	e01b      	b.n	8003174 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_OscConfig+0x27c>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fe f80b 	bl	800115c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	e00e      	b.n	8003168 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314a:	f7fe f807 	bl	800115c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d907      	bls.n	8003168 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e15c      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
 800315c:	40023800 	.word	0x40023800
 8003160:	42470000 	.word	0x42470000
 8003164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b8a      	ldr	r3, [pc, #552]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ea      	bne.n	800314a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8097 	beq.w	80032b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b83      	ldr	r3, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	4b7f      	ldr	r3, [pc, #508]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a7e      	ldr	r2, [pc, #504]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b7c      	ldr	r3, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ca:	f7fd ffc7 	bl	800115c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fd ffc3 	bl	800115c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e118      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b6c      	ldr	r3, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x31e>
 80031f8:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a65      	ldr	r2, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	e01c      	b.n	8003240 <HAL_RCC_OscConfig+0x358>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x340>
 800320e:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
 800321a:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0x358>
 8003228:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a59      	ldr	r2, [pc, #356]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	4b57      	ldr	r3, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a56      	ldr	r2, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd ff88 	bl	800115c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fd ff84 	bl	800115c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0d7      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ee      	beq.n	8003250 <HAL_RCC_OscConfig+0x368>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd ff72 	bl	800115c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd ff6e 	bl	800115c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0c1      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003292:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ee      	bne.n	800327c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80ad 	beq.w	8003414 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d060      	beq.n	8003388 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d145      	bne.n	800335a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4b4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd ff42 	bl	800115c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd ff3e 	bl	800115c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e093      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x4b4>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd ff13 	bl	800115c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7fd ff0f 	bl	800115c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e064      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x452>
 8003358:	e05c      	b.n	8003414 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x4b4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fefc 	bl	800115c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003368:	f7fd fef8 	bl	800115c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e04d      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x480>
 8003386:	e045      	b.n	8003414 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e040      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a0:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HAL_RCC_OscConfig+0x538>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d030      	beq.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d129      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d122      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d119      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10f      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e042      	b.n	80034bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd fd3c 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f82b 	bl	80034c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0c0      	sub	sp, #256	; 0x100
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	68d9      	ldr	r1, [r3, #12]
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	ea40 0301 	orr.w	r3, r0, r1
 80034ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	431a      	orrs	r2, r3
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800351c:	f021 010c 	bic.w	r1, r1, #12
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800352a:	430b      	orrs	r3, r1
 800352c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	6999      	ldr	r1, [r3, #24]
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	ea40 0301 	orr.w	r3, r0, r1
 800354a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <UART_SetConfig+0x2cc>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d005      	beq.n	8003564 <UART_SetConfig+0xa0>
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <UART_SetConfig+0x2d0>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d104      	bne.n	800356e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003564:	f7ff fa7c 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8003568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800356c:	e003      	b.n	8003576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356e:	f7ff fa63 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8003572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003580:	f040 810c 	bne.w	800379c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800358e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003596:	4622      	mov	r2, r4
 8003598:	462b      	mov	r3, r5
 800359a:	1891      	adds	r1, r2, r2
 800359c:	65b9      	str	r1, [r7, #88]	; 0x58
 800359e:	415b      	adcs	r3, r3
 80035a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035a6:	4621      	mov	r1, r4
 80035a8:	eb12 0801 	adds.w	r8, r2, r1
 80035ac:	4629      	mov	r1, r5
 80035ae:	eb43 0901 	adc.w	r9, r3, r1
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c6:	4690      	mov	r8, r2
 80035c8:	4699      	mov	r9, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	eb18 0303 	adds.w	r3, r8, r3
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035d4:	462b      	mov	r3, r5
 80035d6:	eb49 0303 	adc.w	r3, r9, r3
 80035da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035f2:	460b      	mov	r3, r1
 80035f4:	18db      	adds	r3, r3, r3
 80035f6:	653b      	str	r3, [r7, #80]	; 0x50
 80035f8:	4613      	mov	r3, r2
 80035fa:	eb42 0303 	adc.w	r3, r2, r3
 80035fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003608:	f7fc fe52 	bl	80002b0 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4b61      	ldr	r3, [pc, #388]	; (8003798 <UART_SetConfig+0x2d4>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011c      	lsls	r4, r3, #4
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	64b9      	str	r1, [r7, #72]	; 0x48
 8003634:	415b      	adcs	r3, r3
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800363c:	4641      	mov	r1, r8
 800363e:	eb12 0a01 	adds.w	sl, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb43 0b01 	adc.w	fp, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800365c:	4692      	mov	sl, r2
 800365e:	469b      	mov	fp, r3
 8003660:	4643      	mov	r3, r8
 8003662:	eb1a 0303 	adds.w	r3, sl, r3
 8003666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800366a:	464b      	mov	r3, r9
 800366c:	eb4b 0303 	adc.w	r3, fp, r3
 8003670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	647b      	str	r3, [r7, #68]	; 0x44
 8003696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800369a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800369e:	f7fc fe07 	bl	80002b0 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <UART_SetConfig+0x2d4>)
 80036aa:	fba3 2301 	umull	r2, r3, r3, r1
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2264      	movs	r2, #100	; 0x64
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	1acb      	subs	r3, r1, r3
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <UART_SetConfig+0x2d4>)
 80036c0:	fba3 2302 	umull	r2, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036cc:	441c      	add	r4, r3
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036e8:	415b      	adcs	r3, r3
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6339      	str	r1, [r7, #48]	; 0x30
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800373c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003744:	460b      	mov	r3, r1
 8003746:	18db      	adds	r3, r3, r3
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	4613      	mov	r3, r2
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800375a:	f7fc fda9 	bl	80002b0 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <UART_SetConfig+0x2d4>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3332      	adds	r3, #50	; 0x32
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <UART_SetConfig+0x2d4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4422      	add	r2, r4
 800378a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800378c:	e106      	b.n	800399c <UART_SetConfig+0x4d8>
 800378e:	bf00      	nop
 8003790:	40011000 	.word	0x40011000
 8003794:	40011400 	.word	0x40011400
 8003798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037ae:	4642      	mov	r2, r8
 80037b0:	464b      	mov	r3, r9
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	6239      	str	r1, [r7, #32]
 80037b6:	415b      	adcs	r3, r3
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037be:	4641      	mov	r1, r8
 80037c0:	1854      	adds	r4, r2, r1
 80037c2:	4649      	mov	r1, r9
 80037c4:	eb43 0501 	adc.w	r5, r3, r1
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	00eb      	lsls	r3, r5, #3
 80037d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037e4:	464b      	mov	r3, r9
 80037e6:	eb45 0303 	adc.w	r3, r5, r3
 80037ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800380a:	4629      	mov	r1, r5
 800380c:	008b      	lsls	r3, r1, #2
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003814:	4621      	mov	r1, r4
 8003816:	008a      	lsls	r2, r1, #2
 8003818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800381c:	f7fc fd48 	bl	80002b0 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b60      	ldr	r3, [pc, #384]	; (80039a8 <UART_SetConfig+0x4e4>)
 8003826:	fba3 2302 	umull	r2, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	011c      	lsls	r4, r3, #4
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800383c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	61b9      	str	r1, [r7, #24]
 8003848:	415b      	adcs	r3, r3
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6139      	str	r1, [r7, #16]
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	67bb      	str	r3, [r7, #120]	; 0x78
 800389a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038a8:	4649      	mov	r1, r9
 80038aa:	008b      	lsls	r3, r1, #2
 80038ac:	4641      	mov	r1, r8
 80038ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b2:	4641      	mov	r1, r8
 80038b4:	008a      	lsls	r2, r1, #2
 80038b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ba:	f7fc fcf9 	bl	80002b0 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <UART_SetConfig+0x4e4>)
 80038c6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2264      	movs	r2, #100	; 0x64
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	3332      	adds	r3, #50	; 0x32
 80038d8:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <UART_SetConfig+0x4e4>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e4:	441c      	add	r4, r3
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	673b      	str	r3, [r7, #112]	; 0x70
 80038ee:	677a      	str	r2, [r7, #116]	; 0x74
 80038f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	415b      	adcs	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003904:	4641      	mov	r1, r8
 8003906:	1851      	adds	r1, r2, r1
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	4649      	mov	r1, r9
 800390c:	414b      	adcs	r3, r1
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800391c:	4659      	mov	r1, fp
 800391e:	00cb      	lsls	r3, r1, #3
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003926:	4651      	mov	r1, sl
 8003928:	00ca      	lsls	r2, r1, #3
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	4603      	mov	r3, r0
 8003930:	4642      	mov	r2, r8
 8003932:	189b      	adds	r3, r3, r2
 8003934:	66bb      	str	r3, [r7, #104]	; 0x68
 8003936:	464b      	mov	r3, r9
 8003938:	460a      	mov	r2, r1
 800393a:	eb42 0303 	adc.w	r3, r2, r3
 800393e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	663b      	str	r3, [r7, #96]	; 0x60
 800394a:	667a      	str	r2, [r7, #100]	; 0x64
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003958:	4649      	mov	r1, r9
 800395a:	008b      	lsls	r3, r1, #2
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003962:	4641      	mov	r1, r8
 8003964:	008a      	lsls	r2, r1, #2
 8003966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800396a:	f7fc fca1 	bl	80002b0 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <UART_SetConfig+0x4e4>)
 8003974:	fba3 1302 	umull	r1, r3, r3, r2
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	2164      	movs	r1, #100	; 0x64
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	3332      	adds	r3, #50	; 0x32
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <UART_SetConfig+0x4e4>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	f003 020f 	and.w	r2, r3, #15
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4422      	add	r2, r4
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039a2:	46bd      	mov	sp, r7
 80039a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a8:	51eb851f 	.word	0x51eb851f

080039ac <siprintf>:
 80039ac:	b40e      	push	{r1, r2, r3}
 80039ae:	b500      	push	{lr}
 80039b0:	b09c      	sub	sp, #112	; 0x70
 80039b2:	ab1d      	add	r3, sp, #116	; 0x74
 80039b4:	9002      	str	r0, [sp, #8]
 80039b6:	9006      	str	r0, [sp, #24]
 80039b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039bc:	4809      	ldr	r0, [pc, #36]	; (80039e4 <siprintf+0x38>)
 80039be:	9107      	str	r1, [sp, #28]
 80039c0:	9104      	str	r1, [sp, #16]
 80039c2:	4909      	ldr	r1, [pc, #36]	; (80039e8 <siprintf+0x3c>)
 80039c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039c8:	9105      	str	r1, [sp, #20]
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	a902      	add	r1, sp, #8
 80039d0:	f000 f992 	bl	8003cf8 <_svfiprintf_r>
 80039d4:	9b02      	ldr	r3, [sp, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	b01c      	add	sp, #112	; 0x70
 80039dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e0:	b003      	add	sp, #12
 80039e2:	4770      	bx	lr
 80039e4:	20000078 	.word	0x20000078
 80039e8:	ffff0208 	.word	0xffff0208

080039ec <memset>:
 80039ec:	4402      	add	r2, r0
 80039ee:	4603      	mov	r3, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	f803 1b01 	strb.w	r1, [r3], #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000078 	.word	0x20000078

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	; (8003a40 <__libc_init_array+0x38>)
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2600      	movs	r6, #0
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	4d0b      	ldr	r5, [pc, #44]	; (8003a48 <__libc_init_array+0x40>)
 8003a1a:	4c0c      	ldr	r4, [pc, #48]	; (8003a4c <__libc_init_array+0x44>)
 8003a1c:	f000 fc6a 	bl	80042f4 <_init>
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	2600      	movs	r6, #0
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08004364 	.word	0x08004364
 8003a44:	08004364 	.word	0x08004364
 8003a48:	08004364 	.word	0x08004364
 8003a4c:	08004368 	.word	0x08004368

08003a50 <__retarget_lock_acquire_recursive>:
 8003a50:	4770      	bx	lr

08003a52 <__retarget_lock_release_recursive>:
 8003a52:	4770      	bx	lr

08003a54 <_free_r>:
 8003a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d044      	beq.n	8003ae4 <_free_r+0x90>
 8003a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5e:	9001      	str	r0, [sp, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f1a1 0404 	sub.w	r4, r1, #4
 8003a66:	bfb8      	it	lt
 8003a68:	18e4      	addlt	r4, r4, r3
 8003a6a:	f000 f8df 	bl	8003c2c <__malloc_lock>
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <_free_r+0x94>)
 8003a70:	9801      	ldr	r0, [sp, #4]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	b933      	cbnz	r3, 8003a84 <_free_r+0x30>
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6014      	str	r4, [r2, #0]
 8003a7a:	b003      	add	sp, #12
 8003a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a80:	f000 b8da 	b.w	8003c38 <__malloc_unlock>
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	d908      	bls.n	8003a9a <_free_r+0x46>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf01      	itttt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	1949      	addeq	r1, r1, r5
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	e7ed      	b.n	8003a76 <_free_r+0x22>
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b10b      	cbz	r3, 8003aa4 <_free_r+0x50>
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d9fa      	bls.n	8003a9a <_free_r+0x46>
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	1855      	adds	r5, r2, r1
 8003aa8:	42a5      	cmp	r5, r4
 8003aaa:	d10b      	bne.n	8003ac4 <_free_r+0x70>
 8003aac:	6824      	ldr	r4, [r4, #0]
 8003aae:	4421      	add	r1, r4
 8003ab0:	1854      	adds	r4, r2, r1
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	d1e0      	bne.n	8003a7a <_free_r+0x26>
 8003ab8:	681c      	ldr	r4, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	6053      	str	r3, [r2, #4]
 8003abe:	440c      	add	r4, r1
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	e7da      	b.n	8003a7a <_free_r+0x26>
 8003ac4:	d902      	bls.n	8003acc <_free_r+0x78>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	6003      	str	r3, [r0, #0]
 8003aca:	e7d6      	b.n	8003a7a <_free_r+0x26>
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1961      	adds	r1, r4, r5
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	bf04      	itt	eq
 8003ad4:	6819      	ldreq	r1, [r3, #0]
 8003ad6:	685b      	ldreq	r3, [r3, #4]
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	bf04      	itt	eq
 8003adc:	1949      	addeq	r1, r1, r5
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	6054      	str	r4, [r2, #4]
 8003ae2:	e7ca      	b.n	8003a7a <_free_r+0x26>
 8003ae4:	b003      	add	sp, #12
 8003ae6:	bd30      	pop	{r4, r5, pc}
 8003ae8:	2000031c 	.word	0x2000031c

08003aec <sbrk_aligned>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4e0e      	ldr	r6, [pc, #56]	; (8003b28 <sbrk_aligned+0x3c>)
 8003af0:	460c      	mov	r4, r1
 8003af2:	6831      	ldr	r1, [r6, #0]
 8003af4:	4605      	mov	r5, r0
 8003af6:	b911      	cbnz	r1, 8003afe <sbrk_aligned+0x12>
 8003af8:	f000 fba6 	bl	8004248 <_sbrk_r>
 8003afc:	6030      	str	r0, [r6, #0]
 8003afe:	4621      	mov	r1, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 fba1 	bl	8004248 <_sbrk_r>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d00a      	beq.n	8003b20 <sbrk_aligned+0x34>
 8003b0a:	1cc4      	adds	r4, r0, #3
 8003b0c:	f024 0403 	bic.w	r4, r4, #3
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d007      	beq.n	8003b24 <sbrk_aligned+0x38>
 8003b14:	1a21      	subs	r1, r4, r0
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fb96 	bl	8004248 <_sbrk_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d101      	bne.n	8003b24 <sbrk_aligned+0x38>
 8003b20:	f04f 34ff 	mov.w	r4, #4294967295
 8003b24:	4620      	mov	r0, r4
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	20000320 	.word	0x20000320

08003b2c <_malloc_r>:
 8003b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b30:	1ccd      	adds	r5, r1, #3
 8003b32:	f025 0503 	bic.w	r5, r5, #3
 8003b36:	3508      	adds	r5, #8
 8003b38:	2d0c      	cmp	r5, #12
 8003b3a:	bf38      	it	cc
 8003b3c:	250c      	movcc	r5, #12
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	4607      	mov	r7, r0
 8003b42:	db01      	blt.n	8003b48 <_malloc_r+0x1c>
 8003b44:	42a9      	cmp	r1, r5
 8003b46:	d905      	bls.n	8003b54 <_malloc_r+0x28>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	4630      	mov	r0, r6
 8003b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c28 <_malloc_r+0xfc>
 8003b58:	f000 f868 	bl	8003c2c <__malloc_lock>
 8003b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b60:	461c      	mov	r4, r3
 8003b62:	bb5c      	cbnz	r4, 8003bbc <_malloc_r+0x90>
 8003b64:	4629      	mov	r1, r5
 8003b66:	4638      	mov	r0, r7
 8003b68:	f7ff ffc0 	bl	8003aec <sbrk_aligned>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	4604      	mov	r4, r0
 8003b70:	d155      	bne.n	8003c1e <_malloc_r+0xf2>
 8003b72:	f8d8 4000 	ldr.w	r4, [r8]
 8003b76:	4626      	mov	r6, r4
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	d145      	bne.n	8003c08 <_malloc_r+0xdc>
 8003b7c:	2c00      	cmp	r4, #0
 8003b7e:	d048      	beq.n	8003c12 <_malloc_r+0xe6>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	4631      	mov	r1, r6
 8003b84:	4638      	mov	r0, r7
 8003b86:	eb04 0903 	add.w	r9, r4, r3
 8003b8a:	f000 fb5d 	bl	8004248 <_sbrk_r>
 8003b8e:	4581      	cmp	r9, r0
 8003b90:	d13f      	bne.n	8003c12 <_malloc_r+0xe6>
 8003b92:	6821      	ldr	r1, [r4, #0]
 8003b94:	1a6d      	subs	r5, r5, r1
 8003b96:	4629      	mov	r1, r5
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f7ff ffa7 	bl	8003aec <sbrk_aligned>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d037      	beq.n	8003c12 <_malloc_r+0xe6>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	442b      	add	r3, r5
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d038      	beq.n	8003c22 <_malloc_r+0xf6>
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	42a2      	cmp	r2, r4
 8003bb4:	d12b      	bne.n	8003c0e <_malloc_r+0xe2>
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	e00f      	b.n	8003bdc <_malloc_r+0xb0>
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	1b52      	subs	r2, r2, r5
 8003bc0:	d41f      	bmi.n	8003c02 <_malloc_r+0xd6>
 8003bc2:	2a0b      	cmp	r2, #11
 8003bc4:	d917      	bls.n	8003bf6 <_malloc_r+0xca>
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	6025      	str	r5, [r4, #0]
 8003bcc:	bf18      	it	ne
 8003bce:	6059      	strne	r1, [r3, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	bf08      	it	eq
 8003bd4:	f8c8 1000 	streq.w	r1, [r8]
 8003bd8:	5162      	str	r2, [r4, r5]
 8003bda:	604b      	str	r3, [r1, #4]
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f104 060b 	add.w	r6, r4, #11
 8003be2:	f000 f829 	bl	8003c38 <__malloc_unlock>
 8003be6:	f026 0607 	bic.w	r6, r6, #7
 8003bea:	1d23      	adds	r3, r4, #4
 8003bec:	1af2      	subs	r2, r6, r3
 8003bee:	d0ae      	beq.n	8003b4e <_malloc_r+0x22>
 8003bf0:	1b9b      	subs	r3, r3, r6
 8003bf2:	50a3      	str	r3, [r4, r2]
 8003bf4:	e7ab      	b.n	8003b4e <_malloc_r+0x22>
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	6862      	ldr	r2, [r4, #4]
 8003bfa:	d1dd      	bne.n	8003bb8 <_malloc_r+0x8c>
 8003bfc:	f8c8 2000 	str.w	r2, [r8]
 8003c00:	e7ec      	b.n	8003bdc <_malloc_r+0xb0>
 8003c02:	4623      	mov	r3, r4
 8003c04:	6864      	ldr	r4, [r4, #4]
 8003c06:	e7ac      	b.n	8003b62 <_malloc_r+0x36>
 8003c08:	4634      	mov	r4, r6
 8003c0a:	6876      	ldr	r6, [r6, #4]
 8003c0c:	e7b4      	b.n	8003b78 <_malloc_r+0x4c>
 8003c0e:	4613      	mov	r3, r2
 8003c10:	e7cc      	b.n	8003bac <_malloc_r+0x80>
 8003c12:	230c      	movs	r3, #12
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4638      	mov	r0, r7
 8003c18:	f000 f80e 	bl	8003c38 <__malloc_unlock>
 8003c1c:	e797      	b.n	8003b4e <_malloc_r+0x22>
 8003c1e:	6025      	str	r5, [r4, #0]
 8003c20:	e7dc      	b.n	8003bdc <_malloc_r+0xb0>
 8003c22:	605b      	str	r3, [r3, #4]
 8003c24:	deff      	udf	#255	; 0xff
 8003c26:	bf00      	nop
 8003c28:	2000031c 	.word	0x2000031c

08003c2c <__malloc_lock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_lock+0x8>)
 8003c2e:	f7ff bf0f 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000318 	.word	0x20000318

08003c38 <__malloc_unlock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__malloc_unlock+0x8>)
 8003c3a:	f7ff bf0a 	b.w	8003a52 <__retarget_lock_release_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000318 	.word	0x20000318

08003c44 <__ssputs_r>:
 8003c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	688e      	ldr	r6, [r1, #8]
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	680b      	ldr	r3, [r1, #0]
 8003c50:	4682      	mov	sl, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4690      	mov	r8, r2
 8003c56:	d82c      	bhi.n	8003cb2 <__ssputs_r+0x6e>
 8003c58:	898a      	ldrh	r2, [r1, #12]
 8003c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c5e:	d026      	beq.n	8003cae <__ssputs_r+0x6a>
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	6909      	ldr	r1, [r1, #16]
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eba3 0901 	sub.w	r9, r3, r1
 8003c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c70:	1c7b      	adds	r3, r7, #1
 8003c72:	444b      	add	r3, r9
 8003c74:	106d      	asrs	r5, r5, #1
 8003c76:	429d      	cmp	r5, r3
 8003c78:	bf38      	it	cc
 8003c7a:	461d      	movcc	r5, r3
 8003c7c:	0553      	lsls	r3, r2, #21
 8003c7e:	d527      	bpl.n	8003cd0 <__ssputs_r+0x8c>
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7ff ff53 	bl	8003b2c <_malloc_r>
 8003c86:	4606      	mov	r6, r0
 8003c88:	b360      	cbz	r0, 8003ce4 <__ssputs_r+0xa0>
 8003c8a:	6921      	ldr	r1, [r4, #16]
 8003c8c:	464a      	mov	r2, r9
 8003c8e:	f000 faeb 	bl	8004268 <memcpy>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	6126      	str	r6, [r4, #16]
 8003ca0:	6165      	str	r5, [r4, #20]
 8003ca2:	444e      	add	r6, r9
 8003ca4:	eba5 0509 	sub.w	r5, r5, r9
 8003ca8:	6026      	str	r6, [r4, #0]
 8003caa:	60a5      	str	r5, [r4, #8]
 8003cac:	463e      	mov	r6, r7
 8003cae:	42be      	cmp	r6, r7
 8003cb0:	d900      	bls.n	8003cb4 <__ssputs_r+0x70>
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	4641      	mov	r1, r8
 8003cba:	f000 faab 	bl	8004214 <memmove>
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	60a3      	str	r3, [r4, #8]
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	4433      	add	r3, r6
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	f000 fad7 	bl	8004284 <_realloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1e0      	bne.n	8003c9e <__ssputs_r+0x5a>
 8003cdc:	6921      	ldr	r1, [r4, #16]
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7ff feb8 	bl	8003a54 <_free_r>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	f8ca 3000 	str.w	r3, [sl]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf6:	e7e9      	b.n	8003ccc <__ssputs_r+0x88>

08003cf8 <_svfiprintf_r>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	4698      	mov	r8, r3
 8003cfe:	898b      	ldrh	r3, [r1, #12]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	b09d      	sub	sp, #116	; 0x74
 8003d04:	4607      	mov	r7, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	4614      	mov	r4, r2
 8003d0a:	d50e      	bpl.n	8003d2a <_svfiprintf_r+0x32>
 8003d0c:	690b      	ldr	r3, [r1, #16]
 8003d0e:	b963      	cbnz	r3, 8003d2a <_svfiprintf_r+0x32>
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	f7ff ff0b 	bl	8003b2c <_malloc_r>
 8003d16:	6028      	str	r0, [r5, #0]
 8003d18:	6128      	str	r0, [r5, #16]
 8003d1a:	b920      	cbnz	r0, 8003d26 <_svfiprintf_r+0x2e>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	e0d0      	b.n	8003ec8 <_svfiprintf_r+0x1d0>
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	616b      	str	r3, [r5, #20]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2e:	2320      	movs	r3, #32
 8003d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d38:	2330      	movs	r3, #48	; 0x30
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1e8>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	f04f 0901 	mov.w	r9, #1
 8003d46:	4623      	mov	r3, r4
 8003d48:	469a      	mov	sl, r3
 8003d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4e:	b10a      	cbz	r2, 8003d54 <_svfiprintf_r+0x5c>
 8003d50:	2a25      	cmp	r2, #37	; 0x25
 8003d52:	d1f9      	bne.n	8003d48 <_svfiprintf_r+0x50>
 8003d54:	ebba 0b04 	subs.w	fp, sl, r4
 8003d58:	d00b      	beq.n	8003d72 <_svfiprintf_r+0x7a>
 8003d5a:	465b      	mov	r3, fp
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4638      	mov	r0, r7
 8003d62:	f7ff ff6f 	bl	8003c44 <__ssputs_r>
 8003d66:	3001      	adds	r0, #1
 8003d68:	f000 80a9 	beq.w	8003ebe <_svfiprintf_r+0x1c6>
 8003d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6e:	445a      	add	r2, fp
 8003d70:	9209      	str	r2, [sp, #36]	; 0x24
 8003d72:	f89a 3000 	ldrb.w	r3, [sl]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80a1 	beq.w	8003ebe <_svfiprintf_r+0x1c6>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d86:	f10a 0a01 	add.w	sl, sl, #1
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	9307      	str	r3, [sp, #28]
 8003d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d92:	931a      	str	r3, [sp, #104]	; 0x68
 8003d94:	4654      	mov	r4, sl
 8003d96:	2205      	movs	r2, #5
 8003d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9c:	4850      	ldr	r0, [pc, #320]	; (8003ee0 <_svfiprintf_r+0x1e8>)
 8003d9e:	f7fc fa37 	bl	8000210 <memchr>
 8003da2:	9a04      	ldr	r2, [sp, #16]
 8003da4:	b9d8      	cbnz	r0, 8003dde <_svfiprintf_r+0xe6>
 8003da6:	06d0      	lsls	r0, r2, #27
 8003da8:	bf44      	itt	mi
 8003daa:	2320      	movmi	r3, #32
 8003dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db0:	0711      	lsls	r1, r2, #28
 8003db2:	bf44      	itt	mi
 8003db4:	232b      	movmi	r3, #43	; 0x2b
 8003db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dba:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc0:	d015      	beq.n	8003dee <_svfiprintf_r+0xf6>
 8003dc2:	9a07      	ldr	r2, [sp, #28]
 8003dc4:	4654      	mov	r4, sl
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f04f 0c0a 	mov.w	ip, #10
 8003dcc:	4621      	mov	r1, r4
 8003dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dd2:	3b30      	subs	r3, #48	; 0x30
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d94d      	bls.n	8003e74 <_svfiprintf_r+0x17c>
 8003dd8:	b1b0      	cbz	r0, 8003e08 <_svfiprintf_r+0x110>
 8003dda:	9207      	str	r2, [sp, #28]
 8003ddc:	e014      	b.n	8003e08 <_svfiprintf_r+0x110>
 8003dde:	eba0 0308 	sub.w	r3, r0, r8
 8003de2:	fa09 f303 	lsl.w	r3, r9, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	46a2      	mov	sl, r4
 8003dec:	e7d2      	b.n	8003d94 <_svfiprintf_r+0x9c>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	1d19      	adds	r1, r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	9103      	str	r1, [sp, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfbb      	ittet	lt
 8003dfa:	425b      	neglt	r3, r3
 8003dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8003e00:	9307      	strge	r3, [sp, #28]
 8003e02:	9307      	strlt	r3, [sp, #28]
 8003e04:	bfb8      	it	lt
 8003e06:	9204      	strlt	r2, [sp, #16]
 8003e08:	7823      	ldrb	r3, [r4, #0]
 8003e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e0c:	d10c      	bne.n	8003e28 <_svfiprintf_r+0x130>
 8003e0e:	7863      	ldrb	r3, [r4, #1]
 8003e10:	2b2a      	cmp	r3, #42	; 0x2a
 8003e12:	d134      	bne.n	8003e7e <_svfiprintf_r+0x186>
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	9203      	str	r2, [sp, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfb8      	it	lt
 8003e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e24:	3402      	adds	r4, #2
 8003e26:	9305      	str	r3, [sp, #20]
 8003e28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ef0 <_svfiprintf_r+0x1f8>
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	4650      	mov	r0, sl
 8003e32:	f7fc f9ed 	bl	8000210 <memchr>
 8003e36:	b138      	cbz	r0, 8003e48 <_svfiprintf_r+0x150>
 8003e38:	9b04      	ldr	r3, [sp, #16]
 8003e3a:	eba0 000a 	sub.w	r0, r0, sl
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	4082      	lsls	r2, r0
 8003e42:	4313      	orrs	r3, r2
 8003e44:	3401      	adds	r4, #1
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4c:	4825      	ldr	r0, [pc, #148]	; (8003ee4 <_svfiprintf_r+0x1ec>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	2206      	movs	r2, #6
 8003e54:	f7fc f9dc 	bl	8000210 <memchr>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d038      	beq.n	8003ece <_svfiprintf_r+0x1d6>
 8003e5c:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <_svfiprintf_r+0x1f0>)
 8003e5e:	bb1b      	cbnz	r3, 8003ea8 <_svfiprintf_r+0x1b0>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	3307      	adds	r3, #7
 8003e64:	f023 0307 	bic.w	r3, r3, #7
 8003e68:	3308      	adds	r3, #8
 8003e6a:	9303      	str	r3, [sp, #12]
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	4433      	add	r3, r6
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	e768      	b.n	8003d46 <_svfiprintf_r+0x4e>
 8003e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e78:	460c      	mov	r4, r1
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e7a6      	b.n	8003dcc <_svfiprintf_r+0xd4>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	3401      	adds	r4, #1
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0c0a 	mov.w	ip, #10
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e90:	3a30      	subs	r2, #48	; 0x30
 8003e92:	2a09      	cmp	r2, #9
 8003e94:	d903      	bls.n	8003e9e <_svfiprintf_r+0x1a6>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c6      	beq.n	8003e28 <_svfiprintf_r+0x130>
 8003e9a:	9105      	str	r1, [sp, #20]
 8003e9c:	e7c4      	b.n	8003e28 <_svfiprintf_r+0x130>
 8003e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e7f0      	b.n	8003e8a <_svfiprintf_r+0x192>
 8003ea8:	ab03      	add	r3, sp, #12
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	462a      	mov	r2, r5
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_svfiprintf_r+0x1f4>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	1c42      	adds	r2, r0, #1
 8003eba:	4606      	mov	r6, r0
 8003ebc:	d1d6      	bne.n	8003e6c <_svfiprintf_r+0x174>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	065b      	lsls	r3, r3, #25
 8003ec2:	f53f af2d 	bmi.w	8003d20 <_svfiprintf_r+0x28>
 8003ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec8:	b01d      	add	sp, #116	; 0x74
 8003eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ece:	ab03      	add	r3, sp, #12
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_svfiprintf_r+0x1f4>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f000 f879 	bl	8003fd0 <_printf_i>
 8003ede:	e7eb      	b.n	8003eb8 <_svfiprintf_r+0x1c0>
 8003ee0:	08004328 	.word	0x08004328
 8003ee4:	08004332 	.word	0x08004332
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c45 	.word	0x08003c45
 8003ef0:	0800432e 	.word	0x0800432e

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bfb8      	it	lt
 8003f08:	4613      	movlt	r3, r2
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f10:	4607      	mov	r7, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc26      	bgt.n	8003f8a <_printf_common+0x96>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42b      	bmi.n	8003fa4 <_printf_common+0xb0>
 8003f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f50:	4649      	mov	r1, r9
 8003f52:	4638      	mov	r0, r7
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d01e      	beq.n	8003f98 <_printf_common+0xa4>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf02      	ittt	eq
 8003f66:	68e5      	ldreq	r5, [r4, #12]
 8003f68:	6833      	ldreq	r3, [r6, #0]
 8003f6a:	1aed      	subeq	r5, r5, r3
 8003f6c:	68a3      	ldr	r3, [r4, #8]
 8003f6e:	bf0c      	ite	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	2500      	movne	r5, #0
 8003f76:	4293      	cmp	r3, r2
 8003f78:	bfc4      	itt	gt
 8003f7a:	1a9b      	subgt	r3, r3, r2
 8003f7c:	18ed      	addgt	r5, r5, r3
 8003f7e:	2600      	movs	r6, #0
 8003f80:	341a      	adds	r4, #26
 8003f82:	42b5      	cmp	r5, r6
 8003f84:	d11a      	bne.n	8003fbc <_printf_common+0xc8>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e008      	b.n	8003f9c <_printf_common+0xa8>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4638      	mov	r0, r7
 8003f92:	47c0      	blx	r8
 8003f94:	3001      	adds	r0, #1
 8003f96:	d103      	bne.n	8003fa0 <_printf_common+0xac>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	e7c6      	b.n	8003f32 <_printf_common+0x3e>
 8003fa4:	18e1      	adds	r1, r4, r3
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fae:	4422      	add	r2, r4
 8003fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb8:	3302      	adds	r3, #2
 8003fba:	e7c7      	b.n	8003f4c <_printf_common+0x58>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0e6      	beq.n	8003f98 <_printf_common+0xa4>
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7d9      	b.n	8003f82 <_printf_common+0x8e>
	...

08003fd0 <_printf_i>:
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	7e0f      	ldrb	r7, [r1, #24]
 8003fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd8:	2f78      	cmp	r7, #120	; 0x78
 8003fda:	4691      	mov	r9, r2
 8003fdc:	4680      	mov	r8, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	469a      	mov	sl, r3
 8003fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fe6:	d807      	bhi.n	8003ff8 <_printf_i+0x28>
 8003fe8:	2f62      	cmp	r7, #98	; 0x62
 8003fea:	d80a      	bhi.n	8004002 <_printf_i+0x32>
 8003fec:	2f00      	cmp	r7, #0
 8003fee:	f000 80d4 	beq.w	800419a <_printf_i+0x1ca>
 8003ff2:	2f58      	cmp	r7, #88	; 0x58
 8003ff4:	f000 80c0 	beq.w	8004178 <_printf_i+0x1a8>
 8003ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004000:	e03a      	b.n	8004078 <_printf_i+0xa8>
 8004002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004006:	2b15      	cmp	r3, #21
 8004008:	d8f6      	bhi.n	8003ff8 <_printf_i+0x28>
 800400a:	a101      	add	r1, pc, #4	; (adr r1, 8004010 <_printf_i+0x40>)
 800400c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004010:	08004069 	.word	0x08004069
 8004014:	0800407d 	.word	0x0800407d
 8004018:	08003ff9 	.word	0x08003ff9
 800401c:	08003ff9 	.word	0x08003ff9
 8004020:	08003ff9 	.word	0x08003ff9
 8004024:	08003ff9 	.word	0x08003ff9
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08003ff9 	.word	0x08003ff9
 8004030:	08003ff9 	.word	0x08003ff9
 8004034:	08003ff9 	.word	0x08003ff9
 8004038:	08003ff9 	.word	0x08003ff9
 800403c:	08004181 	.word	0x08004181
 8004040:	080040a9 	.word	0x080040a9
 8004044:	0800413b 	.word	0x0800413b
 8004048:	08003ff9 	.word	0x08003ff9
 800404c:	08003ff9 	.word	0x08003ff9
 8004050:	080041a3 	.word	0x080041a3
 8004054:	08003ff9 	.word	0x08003ff9
 8004058:	080040a9 	.word	0x080040a9
 800405c:	08003ff9 	.word	0x08003ff9
 8004060:	08003ff9 	.word	0x08003ff9
 8004064:	08004143 	.word	0x08004143
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	602a      	str	r2, [r5, #0]
 8004070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004078:	2301      	movs	r3, #1
 800407a:	e09f      	b.n	80041bc <_printf_i+0x1ec>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	0607      	lsls	r7, r0, #24
 8004082:	f103 0104 	add.w	r1, r3, #4
 8004086:	6029      	str	r1, [r5, #0]
 8004088:	d501      	bpl.n	800408e <_printf_i+0xbe>
 800408a:	681e      	ldr	r6, [r3, #0]
 800408c:	e003      	b.n	8004096 <_printf_i+0xc6>
 800408e:	0646      	lsls	r6, r0, #25
 8004090:	d5fb      	bpl.n	800408a <_printf_i+0xba>
 8004092:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004096:	2e00      	cmp	r6, #0
 8004098:	da03      	bge.n	80040a2 <_printf_i+0xd2>
 800409a:	232d      	movs	r3, #45	; 0x2d
 800409c:	4276      	negs	r6, r6
 800409e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a2:	485a      	ldr	r0, [pc, #360]	; (800420c <_printf_i+0x23c>)
 80040a4:	230a      	movs	r3, #10
 80040a6:	e012      	b.n	80040ce <_printf_i+0xfe>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6029      	str	r1, [r5, #0]
 80040b0:	0605      	lsls	r5, r0, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xe8>
 80040b4:	681e      	ldr	r6, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xee>
 80040b8:	0641      	lsls	r1, r0, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe4>
 80040bc:	881e      	ldrh	r6, [r3, #0]
 80040be:	4853      	ldr	r0, [pc, #332]	; (800420c <_printf_i+0x23c>)
 80040c0:	2f6f      	cmp	r7, #111	; 0x6f
 80040c2:	bf0c      	ite	eq
 80040c4:	2308      	moveq	r3, #8
 80040c6:	230a      	movne	r3, #10
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6865      	ldr	r5, [r4, #4]
 80040d0:	60a5      	str	r5, [r4, #8]
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	bfa2      	ittt	ge
 80040d6:	6821      	ldrge	r1, [r4, #0]
 80040d8:	f021 0104 	bicge.w	r1, r1, #4
 80040dc:	6021      	strge	r1, [r4, #0]
 80040de:	b90e      	cbnz	r6, 80040e4 <_printf_i+0x114>
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	d04b      	beq.n	800417c <_printf_i+0x1ac>
 80040e4:	4615      	mov	r5, r2
 80040e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80040ea:	fb03 6711 	mls	r7, r3, r1, r6
 80040ee:	5dc7      	ldrb	r7, [r0, r7]
 80040f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f4:	4637      	mov	r7, r6
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	460e      	mov	r6, r1
 80040fa:	d9f4      	bls.n	80040e6 <_printf_i+0x116>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <_printf_i+0x148>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07de      	lsls	r6, r3, #31
 8004104:	d508      	bpl.n	8004118 <_printf_i+0x148>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6861      	ldr	r1, [r4, #4]
 800410a:	4299      	cmp	r1, r3
 800410c:	bfde      	ittt	le
 800410e:	2330      	movle	r3, #48	; 0x30
 8004110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004118:	1b52      	subs	r2, r2, r5
 800411a:	6122      	str	r2, [r4, #16]
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	464b      	mov	r3, r9
 8004122:	aa03      	add	r2, sp, #12
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f7ff fee4 	bl	8003ef4 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	d14a      	bne.n	80041c6 <_printf_i+0x1f6>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	b004      	add	sp, #16
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	f043 0320 	orr.w	r3, r3, #32
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	4833      	ldr	r0, [pc, #204]	; (8004210 <_printf_i+0x240>)
 8004144:	2778      	movs	r7, #120	; 0x78
 8004146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	6829      	ldr	r1, [r5, #0]
 800414e:	061f      	lsls	r7, r3, #24
 8004150:	f851 6b04 	ldr.w	r6, [r1], #4
 8004154:	d402      	bmi.n	800415c <_printf_i+0x18c>
 8004156:	065f      	lsls	r7, r3, #25
 8004158:	bf48      	it	mi
 800415a:	b2b6      	uxthmi	r6, r6
 800415c:	07df      	lsls	r7, r3, #31
 800415e:	bf48      	it	mi
 8004160:	f043 0320 	orrmi.w	r3, r3, #32
 8004164:	6029      	str	r1, [r5, #0]
 8004166:	bf48      	it	mi
 8004168:	6023      	strmi	r3, [r4, #0]
 800416a:	b91e      	cbnz	r6, 8004174 <_printf_i+0x1a4>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2310      	movs	r3, #16
 8004176:	e7a7      	b.n	80040c8 <_printf_i+0xf8>
 8004178:	4824      	ldr	r0, [pc, #144]	; (800420c <_printf_i+0x23c>)
 800417a:	e7e4      	b.n	8004146 <_printf_i+0x176>
 800417c:	4615      	mov	r5, r2
 800417e:	e7bd      	b.n	80040fc <_printf_i+0x12c>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6826      	ldr	r6, [r4, #0]
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6028      	str	r0, [r5, #0]
 800418a:	0635      	lsls	r5, r6, #24
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	d501      	bpl.n	8004194 <_printf_i+0x1c4>
 8004190:	6019      	str	r1, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0x1ca>
 8004194:	0670      	lsls	r0, r6, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0x1c0>
 8004198:	8019      	strh	r1, [r3, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	4615      	mov	r5, r2
 80041a0:	e7bc      	b.n	800411c <_printf_i+0x14c>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7fc f82e 	bl	8000210 <memchr>
 80041b4:	b108      	cbz	r0, 80041ba <_printf_i+0x1ea>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	6060      	str	r0, [r4, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c4:	e7aa      	b.n	800411c <_printf_i+0x14c>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	462a      	mov	r2, r5
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0ad      	beq.n	8004130 <_printf_i+0x160>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d413      	bmi.n	8004202 <_printf_i+0x232>
 80041da:	68e0      	ldr	r0, [r4, #12]
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	4298      	cmp	r0, r3
 80041e0:	bfb8      	it	lt
 80041e2:	4618      	movlt	r0, r3
 80041e4:	e7a6      	b.n	8004134 <_printf_i+0x164>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d09d      	beq.n	8004130 <_printf_i+0x160>
 80041f4:	3501      	adds	r5, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	9903      	ldr	r1, [sp, #12]
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	42ab      	cmp	r3, r5
 80041fe:	dcf2      	bgt.n	80041e6 <_printf_i+0x216>
 8004200:	e7eb      	b.n	80041da <_printf_i+0x20a>
 8004202:	2500      	movs	r5, #0
 8004204:	f104 0619 	add.w	r6, r4, #25
 8004208:	e7f5      	b.n	80041f6 <_printf_i+0x226>
 800420a:	bf00      	nop
 800420c:	08004339 	.word	0x08004339
 8004210:	0800434a 	.word	0x0800434a

08004214 <memmove>:
 8004214:	4288      	cmp	r0, r1
 8004216:	b510      	push	{r4, lr}
 8004218:	eb01 0402 	add.w	r4, r1, r2
 800421c:	d902      	bls.n	8004224 <memmove+0x10>
 800421e:	4284      	cmp	r4, r0
 8004220:	4623      	mov	r3, r4
 8004222:	d807      	bhi.n	8004234 <memmove+0x20>
 8004224:	1e43      	subs	r3, r0, #1
 8004226:	42a1      	cmp	r1, r4
 8004228:	d008      	beq.n	800423c <memmove+0x28>
 800422a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800422e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004232:	e7f8      	b.n	8004226 <memmove+0x12>
 8004234:	4402      	add	r2, r0
 8004236:	4601      	mov	r1, r0
 8004238:	428a      	cmp	r2, r1
 800423a:	d100      	bne.n	800423e <memmove+0x2a>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004246:	e7f7      	b.n	8004238 <memmove+0x24>

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc feaa 	bl	8000fac <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000314 	.word	0x20000314

08004268 <memcpy>:
 8004268:	440a      	add	r2, r1
 800426a:	4291      	cmp	r1, r2
 800426c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004270:	d100      	bne.n	8004274 <memcpy+0xc>
 8004272:	4770      	bx	lr
 8004274:	b510      	push	{r4, lr}
 8004276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800427a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800427e:	4291      	cmp	r1, r2
 8004280:	d1f9      	bne.n	8004276 <memcpy+0xe>
 8004282:	bd10      	pop	{r4, pc}

08004284 <_realloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4680      	mov	r8, r0
 800428a:	4614      	mov	r4, r2
 800428c:	460e      	mov	r6, r1
 800428e:	b921      	cbnz	r1, 800429a <_realloc_r+0x16>
 8004290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004294:	4611      	mov	r1, r2
 8004296:	f7ff bc49 	b.w	8003b2c <_malloc_r>
 800429a:	b92a      	cbnz	r2, 80042a8 <_realloc_r+0x24>
 800429c:	f7ff fbda 	bl	8003a54 <_free_r>
 80042a0:	4625      	mov	r5, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a8:	f000 f81b 	bl	80042e2 <_malloc_usable_size_r>
 80042ac:	4284      	cmp	r4, r0
 80042ae:	4607      	mov	r7, r0
 80042b0:	d802      	bhi.n	80042b8 <_realloc_r+0x34>
 80042b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042b6:	d812      	bhi.n	80042de <_realloc_r+0x5a>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff fc36 	bl	8003b2c <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0ed      	beq.n	80042a2 <_realloc_r+0x1e>
 80042c6:	42bc      	cmp	r4, r7
 80042c8:	4622      	mov	r2, r4
 80042ca:	4631      	mov	r1, r6
 80042cc:	bf28      	it	cs
 80042ce:	463a      	movcs	r2, r7
 80042d0:	f7ff ffca 	bl	8004268 <memcpy>
 80042d4:	4631      	mov	r1, r6
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7ff fbbc 	bl	8003a54 <_free_r>
 80042dc:	e7e1      	b.n	80042a2 <_realloc_r+0x1e>
 80042de:	4635      	mov	r5, r6
 80042e0:	e7df      	b.n	80042a2 <_realloc_r+0x1e>

080042e2 <_malloc_usable_size_r>:
 80042e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e6:	1f18      	subs	r0, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bfbc      	itt	lt
 80042ec:	580b      	ldrlt	r3, [r1, r0]
 80042ee:	18c0      	addlt	r0, r0, r3
 80042f0:	4770      	bx	lr
	...

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
