
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a60  08004a60  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000090  08004af8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004af8  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de7d  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f7  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092d  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ed9  00000000  00000000  00031a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e42  00000000  00000000  00055966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d862b  00000000  00000000  000677a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003494  00000000  00000000  0013fdd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00143268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080049e8 	.word	0x080049e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080049e8 	.word	0x080049e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <InitializeAHT20>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]

	HAL_Delay(20);
 80005b6:	2014      	movs	r0, #20
 80005b8:	f000 ff98 	bl	80014ec <HAL_Delay>

	aht20_state = InitializeAHT20I2C();
 80005bc:	f000 f962 	bl	8000884 <InitializeAHT20I2C>
 80005c0:	6078      	str	r0, [r7, #4]
	//	ASSERT(ahr20_state != AHT20_OK);

	HAL_Delay(40);
 80005c2:	2028      	movs	r0, #40	; 0x28
 80005c4:	f000 ff92 	bl	80014ec <HAL_Delay>

	/* Initialize the sensor until calibration is successful */
	while(AHT20_checkCalibration() == false)
 80005c8:	e002      	b.n	80005d0 <InitializeAHT20+0x24>
	{
		aht20_state = AHT20_sensorInit();
 80005ca:	f000 f80f 	bl	80005ec <AHT20_sensorInit>
 80005ce:	6078      	str	r0, [r7, #4]
	while(AHT20_checkCalibration() == false)
 80005d0:	f000 f82a 	bl	8000628 <AHT20_checkCalibration>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f4      	bne.n	80005ca <InitializeAHT20+0x1e>
	}

	//	ASSERT(aht20_state != AHT20_OK);

}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <AHT20_sensorInit>:

static int AHT20_sensorInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	/* reg[3] holds the initialization sequence */
	int aht20_state = AHT20_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]

	uint8_t reg[3] = {0xBE, 0x08, 0x00};
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <AHT20_sensorInit+0x38>)
 80005f8:	463b      	mov	r3, r7
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	8019      	strh	r1, [r3, #0]
 8000600:	3302      	adds	r3, #2
 8000602:	0c12      	lsrs	r2, r2, #16
 8000604:	701a      	strb	r2, [r3, #0]
	aht20_state = TransmitI2CDataToAHT20(&reg, 3);
 8000606:	463b      	mov	r3, r7
 8000608:	2103      	movs	r1, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f982 	bl	8000914 <TransmitI2CDataToAHT20>
 8000610:	6078      	str	r0, [r7, #4]
	HAL_Delay(10); // Wait 10ms for initialization
 8000612:	200a      	movs	r0, #10
 8000614:	f000 ff6a 	bl	80014ec <HAL_Delay>

	return aht20_state;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08004a00 	.word	0x08004a00

08000628 <AHT20_checkCalibration>:

static bool AHT20_checkCalibration(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    uint8_t statusReg = 0x71;
 800062e:	2371      	movs	r3, #113	; 0x71
 8000630:	71fb      	strb	r3, [r7, #7]
    uint8_t cal; // Result byte
    TransmitI2CDataToAHT20(&statusReg, 1);
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f96c 	bl	8000914 <TransmitI2CDataToAHT20>
    ReceiveI2CDataFromAHT20(&cal, 1);
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f983 	bl	800094c <ReceiveI2CDataFromAHT20>

//  return ((cal >> 3) & 1) == 1; // Check 4th bit is equal to 1 - Ovo ima smisla al nije tako u primjeru
    return ((cal >> 4) & 1) == 1; // Check 4th bit is equal to 1
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <AHT20_triggerMeasurement>:

void AHT20_triggerMeasurement(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

    while(AHT20_checkCalibration() == false) {
 800066e:	e002      	b.n	8000676 <AHT20_triggerMeasurement+0x12>
    	aht20_state = AHT20_sensorInit();
 8000670:	f7ff ffbc 	bl	80005ec <AHT20_sensorInit>
 8000674:	6178      	str	r0, [r7, #20]
    while(AHT20_checkCalibration() == false) {
 8000676:	f7ff ffd7 	bl	8000628 <AHT20_checkCalibration>
 800067a:	4603      	mov	r3, r0
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <AHT20_triggerMeasurement+0xc>
    }

    uint8_t measureCommand[3] = {0xAC, 0x33, 0x00};
 8000686:	4a37      	ldr	r2, [pc, #220]	; (8000764 <AHT20_triggerMeasurement+0x100>)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	4611      	mov	r1, r2
 8000690:	8019      	strh	r1, [r3, #0]
 8000692:	3302      	adds	r3, #2
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	701a      	strb	r2, [r3, #0]
    uint8_t status; // result status
    uint8_t data[6]; // data array

    TransmitI2CDataToAHT20(&measureCommand, 3);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f938 	bl	8000914 <TransmitI2CDataToAHT20>
    HAL_Delay(80); // Wait for measurement
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f000 ff21 	bl	80014ec <HAL_Delay>

    ReceiveI2CDataFromAHT20(&status, 1); // Read status byte
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f94c 	bl	800094c <ReceiveI2CDataFromAHT20>

    // Wait for status to be ready before continuing
//  while (((status >> 7) & 1) != 0) {		Ovo ima smisla al nije tako u primjeru
    while (((status >> 8) & 1) != 0) {
 80006b4:	bf00      	nop
        //printf("Waiting for read to complete\n");
        ReceiveI2CDataFromAHT20(&status, 1);
    }

    aht20_state = ReceiveI2CDataFromAHT20(&data, 6); // Read all data
 80006b6:	463b      	mov	r3, r7
 80006b8:	2106      	movs	r1, #6
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f946 	bl	800094c <ReceiveI2CDataFromAHT20>
 80006c0:	6178      	str	r0, [r7, #20]
    //	ASSERT(aht20_state != AHT20_OK);

    // Convert data for reading and store in variable

    uint32_t humidity = data[1];
 80006c2:	787b      	ldrb	r3, [r7, #1]
 80006c4:	613b      	str	r3, [r7, #16]
    humidity <<= 8;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	613b      	str	r3, [r7, #16]
    humidity |= data[2];
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	461a      	mov	r2, r3
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
    humidity <<= 4;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
    humidity |= data[3] >> 4;
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
    AHT20_interface.hum_val = ((float)humidity * 100) / 1048576;
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000768 <AHT20_triggerMeasurement+0x104>
 80006f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006fc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800076c <AHT20_triggerMeasurement+0x108>
 8000700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <AHT20_triggerMeasurement+0x10c>)
 8000706:	edc3 7a04 	vstr	s15, [r3, #16]

    uint32_t temp = data[3] & 0x0F;
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	60fb      	str	r3, [r7, #12]
    temp |= data[4];
 8000718:	793b      	ldrb	r3, [r7, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	60fb      	str	r3, [r7, #12]
    temp |= data[5];
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4313      	orrs	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
    AHT20_interface.temp_val = ((float)temp * 200 / 1048576) - 50;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800073c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000774 <AHT20_triggerMeasurement+0x110>
 8000740:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000744:	eddf 6a09 	vldr	s13, [pc, #36]	; 800076c <AHT20_triggerMeasurement+0x108>
 8000748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000778 <AHT20_triggerMeasurement+0x114>
 8000750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <AHT20_triggerMeasurement+0x10c>)
 8000756:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08004a04 	.word	0x08004a04
 8000768:	42c80000 	.word	0x42c80000
 800076c:	49800000 	.word	0x49800000
 8000770:	20000000 	.word	0x20000000
 8000774:	43480000 	.word	0x43480000
 8000778:	42480000 	.word	0x42480000

0800077c <GetTemperatureValue>:

static int GetTemperatureValue(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 8000780:	f7ff ff70 	bl	8000664 <AHT20_triggerMeasurement>

	return AHT20_interface.temp_val;
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <GetTemperatureValue+0x1c>)
 8000786:	edd3 7a03 	vldr	s15, [r3, #12]
 800078a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800078e:	ee17 3a90 	vmov	r3, s15
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000000 	.word	0x20000000

0800079c <GetHumidityValue>:

static int GetHumidityValue(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 80007a0:	f7ff ff60 	bl	8000664 <AHT20_triggerMeasurement>

	return AHT20_interface.hum_val;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <GetHumidityValue+0x1c>)
 80007a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80007aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ae:	ee17 3a90 	vmov	r3, s15
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000

080007bc <GetAHT20Interface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

AHT20_t *GetAHT20Interface(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return &AHT20_interface;
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <GetAHT20Interface+0x10>)
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	20000000 	.word	0x20000000

080007d0 <InitializeAHT20I2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20I2CGPIOPins(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
	//   PC9     ------> I2C3_SDA
	//   PA8     ------> I2C3_SCL

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SDA_PIN_AHT20;
 800080e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000812:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8000820:	2304      	movs	r3, #4
 8000822:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SDA, &gpio);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <InitializeAHT20I2CGPIOPins+0xac>)
 800082c:	f001 f9e4 	bl	8001bf8 <HAL_GPIO_Init>

	gpio.Pin 		= I2C_SCL_PIN_AHT20;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8000842:	2304      	movs	r3, #4
 8000844:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SCL, &gpio);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <InitializeAHT20I2CGPIOPins+0xb0>)
 800084e:	f001 f9d3 	bl	8001bf8 <HAL_GPIO_Init>

	__HAL_RCC_I2C3_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 800085c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020800 	.word	0x40020800
 8000880:	40020000 	.word	0x40020000

08000884 <InitializeAHT20I2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeAHT20I2C(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	InitializeAHT20I2CGPIOPins();
 800088a:	f7ff ffa1 	bl	80007d0 <InitializeAHT20I2CGPIOPins>

	__I2C3_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <InitializeAHT20I2C+0x80>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <InitializeAHT20I2C+0x80>)
 8000898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <InitializeAHT20I2C+0x80>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

	i2chandle2.Mode 				= HAL_I2C_MODE_MASTER;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle2.Instance 			= I2C3;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008b4:	4a15      	ldr	r2, [pc, #84]	; (800090c <InitializeAHT20I2C+0x88>)
 80008b6:	601a      	str	r2, [r3, #0]
	i2chandle2.Init.ClockSpeed 		= 100000;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <InitializeAHT20I2C+0x8c>)
 80008bc:	605a      	str	r2, [r3, #4]
	i2chandle2.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
	i2chandle2.Init.OwnAddress1 	= 0x00;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
	i2chandle2.Init.OwnAddress2		= 0x00;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
	i2chandle2.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
	i2chandle2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
	i2chandle2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
	i2chandle2.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle2) != HAL_OK)
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <InitializeAHT20I2C+0x84>)
 80008ec:	f001 fb32 	bl	8001f54 <HAL_I2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <InitializeAHT20I2C+0x76>
	{
		return AHT20_ERROR_I2C_NOT_INITALIZED;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <InitializeAHT20I2C+0x78>
	}

	return AHT20_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	200000ac 	.word	0x200000ac
 800090c:	40005c00 	.word	0x40005c00
 8000910:	000186a0 	.word	0x000186a0

08000914 <TransmitI2CDataToAHT20>:

int TransmitI2CDataToAHT20(uint8_t *pdata, uint8_t length)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&i2chandle2,
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2264      	movs	r2, #100	; 0x64
 8000926:	9200      	str	r2, [sp, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	2138      	movs	r1, #56	; 0x38
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <TransmitI2CDataToAHT20+0x34>)
 800092e:	f001 fc55 	bl	80021dc <HAL_I2C_Master_Transmit>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <TransmitI2CDataToAHT20+0x28>
								I2C_SLAVE_ADDRESS_AHT20,
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8000938:	2303      	movs	r3, #3
 800093a:	e000      	b.n	800093e <TransmitI2CDataToAHT20+0x2a>
	}

	return AHT20_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000ac 	.word	0x200000ac

0800094c <ReceiveI2CDataFromAHT20>:

int ReceiveI2CDataFromAHT20(uint8_t *pdata, uint8_t length)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Receive(&i2chandle2,
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	b29b      	uxth	r3, r3
 800095c:	2264      	movs	r2, #100	; 0x64
 800095e:	9200      	str	r2, [sp, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	2139      	movs	r1, #57	; 0x39
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <ReceiveI2CDataFromAHT20+0x34>)
 8000966:	f001 fd37 	bl	80023d8 <HAL_I2C_Master_Receive>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <ReceiveI2CDataFromAHT20+0x28>
								(I2C_SLAVE_ADDRESS_AHT20 | 0x01),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8000970:	2303      	movs	r3, #3
 8000972:	e000      	b.n	8000976 <ReceiveI2CDataFromAHT20+0x2a>
	}

	return AHT20_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000ac 	.word	0x200000ac

08000984 <AHT20Init>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void AHT20Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 800098a:	f7ff ff17 	bl	80007bc <GetAHT20Interface>
 800098e:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	paht20->init();
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4798      	blx	r3
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <AHT20_GetTemp>:

int AHT20_GetTemp(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 80009a4:	f7ff ff0a 	bl	80007bc <GetAHT20Interface>
 80009a8:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	return paht20->get_temp();
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4798      	blx	r3
 80009b0:	4603      	mov	r3, r0

}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	460a      	mov	r2, r1
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <SendToLCD+0x24>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 80009dc:	e009      	b.n	80009f2 <SendToLCD+0x38>
			buffer[0] = 0x00;
 80009de:	2300      	movs	r3, #0
 80009e0:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	727b      	strb	r3, [r7, #9]
		break;
 80009e6:	e004      	b.n	80009f2 <SendToLCD+0x38>
			buffer[0] = 0x40;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	727b      	strb	r3, [r7, #9]
		break;
 80009f0:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f938 	bl	8000c6c <TransmitI2CDataToLCD>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <InitializeLCD>:

static void InitializeLCD(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 8000a1a:	f000 f8df 	bl	8000bdc <InitializeLCDI2C>
 8000a1e:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8000a20:	2101      	movs	r1, #1
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ffc9 	bl	80009ba <SendToLCD>
 8000a28:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 fd5e 	bl	80014ec <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8000a30:	2138      	movs	r1, #56	; 0x38
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ffc1 	bl	80009ba <SendToLCD>
 8000a38:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a3a:	2032      	movs	r0, #50	; 0x32
 8000a3c:	f000 fd56 	bl	80014ec <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8000a40:	210c      	movs	r1, #12
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ffb9 	bl	80009ba <SendToLCD>
 8000a48:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f000 fd4e 	bl	80014ec <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8000a50:	2106      	movs	r1, #6
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ffb1 	bl	80009ba <SendToLCD>
 8000a58:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a5a:	2032      	movs	r0, #50	; 0x32
 8000a5c:	f000 fd46 	bl	80014ec <HAL_Delay>

//	ASSERT(lcd_state != LCD_OK);

	HAL_Delay(1000);
 8000a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a64:	f000 fd42 	bl	80014ec <HAL_Delay>

	lcd_state = ClearLCD();
 8000a68:	f000 f860 	bl	8000b2c <ClearLCD>
 8000a6c:	6078      	str	r0, [r7, #4]

//	ASSERT(lcd_state != LCD_OK);
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <SendDataToLCD>:

static int SendDataToLCD(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 8000a86:	e011      	b.n	8000aac <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <SendDataToLCD+0x54>)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff ff91 	bl	80009ba <SendToLCD>
 8000a98:	6078      	str	r0, [r7, #4]
		i++;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d109      	bne.n	8000aba <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	dc08      	bgt.n	8000abe <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <SendDataToLCD+0x54>)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e7      	bne.n	8000a88 <SendDataToLCD+0x10>
 8000ab8:	e002      	b.n	8000ac0 <SendDataToLCD+0x48>
			break;
 8000aba:	bf00      	nop
 8000abc:	e000      	b.n	8000ac0 <SendDataToLCD+0x48>
		{
			break;
 8000abe:	bf00      	nop
		}
	}

	return lcd_state;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000014 	.word	0x20000014

08000ad0 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	72fb      	strb	r3, [r7, #11]

	switch (row)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <MoveLCDCursor+0x20>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d007      	beq.n	8000afe <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 8000aee:	e00d      	b.n	8000b0c <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000af8:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8000afa:	72fb      	strb	r3, [r7, #11]
		break;
 8000afc:	e006      	b.n	8000b0c <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b06:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8000b08:	72fb      	strb	r3, [r7, #11]
		break;
 8000b0a:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff ff52 	bl	80009ba <SendToLCD>
 8000b16:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 8000b1e:	2305      	movs	r3, #5
 8000b20:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <ClearLCD>:

static int ClearLCD(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 8000b32:	2101      	movs	r1, #1
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ff40 	bl	80009ba <SendToLCD>
 8000b3a:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 fcd5 	bl	80014ec <HAL_Delay>

	if (lcd_state != LCD_OK)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	return &lcd_interface;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <GetLCDInterface+0x10>)
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20000014 	.word	0x20000014

08000b6c <InitializeLCDI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeLCDI2CGPIOPins(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN_LCD | I2C_SDA_PIN_LCD;
 8000b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b92:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_LCD, &gpio);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <InitializeLCDI2CGPIOPins+0x6c>)
 8000bac:	f001 f824 	bl	8001bf8 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <InitializeLCDI2CGPIOPins+0x68>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	InitializeLCDI2CGPIOPins();
 8000be2:	f7ff ffc3 	bl	8000b6c <InitializeLCDI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <InitializeLCDI2C+0x80>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <InitializeLCDI2C+0x80>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <InitializeLCDI2C+0x80>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c04:	2210      	movs	r2, #16
 8000c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <InitializeLCDI2C+0x88>)
 8000c0e:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <InitializeLCDI2C+0x8c>)
 8000c14:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2e:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <InitializeLCDI2C+0x84>)
 8000c44:	f001 f986 	bl	8001f54 <HAL_I2C_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	20000100 	.word	0x20000100
 8000c64:	40005400 	.word	0x40005400
 8000c68:	000186a0 	.word	0x000186a0

08000c6c <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2302      	movs	r3, #2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	217c      	movs	r1, #124	; 0x7c
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <TransmitI2CDataToLCD+0x2c>)
 8000c80:	f001 faac 	bl	80021dc <HAL_I2C_Master_Transmit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS_LCD,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e000      	b.n	8000c90 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000100 	.word	0x20000100

08000c9c <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 8000ca2:	f7ff ff59 	bl	8000b58 <GetLCDInterface>
 8000ca6:	6078      	str	r0, [r7, #4]

//	ASSERT(plcd == NULL);

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2210      	movs	r2, #16
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fa16 	bl	80040e0 <memset>

	plcd->init();
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4798      	blx	r3
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 8000cd2:	f7ff ff41 	bl	8000b58 <GetLCDInterface>
 8000cd6:	6138      	str	r0, [r7, #16]

//	ASSERT(plcd == NULL);

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	dc16      	bgt.n	8000d0c <LCDWriteData+0x4a>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	dc13      	bgt.n	8000d0c <LCDWriteData+0x4a>
				"\n\rStupac: %d",
				row);
		return;
	}

	sprintf(plcd->buffer, pdata);
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 f9d9 	bl	80040a0 <siprintf>

	lcd_state = plcd->clear_data();
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4798      	blx	r3
 8000cf4:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->move_cursor(row, col);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	4798      	blx	r3
 8000d00:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4798      	blx	r3
 8000d08:	6178      	str	r0, [r7, #20]
 8000d0a:	e000      	b.n	8000d0e <LCDWriteData+0x4c>
		return;
 8000d0c:	bf00      	nop
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
				"\n\tError: %d",
				lcd_state);
	}
}
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ADC1_Init_Pins>:
* This function configures the hardware resources for ADC1
* @param hadc: ADC handle pointer
* @retval None
*/
static void ADC1_Init_Pins(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <ADC1_Init_Pins+0x7c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d127      	bne.n	8000d86 <ADC1_Init_Pins+0x72>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <ADC1_Init_Pins+0x80>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <ADC1_Init_Pins+0x84>)
 8000d82:	f000 ff39 	bl	8001bf8 <HAL_GPIO_Init>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40012000 	.word	0x40012000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <ADC1_Init+0xa0>)
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <ADC1_Init+0xa4>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <ADC1_Init+0xa0>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <ADC1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <ADC1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <ADC1_Init+0xa0>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <ADC1_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <ADC1_Init+0xa0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <ADC1_Init+0xa0>)
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <ADC1_Init+0xa8>)
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <ADC1_Init+0xa0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <ADC1_Init+0xa0>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <ADC1_Init+0xa0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <ADC1_Init+0xa0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <ADC1_Init+0xa0>)
 8000dfe:	f000 fb99 	bl	8001534 <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <ADC1_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 f94c 	bl	80010a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <ADC1_Init+0xa0>)
 8000e1e:	f000 fbd7 	bl	80015d0 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <ADC1_Init+0x90>
  {
    Error_Handler();
 8000e28:	f000 f93c 	bl	80010a4 <Error_Handler>
  }

  ADC1_Init_Pins(&hadc1);
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <ADC1_Init+0xa0>)
 8000e2e:	f7ff ff71 	bl	8000d14 <ADC1_Init_Pins>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000154 	.word	0x20000154
 8000e40:	40012000 	.word	0x40012000
 8000e44:	0f000001 	.word	0x0f000001

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 fadb 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f821 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f8b7 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e5a:	f000 f88b 	bl	8000f74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC1_Init();
 8000e5e:	f7ff ff9d 	bl	8000d9c <ADC1_Init>
  LCDInit();
 8000e62:	f7ff ff1b 	bl	8000c9c <LCDInit>
  AHT20Init();
 8000e66:	f7ff fd8d 	bl	8000984 <AHT20Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	temperature =  AHT20_GetTemp();
 8000e6a:	f7ff fd98 	bl	800099e <AHT20_GetTemp>
 8000e6e:	6178      	str	r0, [r7, #20]

	char pdata[14];
	sprintf(pdata, "%d", temperature);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <main+0x4c>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 f912 	bl	80040a0 <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ff1d 	bl	8000cc2 <LCDWriteData>

	HAL_Delay(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8c:	f000 fb2e 	bl	80014ec <HAL_Delay>
  {
 8000e90:	e7eb      	b.n	8000e6a <main+0x22>
 8000e92:	bf00      	nop
 8000e94:	08004a08 	.word	0x08004a08

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f91a 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemClock_Config+0xd8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fb58 	bl	80035dc <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f32:	f000 f8b7 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fff8 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f5e:	f000 f8a1 	bl	80010a4 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fac:	f002 fdb4 	bl	8003b18 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f875 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000019c 	.word	0x2000019c
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <MX_GPIO_Init+0xd0>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <MX_GPIO_Init+0xd0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_GPIO_Init+0xd0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_GPIO_Init+0xd0>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_GPIO_Init+0xd0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2120      	movs	r1, #32
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <MX_GPIO_Init+0xd4>)
 8001054:	f000 ff64 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_GPIO_Init+0xd8>)
 8001070:	f000 fdc2 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0xd4>)
 800108c:	f000 fdb4 	bl	8001bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020800 	.word	0x40020800

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ee:	2007      	movs	r0, #7
 80010f0:	f000 fd4e 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a42      	ldr	r2, [pc, #264]	; (8001228 <HAL_I2C_MspInit+0x128>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12d      	bne.n	800117e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a40      	ldr	r2, [pc, #256]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4835      	ldr	r0, [pc, #212]	; (8001230 <HAL_I2C_MspInit+0x130>)
 800115c:	f000 fd4c 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800117c:	e050      	b.n	8001220 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <HAL_I2C_MspInit+0x134>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d14b      	bne.n	8001220 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_I2C_MspInit+0x12c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_I2C_MspInit+0x12c>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_I2C_MspInit+0x12c>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011d2:	2304      	movs	r3, #4
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4816      	ldr	r0, [pc, #88]	; (8001238 <HAL_I2C_MspInit+0x138>)
 80011de:	f000 fd0b 	bl	8001bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011f4:	2304      	movs	r3, #4
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	480f      	ldr	r0, [pc, #60]	; (800123c <HAL_I2C_MspInit+0x13c>)
 8001200:	f000 fcfa 	bl	8001bf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_I2C_MspInit+0x12c>)
 800120e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_I2C_MspInit+0x12c>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40005400 	.word	0x40005400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020400 	.word	0x40020400
 8001234:	40005c00 	.word	0x40005c00
 8001238:	40020800 	.word	0x40020800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_UART_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_UART_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_UART_MspInit+0x88>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_UART_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_UART_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0x88>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_UART_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012aa:	2307      	movs	r3, #7
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_UART_MspInit+0x8c>)
 80012b6:	f000 fc9f 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f8c6 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f002 fecc 	bl	80040f0 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20020000 	.word	0x20020000
 8001384:	00000400 	.word	0x00000400
 8001388:	200001e4 	.word	0x200001e4
 800138c:	20000338 	.word	0x20000338

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013b8:	f7ff ffea 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f002 fe8b 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fd2f 	bl	8000e48 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013f8:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 80013fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001400:	20000334 	.word	0x20000334

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 fbad 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe38 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fbb7 	bl	8001bde <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 fb8d 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000034 	.word	0x20000034
 80014a4:	2000003c 	.word	0x2000003c
 80014a8:	20000038 	.word	0x20000038

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000003c 	.word	0x2000003c
 80014d0:	200001e8 	.word	0x200001e8

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200001e8 	.word	0x200001e8

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000003c 	.word	0x2000003c

08001534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e033      	b.n	80015b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f831 	bl	80015ba <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f954 	bl	8001834 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e001      	b.n	80015a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1c>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e113      	b.n	8001814 <HAL_ADC_ConfigChannel+0x244>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b09      	cmp	r3, #9
 80015fa:	d925      	bls.n	8001648 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68d9      	ldr	r1, [r3, #12]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	3b1e      	subs	r3, #30
 8001612:	2207      	movs	r2, #7
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43da      	mvns	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	400a      	ands	r2, r1
 8001620:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68d9      	ldr	r1, [r3, #12]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	4603      	mov	r3, r0
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4403      	add	r3, r0
 800163a:	3b1e      	subs	r3, #30
 800163c:	409a      	lsls	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	e022      	b.n	800168e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	2207      	movs	r2, #7
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6919      	ldr	r1, [r3, #16]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	4603      	mov	r3, r0
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4403      	add	r3, r0
 8001684:	409a      	lsls	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d824      	bhi.n	80016e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b05      	subs	r3, #5
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	400a      	ands	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b05      	subs	r3, #5
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
 80016de:	e04c      	b.n	800177a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d824      	bhi.n	8001732 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	3b23      	subs	r3, #35	; 0x23
 80016fa:	221f      	movs	r2, #31
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43da      	mvns	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	400a      	ands	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b23      	subs	r3, #35	; 0x23
 8001724:	fa00 f203 	lsl.w	r2, r0, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
 8001730:	e023      	b.n	800177a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b41      	subs	r3, #65	; 0x41
 8001744:	221f      	movs	r2, #31
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	400a      	ands	r2, r1
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_ADC_ConfigChannel+0x250>)
 800177c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_ADC_ConfigChannel+0x254>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10f      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b12      	cmp	r3, #18
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_ADC_ConfigChannel+0x254>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12b      	bne.n	800180a <HAL_ADC_ConfigChannel+0x23a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_ADC_ConfigChannel+0x258>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d003      	beq.n	80017c4 <HAL_ADC_ConfigChannel+0x1f4>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d122      	bne.n	800180a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_ADC_ConfigChannel+0x258>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d111      	bne.n	800180a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_ADC_ConfigChannel+0x25c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_ADC_ConfigChannel+0x260>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9a      	lsrs	r2, r3, #18
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3b01      	subs	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40012300 	.word	0x40012300
 8001824:	40012000 	.word	0x40012000
 8001828:	10000012 	.word	0x10000012
 800182c:	20000034 	.word	0x20000034
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800183c:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <ADC_Init+0x1f0>)
 800183e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800188c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <ADC_Init+0x1f4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	e00f      	b.n	8001932 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001930:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0202 	bic.w	r2, r2, #2
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7e1b      	ldrb	r3, [r3, #24]
 800194c:	005a      	lsls	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800196e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800197e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	3b01      	subs	r3, #1
 800198c:	035a      	lsls	r2, r3, #13
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	e007      	b.n	80019a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	051a      	lsls	r2, r3, #20
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ea:	025a      	lsls	r2, r3, #9
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6899      	ldr	r1, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	029a      	lsls	r2, r3, #10
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40012300 	.word	0x40012300
 8001a28:	0f000001 	.word	0x0f000001

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff47 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff5c 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffb0 	bl	8001b4c <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e165      	b.n	8001ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8154 	bne.w	8001eda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80ae 	beq.w	8001eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <HAL_GPIO_Init+0x300>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <HAL_GPIO_Init+0x300>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <HAL_GPIO_Init+0x300>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4f      	ldr	r2, [pc, #316]	; (8001f00 <HAL_GPIO_Init+0x308>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_GPIO_Init+0x314>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_GPIO_Init+0x318>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x20a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_GPIO_Init+0x31c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x206>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_GPIO_Init+0x320>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x202>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00c      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00a      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x21c>
 8001e12:	2300      	movs	r3, #0
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e24:	4935      	ldr	r1, [pc, #212]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	f67f ae96 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40021400 	.word	0x40021400
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e12b      	b.n	80021be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f8c0 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb8:	f001 f8b8 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8001fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a81      	ldr	r2, [pc, #516]	; (80021c8 <HAL_I2C_Init+0x274>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_I2C_Init+0x84>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a80      	ldr	r2, [pc, #512]	; (80021cc <HAL_I2C_Init+0x278>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e006      	b.n	8001fe6 <HAL_I2C_Init+0x92>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a7d      	ldr	r2, [pc, #500]	; (80021d0 <HAL_I2C_Init+0x27c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0e7      	b.n	80021be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a78      	ldr	r2, [pc, #480]	; (80021d4 <HAL_I2C_Init+0x280>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_I2C_Init+0x274>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d802      	bhi.n	8002028 <HAL_I2C_Init+0xd4>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	e009      	b.n	800203c <HAL_I2C_Init+0xe8>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_I2C_Init+0x284>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	495c      	ldr	r1, [pc, #368]	; (80021c8 <HAL_I2C_Init+0x274>)
 8002058:	428b      	cmp	r3, r1
 800205a:	d819      	bhi.n	8002090 <HAL_I2C_Init+0x13c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e59      	subs	r1, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fbb1 f3f3 	udiv	r3, r1, r3
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002070:	400b      	ands	r3, r1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_I2C_Init+0x138>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e59      	subs	r1, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	3301      	adds	r3, #1
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	e051      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 800208c:	2304      	movs	r3, #4
 800208e:	e04f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <HAL_I2C_Init+0x168>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e012      	b.n	80020e2 <HAL_I2C_Init+0x18e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Init+0x196>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e022      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10e      	bne.n	8002110 <HAL_I2C_Init+0x1bc>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e58      	subs	r0, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	440b      	add	r3, r1
 8002100:	fbb0 f3f3 	udiv	r3, r0, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	e00f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e58      	subs	r0, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	0099      	lsls	r1, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	6809      	ldr	r1, [r1, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6911      	ldr	r1, [r2, #16]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	000186a0 	.word	0x000186a0
 80021cc:	001e847f 	.word	0x001e847f
 80021d0:	003d08ff 	.word	0x003d08ff
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
 80021ec:	4613      	mov	r3, r2
 80021ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff f970 	bl	80014d4 <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	f040 80e0 	bne.w	80023c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2319      	movs	r3, #25
 800220a:	2201      	movs	r2, #1
 800220c:	4970      	ldr	r1, [pc, #448]	; (80023d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fc64 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	e0d3      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2C_Master_Transmit+0x50>
 8002228:	2302      	movs	r3, #2
 800222a:	e0cc      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d007      	beq.n	8002252 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002260:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2221      	movs	r2, #33	; 0x21
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2210      	movs	r2, #16
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 face 	bl	800283c <I2C_MasterRequestWrite>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e08d      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c0:	e066      	b.n	8002390 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fd22 	bl	8002d10 <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x188>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6a39      	ldr	r1, [r7, #32]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fd19 	bl	8002da0 <I2C_WaitOnBTFFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2b04      	cmp	r3, #4
 800237a:	d107      	bne.n	800238c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01a      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d194      	bne.n	80022c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00100002 	.word	0x00100002
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	461a      	mov	r2, r3
 80023e4:	460b      	mov	r3, r1
 80023e6:	817b      	strh	r3, [r7, #10]
 80023e8:	4613      	mov	r3, r2
 80023ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff f872 	bl	80014d4 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	f040 8217 	bne.w	800282e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2319      	movs	r3, #25
 8002406:	2201      	movs	r2, #1
 8002408:	497c      	ldr	r1, [pc, #496]	; (80025fc <HAL_I2C_Master_Receive+0x224>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fb66 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	e20a      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_I2C_Master_Receive+0x50>
 8002424:	2302      	movs	r3, #2
 8002426:	e203      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d007      	beq.n	800244e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2222      	movs	r2, #34	; 0x22
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2210      	movs	r2, #16
 800246a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	893a      	ldrh	r2, [r7, #8]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4a5c      	ldr	r2, [pc, #368]	; (8002600 <HAL_I2C_Master_Receive+0x228>)
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa52 	bl	8002940 <I2C_MasterRequestRead>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c4      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d113      	bne.n	80024d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e198      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d11b      	bne.n	8002516 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e178      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	2b02      	cmp	r3, #2
 800251c:	d11b      	bne.n	8002556 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	e158      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800257c:	e144      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b03      	cmp	r3, #3
 8002584:	f200 80f1 	bhi.w	800276a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b01      	cmp	r3, #1
 800258e:	d123      	bne.n	80025d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fc4b 	bl	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e145      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d6:	e117      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d14e      	bne.n	800267e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	2200      	movs	r2, #0
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <HAL_I2C_Master_Receive+0x22c>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa76 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e11a      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000
 8002604:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800267c:	e0c4      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	2200      	movs	r2, #0
 8002686:	496c      	ldr	r1, [pc, #432]	; (8002838 <HAL_I2C_Master_Receive+0x460>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fa27 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0cb      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	2200      	movs	r2, #0
 80026e2:	4955      	ldr	r1, [pc, #340]	; (8002838 <HAL_I2C_Master_Receive+0x460>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f9f9 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e09d      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002768:	e04e      	b.n	8002808 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fb5e 	bl	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e058      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d124      	bne.n	8002808 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d107      	bne.n	80027d6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f aeb6 	bne.w	800257e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00010004 	.word	0x00010004

0800283c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	460b      	mov	r3, r1
 800284a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d006      	beq.n	8002866 <I2C_MasterRequestWrite+0x2a>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d003      	beq.n	8002866 <I2C_MasterRequestWrite+0x2a>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002864:	d108      	bne.n	8002878 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e00b      	b.n	8002890 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	2b12      	cmp	r3, #18
 800287e:	d107      	bne.n	8002890 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800288e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f91d 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b6:	d103      	bne.n	80028c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e035      	b.n	8002930 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028cc:	d108      	bne.n	80028e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	e01b      	b.n	8002918 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e0:	897b      	ldrh	r3, [r7, #10]
 80028e2:	11db      	asrs	r3, r3, #7
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0306 	and.w	r3, r3, #6
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f063 030f 	orn	r3, r3, #15
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <I2C_MasterRequestWrite+0xfc>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f966 	bl	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e010      	b.n	8002930 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4907      	ldr	r1, [pc, #28]	; (800293c <I2C_MasterRequestWrite+0x100>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f956 	bl	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	00010008 	.word	0x00010008
 800293c:	00010002 	.word	0x00010002

08002940 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002964:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d006      	beq.n	800297a <I2C_MasterRequestRead+0x3a>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d003      	beq.n	800297a <I2C_MasterRequestRead+0x3a>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002978:	d108      	bne.n	800298c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e00b      	b.n	80029a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	2b11      	cmp	r3, #17
 8002992:	d107      	bne.n	80029a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f893 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ca:	d103      	bne.n	80029d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e079      	b.n	8002acc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e0:	d108      	bne.n	80029f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	e05f      	b.n	8002ab4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	11db      	asrs	r3, r3, #7
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f003 0306 	and.w	r3, r3, #6
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f063 030f 	orn	r3, r3, #15
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4930      	ldr	r1, [pc, #192]	; (8002ad4 <I2C_MasterRequestRead+0x194>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f8dc 	bl	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e054      	b.n	8002acc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4929      	ldr	r1, [pc, #164]	; (8002ad8 <I2C_MasterRequestRead+0x198>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8cc 	bl	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e044      	b.n	8002acc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f831 	bl	8002adc <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	d103      	bne.n	8002a98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e017      	b.n	8002acc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	11db      	asrs	r3, r3, #7
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0306 	and.w	r3, r3, #6
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f063 030e 	orn	r3, r3, #14
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <I2C_MasterRequestRead+0x198>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f888 	bl	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	00010008 	.word	0x00010008
 8002ad8:	00010002 	.word	0x00010002

08002adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aec:	e048      	b.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d044      	beq.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7fe fced 	bl	80014d4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d139      	bne.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10d      	bne.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	e00c      	b.n	8002b4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d116      	bne.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e023      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10d      	bne.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	43da      	mvns	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4013      	ands	r3, r2
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	e00c      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d093      	beq.n	8002aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bde:	e071      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d123      	bne.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e067      	b.n	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d041      	beq.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c40:	f7fe fc48 	bl	80014d4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d302      	bcc.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d136      	bne.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e00b      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	43da      	mvns	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e021      	b.n	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10c      	bne.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e00b      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f af6d 	bne.w	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d1c:	e034      	b.n	8002d88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8e3 	bl	8002eea <I2C_IsAcknowledgeFailed>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d028      	beq.n	8002d88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7fe fbcd 	bl	80014d4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d016      	beq.n	8002d88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e007      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d1c3      	bne.n	8002d1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dac:	e034      	b.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f89b 	bl	8002eea <I2C_IsAcknowledgeFailed>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d028      	beq.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fb85 	bl	80014d4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d11d      	bne.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d016      	beq.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e007      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d1c3      	bne.n	8002dae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e3c:	e049      	b.n	8002ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d119      	bne.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0210 	mvn.w	r2, #16
 8002e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e030      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fe fb28 	bl	80014d4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11d      	bne.n	8002ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d016      	beq.n	8002ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d1ae      	bne.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d11b      	bne.n	8002f3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0204 	orr.w	r2, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0cc      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90c      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d044      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d119      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003002:	2b03      	cmp	r3, #3
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e067      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4934      	ldr	r1, [pc, #208]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7fe fa4c 	bl	80014d4 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7fe fa48 	bl	80014d4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e04f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20c      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f855 	bl	800317c <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f9ac 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00
 8003104:	40023800 	.word	0x40023800
 8003108:	08004a0c 	.word	0x08004a0c
 800310c:	20000034 	.word	0x20000034
 8003110:	20000038 	.word	0x20000038

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000034 	.word	0x20000034

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff0 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	08004a1c 	.word	0x08004a1c

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffdc 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0b5b      	lsrs	r3, r3, #13
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08004a1c 	.word	0x08004a1c

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b0ae      	sub	sp, #184	; 0xb8
 8003182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a2:	4bcb      	ldr	r3, [pc, #812]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	f200 8206 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x440>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	080035bd 	.word	0x080035bd
 80031c0:	080035bd 	.word	0x080035bd
 80031c4:	080035bd 	.word	0x080035bd
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	080035bd 	.word	0x080035bd
 80031d0:	080035bd 	.word	0x080035bd
 80031d4:	080035bd 	.word	0x080035bd
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	080035bd 	.word	0x080035bd
 80031e0:	080035bd 	.word	0x080035bd
 80031e4:	080035bd 	.word	0x080035bd
 80031e8:	080033ed 	.word	0x080033ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4bb9      	ldr	r3, [pc, #740]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80031ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80031f2:	e1e7      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f4:	4bb8      	ldr	r3, [pc, #736]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031fa:	e1e3      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fc:	4bb4      	ldr	r3, [pc, #720]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003208:	4bb1      	ldr	r3, [pc, #708]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d071      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003214:	4bae      	ldr	r3, [pc, #696]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003220:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	f04f 0000 	mov.w	r0, #0
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	0159      	lsls	r1, r3, #5
 8003248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324c:	0150      	lsls	r0, r2, #5
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4621      	mov	r1, r4
 8003254:	1a51      	subs	r1, r2, r1
 8003256:	6439      	str	r1, [r7, #64]	; 0x40
 8003258:	4629      	mov	r1, r5
 800325a:	eb63 0301 	sbc.w	r3, r3, r1
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800326c:	4649      	mov	r1, r9
 800326e:	018b      	lsls	r3, r1, #6
 8003270:	4641      	mov	r1, r8
 8003272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003276:	4641      	mov	r1, r8
 8003278:	018a      	lsls	r2, r1, #6
 800327a:	4641      	mov	r1, r8
 800327c:	1a51      	subs	r1, r2, r1
 800327e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003280:	4649      	mov	r1, r9
 8003282:	eb63 0301 	sbc.w	r3, r3, r1
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003294:	4649      	mov	r1, r9
 8003296:	00cb      	lsls	r3, r1, #3
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329e:	4641      	mov	r1, r8
 80032a0:	00ca      	lsls	r2, r1, #3
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	4622      	mov	r2, r4
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30
 80032ae:	462b      	mov	r3, r5
 80032b0:	460a      	mov	r2, r1
 80032b2:	eb42 0303 	adc.w	r3, r2, r3
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032c4:	4629      	mov	r1, r5
 80032c6:	024b      	lsls	r3, r1, #9
 80032c8:	4621      	mov	r1, r4
 80032ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ce:	4621      	mov	r1, r4
 80032d0:	024a      	lsls	r2, r1, #9
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80032e8:	f7fc ffe2 	bl	80002b0 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f6:	e067      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f8:	4b75      	ldr	r3, [pc, #468]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003304:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	67bb      	str	r3, [r7, #120]	; 0x78
 8003312:	2300      	movs	r3, #0
 8003314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003316:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4621      	mov	r1, r4
 8003334:	1a51      	subs	r1, r2, r1
 8003336:	62b9      	str	r1, [r7, #40]	; 0x28
 8003338:	4629      	mov	r1, r5
 800333a:	eb63 0301 	sbc.w	r3, r3, r1
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800334c:	4649      	mov	r1, r9
 800334e:	018b      	lsls	r3, r1, #6
 8003350:	4641      	mov	r1, r8
 8003352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003356:	4641      	mov	r1, r8
 8003358:	018a      	lsls	r2, r1, #6
 800335a:	4641      	mov	r1, r8
 800335c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003360:	4649      	mov	r1, r9
 8003362:	eb63 0b01 	sbc.w	fp, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003372:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337a:	4692      	mov	sl, r2
 800337c:	469b      	mov	fp, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb1a 0303 	adds.w	r3, sl, r3
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	462b      	mov	r3, r5
 8003388:	eb4b 0303 	adc.w	r3, fp, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800339a:	4629      	mov	r1, r5
 800339c:	028b      	lsls	r3, r1, #10
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a4:	4621      	mov	r1, r4
 80033a6:	028a      	lsls	r2, r1, #10
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b0:	2200      	movs	r2, #0
 80033b2:	673b      	str	r3, [r7, #112]	; 0x70
 80033b4:	677a      	str	r2, [r7, #116]	; 0x74
 80033b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033ba:	f7fc ff79 	bl	80002b0 <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4613      	mov	r3, r2
 80033c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80033da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033ea:	e0eb      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d06b      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	2200      	movs	r2, #0
 800340c:	66bb      	str	r3, [r7, #104]	; 0x68
 800340e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
 8003418:	2300      	movs	r3, #0
 800341a:	667b      	str	r3, [r7, #100]	; 0x64
 800341c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003420:	4622      	mov	r2, r4
 8003422:	462b      	mov	r3, r5
 8003424:	f04f 0000 	mov.w	r0, #0
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	0159      	lsls	r1, r3, #5
 800342e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003432:	0150      	lsls	r0, r2, #5
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4621      	mov	r1, r4
 800343a:	1a51      	subs	r1, r2, r1
 800343c:	61b9      	str	r1, [r7, #24]
 800343e:	4629      	mov	r1, r5
 8003440:	eb63 0301 	sbc.w	r3, r3, r1
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003452:	4659      	mov	r1, fp
 8003454:	018b      	lsls	r3, r1, #6
 8003456:	4651      	mov	r1, sl
 8003458:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345c:	4651      	mov	r1, sl
 800345e:	018a      	lsls	r2, r1, #6
 8003460:	4651      	mov	r1, sl
 8003462:	ebb2 0801 	subs.w	r8, r2, r1
 8003466:	4659      	mov	r1, fp
 8003468:	eb63 0901 	sbc.w	r9, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003478:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003480:	4690      	mov	r8, r2
 8003482:	4699      	mov	r9, r3
 8003484:	4623      	mov	r3, r4
 8003486:	eb18 0303 	adds.w	r3, r8, r3
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	462b      	mov	r3, r5
 800348e:	eb49 0303 	adc.w	r3, r9, r3
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034a0:	4629      	mov	r1, r5
 80034a2:	024b      	lsls	r3, r1, #9
 80034a4:	4621      	mov	r1, r4
 80034a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034aa:	4621      	mov	r1, r4
 80034ac:	024a      	lsls	r2, r1, #9
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034b6:	2200      	movs	r2, #0
 80034b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034c0:	f7fc fef6 	bl	80002b0 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ce:	e065      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x420>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	2200      	movs	r2, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	4611      	mov	r1, r2
 80034e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ec:	653b      	str	r3, [r7, #80]	; 0x50
 80034ee:	2300      	movs	r3, #0
 80034f0:	657b      	str	r3, [r7, #84]	; 0x54
 80034f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4641      	mov	r1, r8
 8003510:	1a51      	subs	r1, r2, r1
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	4649      	mov	r1, r9
 8003516:	eb63 0301 	sbc.w	r3, r3, r1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003528:	4659      	mov	r1, fp
 800352a:	018b      	lsls	r3, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003532:	4651      	mov	r1, sl
 8003534:	018a      	lsls	r2, r1, #6
 8003536:	4651      	mov	r1, sl
 8003538:	1a54      	subs	r4, r2, r1
 800353a:	4659      	mov	r1, fp
 800353c:	eb63 0501 	sbc.w	r5, r3, r1
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	00eb      	lsls	r3, r5, #3
 800354a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354e:	00e2      	lsls	r2, r4, #3
 8003550:	4614      	mov	r4, r2
 8003552:	461d      	mov	r5, r3
 8003554:	4643      	mov	r3, r8
 8003556:	18e3      	adds	r3, r4, r3
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	464b      	mov	r3, r9
 800355c:	eb45 0303 	adc.w	r3, r5, r3
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356e:	4629      	mov	r1, r5
 8003570:	028b      	lsls	r3, r1, #10
 8003572:	4621      	mov	r1, r4
 8003574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003578:	4621      	mov	r1, r4
 800357a:	028a      	lsls	r2, r1, #10
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003584:	2200      	movs	r2, #0
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
 8003588:	64fa      	str	r2, [r7, #76]	; 0x4c
 800358a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800358e:	f7fc fe8f 	bl	80002b0 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4613      	mov	r3, r2
 8003598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0f1b      	lsrs	r3, r3, #28
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80035aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035ba:	e003      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	37b8      	adds	r7, #184	; 0xb8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400

080035dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e28d      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8083 	beq.w	8003702 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035fc:	4b94      	ldr	r3, [pc, #592]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b04      	cmp	r3, #4
 8003606:	d019      	beq.n	800363c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003608:	4b91      	ldr	r3, [pc, #580]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003610:	2b08      	cmp	r3, #8
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003614:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b84      	ldr	r3, [pc, #528]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x124>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e25a      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x90>
 800365e:	4b7c      	ldr	r3, [pc, #496]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7b      	ldr	r2, [pc, #492]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xcc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0xb4>
 8003676:	4b76      	ldr	r3, [pc, #472]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a75      	ldr	r2, [pc, #468]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b73      	ldr	r3, [pc, #460]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a72      	ldr	r2, [pc, #456]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xcc>
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a6b      	ldr	r2, [pc, #428]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd ff10 	bl	80014d4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd ff0c 	bl	80014d4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e21f      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xdc>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd fefc 	bl	80014d4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd fef8 	bl	80014d4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e20b      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b57      	ldr	r3, [pc, #348]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x104>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d06f      	beq.n	80037ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800370e:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800371a:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003726:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d11c      	bne.n	8003778 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b44      	ldr	r3, [pc, #272]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x186>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e1d3      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4937      	ldr	r1, [pc, #220]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	e03a      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003780:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_OscConfig+0x278>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fea5 	bl	80014d4 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378e:	f7fd fea1 	bl	80014d4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e1b4      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4925      	ldr	r1, [pc, #148]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
 80037c0:	e015      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x278>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fe84 	bl	80014d4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d0:	f7fd fe80 	bl	80014d4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e193      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d036      	beq.n	8003868 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fd fe64 	bl	80014d4 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003810:	f7fd fe60 	bl	80014d4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e173      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x234>
 800382e:	e01b      	b.n	8003868 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fd fe4d 	bl	80014d4 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	e00e      	b.n	800385c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383e:	f7fd fe49 	bl	80014d4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d907      	bls.n	800385c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e15c      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
 8003850:	40023800 	.word	0x40023800
 8003854:	42470000 	.word	0x42470000
 8003858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ea      	bne.n	800383e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8097 	beq.w	80039a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387a:	4b83      	ldr	r3, [pc, #524]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a7e      	ldr	r2, [pc, #504]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b7c      	ldr	r3, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b79      	ldr	r3, [pc, #484]	; (8003a8c <HAL_RCC_OscConfig+0x4b0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCC_OscConfig+0x4b0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a75      	ldr	r2, [pc, #468]	; (8003a8c <HAL_RCC_OscConfig+0x4b0>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fe09 	bl	80014d4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd fe05 	bl	80014d4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e118      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCC_OscConfig+0x4b0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x31e>
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e01c      	b.n	8003934 <HAL_RCC_OscConfig+0x358>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x340>
 8003902:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
 800391a:	e00b      	b.n	8003934 <HAL_RCC_OscConfig+0x358>
 800391c:	4b5a      	ldr	r3, [pc, #360]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	; 0x70
 8003928:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	f023 0304 	bic.w	r3, r3, #4
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d015      	beq.n	8003968 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fdca 	bl	80014d4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fd fdc6 	bl	80014d4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0d7      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ee      	beq.n	8003944 <HAL_RCC_OscConfig+0x368>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fdb4 	bl	80014d4 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd fdb0 	bl	80014d4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0c1      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ee      	bne.n	8003970 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	4a3a      	ldr	r2, [pc, #232]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80ad 	beq.w	8003b08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d060      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d145      	bne.n	8003a4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <HAL_RCC_OscConfig+0x4b4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd fd84 	bl	80014d4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd fd80 	bl	80014d4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e093      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	019b      	lsls	r3, r3, #6
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	3b01      	subs	r3, #1
 8003a08:	041b      	lsls	r3, r3, #16
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	071b      	lsls	r3, r3, #28
 8003a1a:	491b      	ldr	r1, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4b4>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fd fd55 	bl	80014d4 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fd fd51 	bl	80014d4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e064      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x452>
 8003a4c:	e05c      	b.n	8003b08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4b4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fd3e 	bl	80014d4 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fd fd3a 	bl	80014d4 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e04d      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_OscConfig+0x4ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x480>
 8003a7a:	e045      	b.n	8003b08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e040      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a94:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_RCC_OscConfig+0x538>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d030      	beq.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d129      	bne.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d122      	bne.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d119      	bne.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	3b01      	subs	r3, #1
 8003ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d10f      	bne.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e042      	b.n	8003bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fb7e 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f82b 	bl	8003bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b0c0      	sub	sp, #256	; 0x100
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	68d9      	ldr	r1, [r3, #12]
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	ea40 0301 	orr.w	r3, r0, r1
 8003be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c10:	f021 010c 	bic.w	r1, r1, #12
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	6999      	ldr	r1, [r3, #24]
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	ea40 0301 	orr.w	r3, r0, r1
 8003c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8f      	ldr	r3, [pc, #572]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d005      	beq.n	8003c58 <UART_SetConfig+0xa0>
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <UART_SetConfig+0x2d0>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d104      	bne.n	8003c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7ff fa7c 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c60:	e003      	b.n	8003c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7ff fa63 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8003c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	f040 810c 	bne.w	8003e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c92:	415b      	adcs	r3, r3
 8003c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb43 0901 	adc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cc8:	462b      	mov	r3, r5
 8003cca:	eb49 0303 	adc.w	r3, r9, r3
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	18db      	adds	r3, r3, r3
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
 8003cec:	4613      	mov	r3, r2
 8003cee:	eb42 0303 	adc.w	r3, r2, r3
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cfc:	f7fc fad8 	bl	80002b0 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	011c      	lsls	r4, r3, #4
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d30:	4641      	mov	r1, r8
 8003d32:	eb12 0a01 	adds.w	sl, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0b01 	adc.w	fp, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d50:	4692      	mov	sl, r2
 8003d52:	469b      	mov	fp, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	eb1a 0303 	adds.w	r3, sl, r3
 8003d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb4b 0303 	adc.w	r3, fp, r3
 8003d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	18db      	adds	r3, r3, r3
 8003d80:	643b      	str	r3, [r7, #64]	; 0x40
 8003d82:	4613      	mov	r3, r2
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d92:	f7fc fa8d 	bl	80002b0 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2264      	movs	r2, #100	; 0x64
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	1acb      	subs	r3, r1, r3
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003db4:	fba3 2302 	umull	r2, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc0:	441c      	add	r4, r3
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e38:	460b      	mov	r3, r1
 8003e3a:	18db      	adds	r3, r3, r3
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3e:	4613      	mov	r3, r2
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e4e:	f7fc fa2f 	bl	80002b0 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	3332      	adds	r3, #50	; 0x32
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 0207 	and.w	r2, r3, #7
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4422      	add	r2, r4
 8003e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e80:	e106      	b.n	8004090 <UART_SetConfig+0x4d8>
 8003e82:	bf00      	nop
 8003e84:	40011000 	.word	0x40011000
 8003e88:	40011400 	.word	0x40011400
 8003e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	6239      	str	r1, [r7, #32]
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	1854      	adds	r4, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0501 	adc.w	r5, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ed8:	464b      	mov	r3, r9
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003efe:	4629      	mov	r1, r5
 8003f00:	008b      	lsls	r3, r1, #2
 8003f02:	4621      	mov	r1, r4
 8003f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f08:	4621      	mov	r1, r4
 8003f0a:	008a      	lsls	r2, r1, #2
 8003f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f10:	f7fc f9ce 	bl	80002b0 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b60      	ldr	r3, [pc, #384]	; (800409c <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	61b9      	str	r1, [r7, #24]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	008a      	lsls	r2, r1, #2
 8003faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fae:	f7fc f97f 	bl	80002b0 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <UART_SetConfig+0x4e4>)
 8003fba:	fba3 2301 	umull	r2, r3, r3, r1
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	; 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <UART_SetConfig+0x4e4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd8:	441c      	add	r4, r3
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe2:	677a      	str	r2, [r7, #116]	; 0x74
 8003fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	66bb      	str	r3, [r7, #104]	; 0x68
 800402a:	464b      	mov	r3, r9
 800402c:	460a      	mov	r2, r1
 800402e:	eb42 0303 	adc.w	r3, r2, r3
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	663b      	str	r3, [r7, #96]	; 0x60
 800403e:	667a      	str	r2, [r7, #100]	; 0x64
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800404c:	4649      	mov	r1, r9
 800404e:	008b      	lsls	r3, r1, #2
 8004050:	4641      	mov	r1, r8
 8004052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004056:	4641      	mov	r1, r8
 8004058:	008a      	lsls	r2, r1, #2
 800405a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800405e:	f7fc f927 	bl	80002b0 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <UART_SetConfig+0x4e4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <UART_SetConfig+0x4e4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4422      	add	r2, r4
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <siprintf>:
 80040a0:	b40e      	push	{r1, r2, r3}
 80040a2:	b500      	push	{lr}
 80040a4:	b09c      	sub	sp, #112	; 0x70
 80040a6:	ab1d      	add	r3, sp, #116	; 0x74
 80040a8:	9002      	str	r0, [sp, #8]
 80040aa:	9006      	str	r0, [sp, #24]
 80040ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040b0:	4809      	ldr	r0, [pc, #36]	; (80040d8 <siprintf+0x38>)
 80040b2:	9107      	str	r1, [sp, #28]
 80040b4:	9104      	str	r1, [sp, #16]
 80040b6:	4909      	ldr	r1, [pc, #36]	; (80040dc <siprintf+0x3c>)
 80040b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040bc:	9105      	str	r1, [sp, #20]
 80040be:	6800      	ldr	r0, [r0, #0]
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	a902      	add	r1, sp, #8
 80040c4:	f000 f992 	bl	80043ec <_svfiprintf_r>
 80040c8:	9b02      	ldr	r3, [sp, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	b01c      	add	sp, #112	; 0x70
 80040d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d4:	b003      	add	sp, #12
 80040d6:	4770      	bx	lr
 80040d8:	2000008c 	.word	0x2000008c
 80040dc:	ffff0208 	.word	0xffff0208

080040e0 <memset>:
 80040e0:	4402      	add	r2, r0
 80040e2:	4603      	mov	r3, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <__errno>:
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <__errno+0x8>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	2000008c 	.word	0x2000008c

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4d0d      	ldr	r5, [pc, #52]	; (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2600      	movs	r6, #0
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4d0b      	ldr	r5, [pc, #44]	; (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x44>)
 8004110:	f000 fc6a 	bl	80049e8 <_init>
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2600      	movs	r6, #0
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f855 3b04 	ldr.w	r3, [r5], #4
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f855 3b04 	ldr.w	r3, [r5], #4
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	08004a60 	.word	0x08004a60
 8004138:	08004a60 	.word	0x08004a60
 800413c:	08004a60 	.word	0x08004a60
 8004140:	08004a64 	.word	0x08004a64

08004144 <__retarget_lock_acquire_recursive>:
 8004144:	4770      	bx	lr

08004146 <__retarget_lock_release_recursive>:
 8004146:	4770      	bx	lr

08004148 <_free_r>:
 8004148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800414a:	2900      	cmp	r1, #0
 800414c:	d044      	beq.n	80041d8 <_free_r+0x90>
 800414e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004152:	9001      	str	r0, [sp, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f1a1 0404 	sub.w	r4, r1, #4
 800415a:	bfb8      	it	lt
 800415c:	18e4      	addlt	r4, r4, r3
 800415e:	f000 f8df 	bl	8004320 <__malloc_lock>
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <_free_r+0x94>)
 8004164:	9801      	ldr	r0, [sp, #4]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	b933      	cbnz	r3, 8004178 <_free_r+0x30>
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6014      	str	r4, [r2, #0]
 800416e:	b003      	add	sp, #12
 8004170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004174:	f000 b8da 	b.w	800432c <__malloc_unlock>
 8004178:	42a3      	cmp	r3, r4
 800417a:	d908      	bls.n	800418e <_free_r+0x46>
 800417c:	6825      	ldr	r5, [r4, #0]
 800417e:	1961      	adds	r1, r4, r5
 8004180:	428b      	cmp	r3, r1
 8004182:	bf01      	itttt	eq
 8004184:	6819      	ldreq	r1, [r3, #0]
 8004186:	685b      	ldreq	r3, [r3, #4]
 8004188:	1949      	addeq	r1, r1, r5
 800418a:	6021      	streq	r1, [r4, #0]
 800418c:	e7ed      	b.n	800416a <_free_r+0x22>
 800418e:	461a      	mov	r2, r3
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	b10b      	cbz	r3, 8004198 <_free_r+0x50>
 8004194:	42a3      	cmp	r3, r4
 8004196:	d9fa      	bls.n	800418e <_free_r+0x46>
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	1855      	adds	r5, r2, r1
 800419c:	42a5      	cmp	r5, r4
 800419e:	d10b      	bne.n	80041b8 <_free_r+0x70>
 80041a0:	6824      	ldr	r4, [r4, #0]
 80041a2:	4421      	add	r1, r4
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	d1e0      	bne.n	800416e <_free_r+0x26>
 80041ac:	681c      	ldr	r4, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	6053      	str	r3, [r2, #4]
 80041b2:	440c      	add	r4, r1
 80041b4:	6014      	str	r4, [r2, #0]
 80041b6:	e7da      	b.n	800416e <_free_r+0x26>
 80041b8:	d902      	bls.n	80041c0 <_free_r+0x78>
 80041ba:	230c      	movs	r3, #12
 80041bc:	6003      	str	r3, [r0, #0]
 80041be:	e7d6      	b.n	800416e <_free_r+0x26>
 80041c0:	6825      	ldr	r5, [r4, #0]
 80041c2:	1961      	adds	r1, r4, r5
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf04      	itt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	6063      	str	r3, [r4, #4]
 80041ce:	bf04      	itt	eq
 80041d0:	1949      	addeq	r1, r1, r5
 80041d2:	6021      	streq	r1, [r4, #0]
 80041d4:	6054      	str	r4, [r2, #4]
 80041d6:	e7ca      	b.n	800416e <_free_r+0x26>
 80041d8:	b003      	add	sp, #12
 80041da:	bd30      	pop	{r4, r5, pc}
 80041dc:	2000032c 	.word	0x2000032c

080041e0 <sbrk_aligned>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4e0e      	ldr	r6, [pc, #56]	; (800421c <sbrk_aligned+0x3c>)
 80041e4:	460c      	mov	r4, r1
 80041e6:	6831      	ldr	r1, [r6, #0]
 80041e8:	4605      	mov	r5, r0
 80041ea:	b911      	cbnz	r1, 80041f2 <sbrk_aligned+0x12>
 80041ec:	f000 fba6 	bl	800493c <_sbrk_r>
 80041f0:	6030      	str	r0, [r6, #0]
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 fba1 	bl	800493c <_sbrk_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d00a      	beq.n	8004214 <sbrk_aligned+0x34>
 80041fe:	1cc4      	adds	r4, r0, #3
 8004200:	f024 0403 	bic.w	r4, r4, #3
 8004204:	42a0      	cmp	r0, r4
 8004206:	d007      	beq.n	8004218 <sbrk_aligned+0x38>
 8004208:	1a21      	subs	r1, r4, r0
 800420a:	4628      	mov	r0, r5
 800420c:	f000 fb96 	bl	800493c <_sbrk_r>
 8004210:	3001      	adds	r0, #1
 8004212:	d101      	bne.n	8004218 <sbrk_aligned+0x38>
 8004214:	f04f 34ff 	mov.w	r4, #4294967295
 8004218:	4620      	mov	r0, r4
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	20000330 	.word	0x20000330

08004220 <_malloc_r>:
 8004220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004224:	1ccd      	adds	r5, r1, #3
 8004226:	f025 0503 	bic.w	r5, r5, #3
 800422a:	3508      	adds	r5, #8
 800422c:	2d0c      	cmp	r5, #12
 800422e:	bf38      	it	cc
 8004230:	250c      	movcc	r5, #12
 8004232:	2d00      	cmp	r5, #0
 8004234:	4607      	mov	r7, r0
 8004236:	db01      	blt.n	800423c <_malloc_r+0x1c>
 8004238:	42a9      	cmp	r1, r5
 800423a:	d905      	bls.n	8004248 <_malloc_r+0x28>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	2600      	movs	r6, #0
 8004242:	4630      	mov	r0, r6
 8004244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800431c <_malloc_r+0xfc>
 800424c:	f000 f868 	bl	8004320 <__malloc_lock>
 8004250:	f8d8 3000 	ldr.w	r3, [r8]
 8004254:	461c      	mov	r4, r3
 8004256:	bb5c      	cbnz	r4, 80042b0 <_malloc_r+0x90>
 8004258:	4629      	mov	r1, r5
 800425a:	4638      	mov	r0, r7
 800425c:	f7ff ffc0 	bl	80041e0 <sbrk_aligned>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	4604      	mov	r4, r0
 8004264:	d155      	bne.n	8004312 <_malloc_r+0xf2>
 8004266:	f8d8 4000 	ldr.w	r4, [r8]
 800426a:	4626      	mov	r6, r4
 800426c:	2e00      	cmp	r6, #0
 800426e:	d145      	bne.n	80042fc <_malloc_r+0xdc>
 8004270:	2c00      	cmp	r4, #0
 8004272:	d048      	beq.n	8004306 <_malloc_r+0xe6>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	4631      	mov	r1, r6
 8004278:	4638      	mov	r0, r7
 800427a:	eb04 0903 	add.w	r9, r4, r3
 800427e:	f000 fb5d 	bl	800493c <_sbrk_r>
 8004282:	4581      	cmp	r9, r0
 8004284:	d13f      	bne.n	8004306 <_malloc_r+0xe6>
 8004286:	6821      	ldr	r1, [r4, #0]
 8004288:	1a6d      	subs	r5, r5, r1
 800428a:	4629      	mov	r1, r5
 800428c:	4638      	mov	r0, r7
 800428e:	f7ff ffa7 	bl	80041e0 <sbrk_aligned>
 8004292:	3001      	adds	r0, #1
 8004294:	d037      	beq.n	8004306 <_malloc_r+0xe6>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	442b      	add	r3, r5
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	f8d8 3000 	ldr.w	r3, [r8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d038      	beq.n	8004316 <_malloc_r+0xf6>
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	42a2      	cmp	r2, r4
 80042a8:	d12b      	bne.n	8004302 <_malloc_r+0xe2>
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e00f      	b.n	80042d0 <_malloc_r+0xb0>
 80042b0:	6822      	ldr	r2, [r4, #0]
 80042b2:	1b52      	subs	r2, r2, r5
 80042b4:	d41f      	bmi.n	80042f6 <_malloc_r+0xd6>
 80042b6:	2a0b      	cmp	r2, #11
 80042b8:	d917      	bls.n	80042ea <_malloc_r+0xca>
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	42a3      	cmp	r3, r4
 80042be:	6025      	str	r5, [r4, #0]
 80042c0:	bf18      	it	ne
 80042c2:	6059      	strne	r1, [r3, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	bf08      	it	eq
 80042c8:	f8c8 1000 	streq.w	r1, [r8]
 80042cc:	5162      	str	r2, [r4, r5]
 80042ce:	604b      	str	r3, [r1, #4]
 80042d0:	4638      	mov	r0, r7
 80042d2:	f104 060b 	add.w	r6, r4, #11
 80042d6:	f000 f829 	bl	800432c <__malloc_unlock>
 80042da:	f026 0607 	bic.w	r6, r6, #7
 80042de:	1d23      	adds	r3, r4, #4
 80042e0:	1af2      	subs	r2, r6, r3
 80042e2:	d0ae      	beq.n	8004242 <_malloc_r+0x22>
 80042e4:	1b9b      	subs	r3, r3, r6
 80042e6:	50a3      	str	r3, [r4, r2]
 80042e8:	e7ab      	b.n	8004242 <_malloc_r+0x22>
 80042ea:	42a3      	cmp	r3, r4
 80042ec:	6862      	ldr	r2, [r4, #4]
 80042ee:	d1dd      	bne.n	80042ac <_malloc_r+0x8c>
 80042f0:	f8c8 2000 	str.w	r2, [r8]
 80042f4:	e7ec      	b.n	80042d0 <_malloc_r+0xb0>
 80042f6:	4623      	mov	r3, r4
 80042f8:	6864      	ldr	r4, [r4, #4]
 80042fa:	e7ac      	b.n	8004256 <_malloc_r+0x36>
 80042fc:	4634      	mov	r4, r6
 80042fe:	6876      	ldr	r6, [r6, #4]
 8004300:	e7b4      	b.n	800426c <_malloc_r+0x4c>
 8004302:	4613      	mov	r3, r2
 8004304:	e7cc      	b.n	80042a0 <_malloc_r+0x80>
 8004306:	230c      	movs	r3, #12
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4638      	mov	r0, r7
 800430c:	f000 f80e 	bl	800432c <__malloc_unlock>
 8004310:	e797      	b.n	8004242 <_malloc_r+0x22>
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	e7dc      	b.n	80042d0 <_malloc_r+0xb0>
 8004316:	605b      	str	r3, [r3, #4]
 8004318:	deff      	udf	#255	; 0xff
 800431a:	bf00      	nop
 800431c:	2000032c 	.word	0x2000032c

08004320 <__malloc_lock>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__malloc_lock+0x8>)
 8004322:	f7ff bf0f 	b.w	8004144 <__retarget_lock_acquire_recursive>
 8004326:	bf00      	nop
 8004328:	20000328 	.word	0x20000328

0800432c <__malloc_unlock>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__malloc_unlock+0x8>)
 800432e:	f7ff bf0a 	b.w	8004146 <__retarget_lock_release_recursive>
 8004332:	bf00      	nop
 8004334:	20000328 	.word	0x20000328

08004338 <__ssputs_r>:
 8004338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	688e      	ldr	r6, [r1, #8]
 800433e:	461f      	mov	r7, r3
 8004340:	42be      	cmp	r6, r7
 8004342:	680b      	ldr	r3, [r1, #0]
 8004344:	4682      	mov	sl, r0
 8004346:	460c      	mov	r4, r1
 8004348:	4690      	mov	r8, r2
 800434a:	d82c      	bhi.n	80043a6 <__ssputs_r+0x6e>
 800434c:	898a      	ldrh	r2, [r1, #12]
 800434e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004352:	d026      	beq.n	80043a2 <__ssputs_r+0x6a>
 8004354:	6965      	ldr	r5, [r4, #20]
 8004356:	6909      	ldr	r1, [r1, #16]
 8004358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800435c:	eba3 0901 	sub.w	r9, r3, r1
 8004360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004364:	1c7b      	adds	r3, r7, #1
 8004366:	444b      	add	r3, r9
 8004368:	106d      	asrs	r5, r5, #1
 800436a:	429d      	cmp	r5, r3
 800436c:	bf38      	it	cc
 800436e:	461d      	movcc	r5, r3
 8004370:	0553      	lsls	r3, r2, #21
 8004372:	d527      	bpl.n	80043c4 <__ssputs_r+0x8c>
 8004374:	4629      	mov	r1, r5
 8004376:	f7ff ff53 	bl	8004220 <_malloc_r>
 800437a:	4606      	mov	r6, r0
 800437c:	b360      	cbz	r0, 80043d8 <__ssputs_r+0xa0>
 800437e:	6921      	ldr	r1, [r4, #16]
 8004380:	464a      	mov	r2, r9
 8004382:	f000 faeb 	bl	800495c <memcpy>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	6126      	str	r6, [r4, #16]
 8004394:	6165      	str	r5, [r4, #20]
 8004396:	444e      	add	r6, r9
 8004398:	eba5 0509 	sub.w	r5, r5, r9
 800439c:	6026      	str	r6, [r4, #0]
 800439e:	60a5      	str	r5, [r4, #8]
 80043a0:	463e      	mov	r6, r7
 80043a2:	42be      	cmp	r6, r7
 80043a4:	d900      	bls.n	80043a8 <__ssputs_r+0x70>
 80043a6:	463e      	mov	r6, r7
 80043a8:	6820      	ldr	r0, [r4, #0]
 80043aa:	4632      	mov	r2, r6
 80043ac:	4641      	mov	r1, r8
 80043ae:	f000 faab 	bl	8004908 <memmove>
 80043b2:	68a3      	ldr	r3, [r4, #8]
 80043b4:	1b9b      	subs	r3, r3, r6
 80043b6:	60a3      	str	r3, [r4, #8]
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	4433      	add	r3, r6
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	2000      	movs	r0, #0
 80043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c4:	462a      	mov	r2, r5
 80043c6:	f000 fad7 	bl	8004978 <_realloc_r>
 80043ca:	4606      	mov	r6, r0
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1e0      	bne.n	8004392 <__ssputs_r+0x5a>
 80043d0:	6921      	ldr	r1, [r4, #16]
 80043d2:	4650      	mov	r0, sl
 80043d4:	f7ff feb8 	bl	8004148 <_free_r>
 80043d8:	230c      	movs	r3, #12
 80043da:	f8ca 3000 	str.w	r3, [sl]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	e7e9      	b.n	80043c0 <__ssputs_r+0x88>

080043ec <_svfiprintf_r>:
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4698      	mov	r8, r3
 80043f2:	898b      	ldrh	r3, [r1, #12]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	b09d      	sub	sp, #116	; 0x74
 80043f8:	4607      	mov	r7, r0
 80043fa:	460d      	mov	r5, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	d50e      	bpl.n	800441e <_svfiprintf_r+0x32>
 8004400:	690b      	ldr	r3, [r1, #16]
 8004402:	b963      	cbnz	r3, 800441e <_svfiprintf_r+0x32>
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	f7ff ff0b 	bl	8004220 <_malloc_r>
 800440a:	6028      	str	r0, [r5, #0]
 800440c:	6128      	str	r0, [r5, #16]
 800440e:	b920      	cbnz	r0, 800441a <_svfiprintf_r+0x2e>
 8004410:	230c      	movs	r3, #12
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	e0d0      	b.n	80045bc <_svfiprintf_r+0x1d0>
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	616b      	str	r3, [r5, #20]
 800441e:	2300      	movs	r3, #0
 8004420:	9309      	str	r3, [sp, #36]	; 0x24
 8004422:	2320      	movs	r3, #32
 8004424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004428:	f8cd 800c 	str.w	r8, [sp, #12]
 800442c:	2330      	movs	r3, #48	; 0x30
 800442e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045d4 <_svfiprintf_r+0x1e8>
 8004432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004436:	f04f 0901 	mov.w	r9, #1
 800443a:	4623      	mov	r3, r4
 800443c:	469a      	mov	sl, r3
 800443e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004442:	b10a      	cbz	r2, 8004448 <_svfiprintf_r+0x5c>
 8004444:	2a25      	cmp	r2, #37	; 0x25
 8004446:	d1f9      	bne.n	800443c <_svfiprintf_r+0x50>
 8004448:	ebba 0b04 	subs.w	fp, sl, r4
 800444c:	d00b      	beq.n	8004466 <_svfiprintf_r+0x7a>
 800444e:	465b      	mov	r3, fp
 8004450:	4622      	mov	r2, r4
 8004452:	4629      	mov	r1, r5
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff ff6f 	bl	8004338 <__ssputs_r>
 800445a:	3001      	adds	r0, #1
 800445c:	f000 80a9 	beq.w	80045b2 <_svfiprintf_r+0x1c6>
 8004460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004462:	445a      	add	r2, fp
 8004464:	9209      	str	r2, [sp, #36]	; 0x24
 8004466:	f89a 3000 	ldrb.w	r3, [sl]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a1 	beq.w	80045b2 <_svfiprintf_r+0x1c6>
 8004470:	2300      	movs	r3, #0
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800447a:	f10a 0a01 	add.w	sl, sl, #1
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	9307      	str	r3, [sp, #28]
 8004482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004486:	931a      	str	r3, [sp, #104]	; 0x68
 8004488:	4654      	mov	r4, sl
 800448a:	2205      	movs	r2, #5
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	4850      	ldr	r0, [pc, #320]	; (80045d4 <_svfiprintf_r+0x1e8>)
 8004492:	f7fb febd 	bl	8000210 <memchr>
 8004496:	9a04      	ldr	r2, [sp, #16]
 8004498:	b9d8      	cbnz	r0, 80044d2 <_svfiprintf_r+0xe6>
 800449a:	06d0      	lsls	r0, r2, #27
 800449c:	bf44      	itt	mi
 800449e:	2320      	movmi	r3, #32
 80044a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044a4:	0711      	lsls	r1, r2, #28
 80044a6:	bf44      	itt	mi
 80044a8:	232b      	movmi	r3, #43	; 0x2b
 80044aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ae:	f89a 3000 	ldrb.w	r3, [sl]
 80044b2:	2b2a      	cmp	r3, #42	; 0x2a
 80044b4:	d015      	beq.n	80044e2 <_svfiprintf_r+0xf6>
 80044b6:	9a07      	ldr	r2, [sp, #28]
 80044b8:	4654      	mov	r4, sl
 80044ba:	2000      	movs	r0, #0
 80044bc:	f04f 0c0a 	mov.w	ip, #10
 80044c0:	4621      	mov	r1, r4
 80044c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044c6:	3b30      	subs	r3, #48	; 0x30
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d94d      	bls.n	8004568 <_svfiprintf_r+0x17c>
 80044cc:	b1b0      	cbz	r0, 80044fc <_svfiprintf_r+0x110>
 80044ce:	9207      	str	r2, [sp, #28]
 80044d0:	e014      	b.n	80044fc <_svfiprintf_r+0x110>
 80044d2:	eba0 0308 	sub.w	r3, r0, r8
 80044d6:	fa09 f303 	lsl.w	r3, r9, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	46a2      	mov	sl, r4
 80044e0:	e7d2      	b.n	8004488 <_svfiprintf_r+0x9c>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	9103      	str	r1, [sp, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfbb      	ittet	lt
 80044ee:	425b      	neglt	r3, r3
 80044f0:	f042 0202 	orrlt.w	r2, r2, #2
 80044f4:	9307      	strge	r3, [sp, #28]
 80044f6:	9307      	strlt	r3, [sp, #28]
 80044f8:	bfb8      	it	lt
 80044fa:	9204      	strlt	r2, [sp, #16]
 80044fc:	7823      	ldrb	r3, [r4, #0]
 80044fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004500:	d10c      	bne.n	800451c <_svfiprintf_r+0x130>
 8004502:	7863      	ldrb	r3, [r4, #1]
 8004504:	2b2a      	cmp	r3, #42	; 0x2a
 8004506:	d134      	bne.n	8004572 <_svfiprintf_r+0x186>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9203      	str	r2, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfb8      	it	lt
 8004514:	f04f 33ff 	movlt.w	r3, #4294967295
 8004518:	3402      	adds	r4, #2
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045e4 <_svfiprintf_r+0x1f8>
 8004520:	7821      	ldrb	r1, [r4, #0]
 8004522:	2203      	movs	r2, #3
 8004524:	4650      	mov	r0, sl
 8004526:	f7fb fe73 	bl	8000210 <memchr>
 800452a:	b138      	cbz	r0, 800453c <_svfiprintf_r+0x150>
 800452c:	9b04      	ldr	r3, [sp, #16]
 800452e:	eba0 000a 	sub.w	r0, r0, sl
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	4082      	lsls	r2, r0
 8004536:	4313      	orrs	r3, r2
 8004538:	3401      	adds	r4, #1
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004540:	4825      	ldr	r0, [pc, #148]	; (80045d8 <_svfiprintf_r+0x1ec>)
 8004542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004546:	2206      	movs	r2, #6
 8004548:	f7fb fe62 	bl	8000210 <memchr>
 800454c:	2800      	cmp	r0, #0
 800454e:	d038      	beq.n	80045c2 <_svfiprintf_r+0x1d6>
 8004550:	4b22      	ldr	r3, [pc, #136]	; (80045dc <_svfiprintf_r+0x1f0>)
 8004552:	bb1b      	cbnz	r3, 800459c <_svfiprintf_r+0x1b0>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	3307      	adds	r3, #7
 8004558:	f023 0307 	bic.w	r3, r3, #7
 800455c:	3308      	adds	r3, #8
 800455e:	9303      	str	r3, [sp, #12]
 8004560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004562:	4433      	add	r3, r6
 8004564:	9309      	str	r3, [sp, #36]	; 0x24
 8004566:	e768      	b.n	800443a <_svfiprintf_r+0x4e>
 8004568:	fb0c 3202 	mla	r2, ip, r2, r3
 800456c:	460c      	mov	r4, r1
 800456e:	2001      	movs	r0, #1
 8004570:	e7a6      	b.n	80044c0 <_svfiprintf_r+0xd4>
 8004572:	2300      	movs	r3, #0
 8004574:	3401      	adds	r4, #1
 8004576:	9305      	str	r3, [sp, #20]
 8004578:	4619      	mov	r1, r3
 800457a:	f04f 0c0a 	mov.w	ip, #10
 800457e:	4620      	mov	r0, r4
 8004580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004584:	3a30      	subs	r2, #48	; 0x30
 8004586:	2a09      	cmp	r2, #9
 8004588:	d903      	bls.n	8004592 <_svfiprintf_r+0x1a6>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0c6      	beq.n	800451c <_svfiprintf_r+0x130>
 800458e:	9105      	str	r1, [sp, #20]
 8004590:	e7c4      	b.n	800451c <_svfiprintf_r+0x130>
 8004592:	fb0c 2101 	mla	r1, ip, r1, r2
 8004596:	4604      	mov	r4, r0
 8004598:	2301      	movs	r3, #1
 800459a:	e7f0      	b.n	800457e <_svfiprintf_r+0x192>
 800459c:	ab03      	add	r3, sp, #12
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	462a      	mov	r2, r5
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <_svfiprintf_r+0x1f4>)
 80045a4:	a904      	add	r1, sp, #16
 80045a6:	4638      	mov	r0, r7
 80045a8:	f3af 8000 	nop.w
 80045ac:	1c42      	adds	r2, r0, #1
 80045ae:	4606      	mov	r6, r0
 80045b0:	d1d6      	bne.n	8004560 <_svfiprintf_r+0x174>
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	065b      	lsls	r3, r3, #25
 80045b6:	f53f af2d 	bmi.w	8004414 <_svfiprintf_r+0x28>
 80045ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045bc:	b01d      	add	sp, #116	; 0x74
 80045be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <_svfiprintf_r+0x1f4>)
 80045ca:	a904      	add	r1, sp, #16
 80045cc:	4638      	mov	r0, r7
 80045ce:	f000 f879 	bl	80046c4 <_printf_i>
 80045d2:	e7eb      	b.n	80045ac <_svfiprintf_r+0x1c0>
 80045d4:	08004a24 	.word	0x08004a24
 80045d8:	08004a2e 	.word	0x08004a2e
 80045dc:	00000000 	.word	0x00000000
 80045e0:	08004339 	.word	0x08004339
 80045e4:	08004a2a 	.word	0x08004a2a

080045e8 <_printf_common>:
 80045e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	4616      	mov	r6, r2
 80045ee:	4699      	mov	r9, r3
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bfb8      	it	lt
 80045fc:	4613      	movlt	r3, r2
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004604:	4607      	mov	r7, r0
 8004606:	460c      	mov	r4, r1
 8004608:	b10a      	cbz	r2, 800460e <_printf_common+0x26>
 800460a:	3301      	adds	r3, #1
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	0699      	lsls	r1, r3, #26
 8004612:	bf42      	ittt	mi
 8004614:	6833      	ldrmi	r3, [r6, #0]
 8004616:	3302      	addmi	r3, #2
 8004618:	6033      	strmi	r3, [r6, #0]
 800461a:	6825      	ldr	r5, [r4, #0]
 800461c:	f015 0506 	ands.w	r5, r5, #6
 8004620:	d106      	bne.n	8004630 <_printf_common+0x48>
 8004622:	f104 0a19 	add.w	sl, r4, #25
 8004626:	68e3      	ldr	r3, [r4, #12]
 8004628:	6832      	ldr	r2, [r6, #0]
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	42ab      	cmp	r3, r5
 800462e:	dc26      	bgt.n	800467e <_printf_common+0x96>
 8004630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004634:	1e13      	subs	r3, r2, #0
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	bf18      	it	ne
 800463a:	2301      	movne	r3, #1
 800463c:	0692      	lsls	r2, r2, #26
 800463e:	d42b      	bmi.n	8004698 <_printf_common+0xb0>
 8004640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004644:	4649      	mov	r1, r9
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	3001      	adds	r0, #1
 800464c:	d01e      	beq.n	800468c <_printf_common+0xa4>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	6922      	ldr	r2, [r4, #16]
 8004652:	f003 0306 	and.w	r3, r3, #6
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf02      	ittt	eq
 800465a:	68e5      	ldreq	r5, [r4, #12]
 800465c:	6833      	ldreq	r3, [r6, #0]
 800465e:	1aed      	subeq	r5, r5, r3
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	bf0c      	ite	eq
 8004664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004668:	2500      	movne	r5, #0
 800466a:	4293      	cmp	r3, r2
 800466c:	bfc4      	itt	gt
 800466e:	1a9b      	subgt	r3, r3, r2
 8004670:	18ed      	addgt	r5, r5, r3
 8004672:	2600      	movs	r6, #0
 8004674:	341a      	adds	r4, #26
 8004676:	42b5      	cmp	r5, r6
 8004678:	d11a      	bne.n	80046b0 <_printf_common+0xc8>
 800467a:	2000      	movs	r0, #0
 800467c:	e008      	b.n	8004690 <_printf_common+0xa8>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4649      	mov	r1, r9
 8004684:	4638      	mov	r0, r7
 8004686:	47c0      	blx	r8
 8004688:	3001      	adds	r0, #1
 800468a:	d103      	bne.n	8004694 <_printf_common+0xac>
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	3501      	adds	r5, #1
 8004696:	e7c6      	b.n	8004626 <_printf_common+0x3e>
 8004698:	18e1      	adds	r1, r4, r3
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	2030      	movs	r0, #48	; 0x30
 800469e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046a2:	4422      	add	r2, r4
 80046a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ac:	3302      	adds	r3, #2
 80046ae:	e7c7      	b.n	8004640 <_printf_common+0x58>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4622      	mov	r2, r4
 80046b4:	4649      	mov	r1, r9
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c0      	blx	r8
 80046ba:	3001      	adds	r0, #1
 80046bc:	d0e6      	beq.n	800468c <_printf_common+0xa4>
 80046be:	3601      	adds	r6, #1
 80046c0:	e7d9      	b.n	8004676 <_printf_common+0x8e>
	...

080046c4 <_printf_i>:
 80046c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	7e0f      	ldrb	r7, [r1, #24]
 80046ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046cc:	2f78      	cmp	r7, #120	; 0x78
 80046ce:	4691      	mov	r9, r2
 80046d0:	4680      	mov	r8, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	469a      	mov	sl, r3
 80046d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046da:	d807      	bhi.n	80046ec <_printf_i+0x28>
 80046dc:	2f62      	cmp	r7, #98	; 0x62
 80046de:	d80a      	bhi.n	80046f6 <_printf_i+0x32>
 80046e0:	2f00      	cmp	r7, #0
 80046e2:	f000 80d4 	beq.w	800488e <_printf_i+0x1ca>
 80046e6:	2f58      	cmp	r7, #88	; 0x58
 80046e8:	f000 80c0 	beq.w	800486c <_printf_i+0x1a8>
 80046ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046f4:	e03a      	b.n	800476c <_printf_i+0xa8>
 80046f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046fa:	2b15      	cmp	r3, #21
 80046fc:	d8f6      	bhi.n	80046ec <_printf_i+0x28>
 80046fe:	a101      	add	r1, pc, #4	; (adr r1, 8004704 <_printf_i+0x40>)
 8004700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004704:	0800475d 	.word	0x0800475d
 8004708:	08004771 	.word	0x08004771
 800470c:	080046ed 	.word	0x080046ed
 8004710:	080046ed 	.word	0x080046ed
 8004714:	080046ed 	.word	0x080046ed
 8004718:	080046ed 	.word	0x080046ed
 800471c:	08004771 	.word	0x08004771
 8004720:	080046ed 	.word	0x080046ed
 8004724:	080046ed 	.word	0x080046ed
 8004728:	080046ed 	.word	0x080046ed
 800472c:	080046ed 	.word	0x080046ed
 8004730:	08004875 	.word	0x08004875
 8004734:	0800479d 	.word	0x0800479d
 8004738:	0800482f 	.word	0x0800482f
 800473c:	080046ed 	.word	0x080046ed
 8004740:	080046ed 	.word	0x080046ed
 8004744:	08004897 	.word	0x08004897
 8004748:	080046ed 	.word	0x080046ed
 800474c:	0800479d 	.word	0x0800479d
 8004750:	080046ed 	.word	0x080046ed
 8004754:	080046ed 	.word	0x080046ed
 8004758:	08004837 	.word	0x08004837
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	602a      	str	r2, [r5, #0]
 8004764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800476c:	2301      	movs	r3, #1
 800476e:	e09f      	b.n	80048b0 <_printf_i+0x1ec>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	0607      	lsls	r7, r0, #24
 8004776:	f103 0104 	add.w	r1, r3, #4
 800477a:	6029      	str	r1, [r5, #0]
 800477c:	d501      	bpl.n	8004782 <_printf_i+0xbe>
 800477e:	681e      	ldr	r6, [r3, #0]
 8004780:	e003      	b.n	800478a <_printf_i+0xc6>
 8004782:	0646      	lsls	r6, r0, #25
 8004784:	d5fb      	bpl.n	800477e <_printf_i+0xba>
 8004786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800478a:	2e00      	cmp	r6, #0
 800478c:	da03      	bge.n	8004796 <_printf_i+0xd2>
 800478e:	232d      	movs	r3, #45	; 0x2d
 8004790:	4276      	negs	r6, r6
 8004792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004796:	485a      	ldr	r0, [pc, #360]	; (8004900 <_printf_i+0x23c>)
 8004798:	230a      	movs	r3, #10
 800479a:	e012      	b.n	80047c2 <_printf_i+0xfe>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	6820      	ldr	r0, [r4, #0]
 80047a0:	1d19      	adds	r1, r3, #4
 80047a2:	6029      	str	r1, [r5, #0]
 80047a4:	0605      	lsls	r5, r0, #24
 80047a6:	d501      	bpl.n	80047ac <_printf_i+0xe8>
 80047a8:	681e      	ldr	r6, [r3, #0]
 80047aa:	e002      	b.n	80047b2 <_printf_i+0xee>
 80047ac:	0641      	lsls	r1, r0, #25
 80047ae:	d5fb      	bpl.n	80047a8 <_printf_i+0xe4>
 80047b0:	881e      	ldrh	r6, [r3, #0]
 80047b2:	4853      	ldr	r0, [pc, #332]	; (8004900 <_printf_i+0x23c>)
 80047b4:	2f6f      	cmp	r7, #111	; 0x6f
 80047b6:	bf0c      	ite	eq
 80047b8:	2308      	moveq	r3, #8
 80047ba:	230a      	movne	r3, #10
 80047bc:	2100      	movs	r1, #0
 80047be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047c2:	6865      	ldr	r5, [r4, #4]
 80047c4:	60a5      	str	r5, [r4, #8]
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	bfa2      	ittt	ge
 80047ca:	6821      	ldrge	r1, [r4, #0]
 80047cc:	f021 0104 	bicge.w	r1, r1, #4
 80047d0:	6021      	strge	r1, [r4, #0]
 80047d2:	b90e      	cbnz	r6, 80047d8 <_printf_i+0x114>
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	d04b      	beq.n	8004870 <_printf_i+0x1ac>
 80047d8:	4615      	mov	r5, r2
 80047da:	fbb6 f1f3 	udiv	r1, r6, r3
 80047de:	fb03 6711 	mls	r7, r3, r1, r6
 80047e2:	5dc7      	ldrb	r7, [r0, r7]
 80047e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047e8:	4637      	mov	r7, r6
 80047ea:	42bb      	cmp	r3, r7
 80047ec:	460e      	mov	r6, r1
 80047ee:	d9f4      	bls.n	80047da <_printf_i+0x116>
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d10b      	bne.n	800480c <_printf_i+0x148>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	07de      	lsls	r6, r3, #31
 80047f8:	d508      	bpl.n	800480c <_printf_i+0x148>
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	6861      	ldr	r1, [r4, #4]
 80047fe:	4299      	cmp	r1, r3
 8004800:	bfde      	ittt	le
 8004802:	2330      	movle	r3, #48	; 0x30
 8004804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800480c:	1b52      	subs	r2, r2, r5
 800480e:	6122      	str	r2, [r4, #16]
 8004810:	f8cd a000 	str.w	sl, [sp]
 8004814:	464b      	mov	r3, r9
 8004816:	aa03      	add	r2, sp, #12
 8004818:	4621      	mov	r1, r4
 800481a:	4640      	mov	r0, r8
 800481c:	f7ff fee4 	bl	80045e8 <_printf_common>
 8004820:	3001      	adds	r0, #1
 8004822:	d14a      	bne.n	80048ba <_printf_i+0x1f6>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	b004      	add	sp, #16
 800482a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f043 0320 	orr.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	4833      	ldr	r0, [pc, #204]	; (8004904 <_printf_i+0x240>)
 8004838:	2778      	movs	r7, #120	; 0x78
 800483a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	6829      	ldr	r1, [r5, #0]
 8004842:	061f      	lsls	r7, r3, #24
 8004844:	f851 6b04 	ldr.w	r6, [r1], #4
 8004848:	d402      	bmi.n	8004850 <_printf_i+0x18c>
 800484a:	065f      	lsls	r7, r3, #25
 800484c:	bf48      	it	mi
 800484e:	b2b6      	uxthmi	r6, r6
 8004850:	07df      	lsls	r7, r3, #31
 8004852:	bf48      	it	mi
 8004854:	f043 0320 	orrmi.w	r3, r3, #32
 8004858:	6029      	str	r1, [r5, #0]
 800485a:	bf48      	it	mi
 800485c:	6023      	strmi	r3, [r4, #0]
 800485e:	b91e      	cbnz	r6, 8004868 <_printf_i+0x1a4>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	f023 0320 	bic.w	r3, r3, #32
 8004866:	6023      	str	r3, [r4, #0]
 8004868:	2310      	movs	r3, #16
 800486a:	e7a7      	b.n	80047bc <_printf_i+0xf8>
 800486c:	4824      	ldr	r0, [pc, #144]	; (8004900 <_printf_i+0x23c>)
 800486e:	e7e4      	b.n	800483a <_printf_i+0x176>
 8004870:	4615      	mov	r5, r2
 8004872:	e7bd      	b.n	80047f0 <_printf_i+0x12c>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	6826      	ldr	r6, [r4, #0]
 8004878:	6961      	ldr	r1, [r4, #20]
 800487a:	1d18      	adds	r0, r3, #4
 800487c:	6028      	str	r0, [r5, #0]
 800487e:	0635      	lsls	r5, r6, #24
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	d501      	bpl.n	8004888 <_printf_i+0x1c4>
 8004884:	6019      	str	r1, [r3, #0]
 8004886:	e002      	b.n	800488e <_printf_i+0x1ca>
 8004888:	0670      	lsls	r0, r6, #25
 800488a:	d5fb      	bpl.n	8004884 <_printf_i+0x1c0>
 800488c:	8019      	strh	r1, [r3, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	4615      	mov	r5, r2
 8004894:	e7bc      	b.n	8004810 <_printf_i+0x14c>
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	1d1a      	adds	r2, r3, #4
 800489a:	602a      	str	r2, [r5, #0]
 800489c:	681d      	ldr	r5, [r3, #0]
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4628      	mov	r0, r5
 80048a4:	f7fb fcb4 	bl	8000210 <memchr>
 80048a8:	b108      	cbz	r0, 80048ae <_printf_i+0x1ea>
 80048aa:	1b40      	subs	r0, r0, r5
 80048ac:	6060      	str	r0, [r4, #4]
 80048ae:	6863      	ldr	r3, [r4, #4]
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	2300      	movs	r3, #0
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	e7aa      	b.n	8004810 <_printf_i+0x14c>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	462a      	mov	r2, r5
 80048be:	4649      	mov	r1, r9
 80048c0:	4640      	mov	r0, r8
 80048c2:	47d0      	blx	sl
 80048c4:	3001      	adds	r0, #1
 80048c6:	d0ad      	beq.n	8004824 <_printf_i+0x160>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	079b      	lsls	r3, r3, #30
 80048cc:	d413      	bmi.n	80048f6 <_printf_i+0x232>
 80048ce:	68e0      	ldr	r0, [r4, #12]
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	4298      	cmp	r0, r3
 80048d4:	bfb8      	it	lt
 80048d6:	4618      	movlt	r0, r3
 80048d8:	e7a6      	b.n	8004828 <_printf_i+0x164>
 80048da:	2301      	movs	r3, #1
 80048dc:	4632      	mov	r2, r6
 80048de:	4649      	mov	r1, r9
 80048e0:	4640      	mov	r0, r8
 80048e2:	47d0      	blx	sl
 80048e4:	3001      	adds	r0, #1
 80048e6:	d09d      	beq.n	8004824 <_printf_i+0x160>
 80048e8:	3501      	adds	r5, #1
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	9903      	ldr	r1, [sp, #12]
 80048ee:	1a5b      	subs	r3, r3, r1
 80048f0:	42ab      	cmp	r3, r5
 80048f2:	dcf2      	bgt.n	80048da <_printf_i+0x216>
 80048f4:	e7eb      	b.n	80048ce <_printf_i+0x20a>
 80048f6:	2500      	movs	r5, #0
 80048f8:	f104 0619 	add.w	r6, r4, #25
 80048fc:	e7f5      	b.n	80048ea <_printf_i+0x226>
 80048fe:	bf00      	nop
 8004900:	08004a35 	.word	0x08004a35
 8004904:	08004a46 	.word	0x08004a46

08004908 <memmove>:
 8004908:	4288      	cmp	r0, r1
 800490a:	b510      	push	{r4, lr}
 800490c:	eb01 0402 	add.w	r4, r1, r2
 8004910:	d902      	bls.n	8004918 <memmove+0x10>
 8004912:	4284      	cmp	r4, r0
 8004914:	4623      	mov	r3, r4
 8004916:	d807      	bhi.n	8004928 <memmove+0x20>
 8004918:	1e43      	subs	r3, r0, #1
 800491a:	42a1      	cmp	r1, r4
 800491c:	d008      	beq.n	8004930 <memmove+0x28>
 800491e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004926:	e7f8      	b.n	800491a <memmove+0x12>
 8004928:	4402      	add	r2, r0
 800492a:	4601      	mov	r1, r0
 800492c:	428a      	cmp	r2, r1
 800492e:	d100      	bne.n	8004932 <memmove+0x2a>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800493a:	e7f7      	b.n	800492c <memmove+0x24>

0800493c <_sbrk_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4d06      	ldr	r5, [pc, #24]	; (8004958 <_sbrk_r+0x1c>)
 8004940:	2300      	movs	r3, #0
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	f7fc fcec 	bl	8001324 <_sbrk>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_sbrk_r+0x1a>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_sbrk_r+0x1a>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20000324 	.word	0x20000324

0800495c <memcpy>:
 800495c:	440a      	add	r2, r1
 800495e:	4291      	cmp	r1, r2
 8004960:	f100 33ff 	add.w	r3, r0, #4294967295
 8004964:	d100      	bne.n	8004968 <memcpy+0xc>
 8004966:	4770      	bx	lr
 8004968:	b510      	push	{r4, lr}
 800496a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004972:	4291      	cmp	r1, r2
 8004974:	d1f9      	bne.n	800496a <memcpy+0xe>
 8004976:	bd10      	pop	{r4, pc}

08004978 <_realloc_r>:
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	4680      	mov	r8, r0
 800497e:	4614      	mov	r4, r2
 8004980:	460e      	mov	r6, r1
 8004982:	b921      	cbnz	r1, 800498e <_realloc_r+0x16>
 8004984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	4611      	mov	r1, r2
 800498a:	f7ff bc49 	b.w	8004220 <_malloc_r>
 800498e:	b92a      	cbnz	r2, 800499c <_realloc_r+0x24>
 8004990:	f7ff fbda 	bl	8004148 <_free_r>
 8004994:	4625      	mov	r5, r4
 8004996:	4628      	mov	r0, r5
 8004998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800499c:	f000 f81b 	bl	80049d6 <_malloc_usable_size_r>
 80049a0:	4284      	cmp	r4, r0
 80049a2:	4607      	mov	r7, r0
 80049a4:	d802      	bhi.n	80049ac <_realloc_r+0x34>
 80049a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049aa:	d812      	bhi.n	80049d2 <_realloc_r+0x5a>
 80049ac:	4621      	mov	r1, r4
 80049ae:	4640      	mov	r0, r8
 80049b0:	f7ff fc36 	bl	8004220 <_malloc_r>
 80049b4:	4605      	mov	r5, r0
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0ed      	beq.n	8004996 <_realloc_r+0x1e>
 80049ba:	42bc      	cmp	r4, r7
 80049bc:	4622      	mov	r2, r4
 80049be:	4631      	mov	r1, r6
 80049c0:	bf28      	it	cs
 80049c2:	463a      	movcs	r2, r7
 80049c4:	f7ff ffca 	bl	800495c <memcpy>
 80049c8:	4631      	mov	r1, r6
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7ff fbbc 	bl	8004148 <_free_r>
 80049d0:	e7e1      	b.n	8004996 <_realloc_r+0x1e>
 80049d2:	4635      	mov	r5, r6
 80049d4:	e7df      	b.n	8004996 <_realloc_r+0x1e>

080049d6 <_malloc_usable_size_r>:
 80049d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049da:	1f18      	subs	r0, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bfbc      	itt	lt
 80049e0:	580b      	ldrlt	r3, [r1, r0]
 80049e2:	18c0      	addlt	r0, r0, r3
 80049e4:	4770      	bx	lr
	...

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
