
Ljetne_prakse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000009c  080051dc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080051dc  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4b8  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251f  00000000  00000000  0002d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d2  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245e3  00000000  00000000  00030f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113a6  00000000  00000000  0005551d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b43  00000000  00000000  000668c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003724  00000000  00000000  00140408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00143b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004fc0 	.word	0x08004fc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08004fc0 	.word	0x08004fc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <InitializeAHT20>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]

	HAL_Delay(20);
 80005b6:	2014      	movs	r0, #20
 80005b8:	f000 ffd6 	bl	8001568 <HAL_Delay>

	aht20_state = InitializeAHT20I2C();
 80005bc:	f000 f96e 	bl	800089c <InitializeAHT20I2C>
 80005c0:	6078      	str	r0, [r7, #4]
	//	ASSERT(ahr20_state != AHT20_OK);

	HAL_Delay(40);
 80005c2:	2028      	movs	r0, #40	; 0x28
 80005c4:	f000 ffd0 	bl	8001568 <HAL_Delay>

	/* Initialize the sensor until calibration is successful */
	while(AHT20_checkCalibration() == false)
 80005c8:	e002      	b.n	80005d0 <InitializeAHT20+0x24>
	{
		aht20_state = AHT20_sensorInit();
 80005ca:	f000 f80f 	bl	80005ec <AHT20_sensorInit>
 80005ce:	6078      	str	r0, [r7, #4]
	while(AHT20_checkCalibration() == false)
 80005d0:	f000 f82a 	bl	8000628 <AHT20_checkCalibration>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f4      	bne.n	80005ca <InitializeAHT20+0x1e>
	}

	//	ASSERT(aht20_state != AHT20_OK);
	(void)aht20_state; // Adding this to avoid warnings until assert is implemented

}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <AHT20_sensorInit>:

static int AHT20_sensorInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	/* reg[3] holds the initialization sequence */
	int aht20_state = AHT20_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]

	uint8_t reg[3] = {0xBE, 0x08, 0x00};
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <AHT20_sensorInit+0x38>)
 80005f8:	463b      	mov	r3, r7
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	8019      	strh	r1, [r3, #0]
 8000600:	3302      	adds	r3, #2
 8000602:	0c12      	lsrs	r2, r2, #16
 8000604:	701a      	strb	r2, [r3, #0]
	aht20_state = TransmitI2CDataToAHT20(reg, 3);
 8000606:	463b      	mov	r3, r7
 8000608:	2103      	movs	r1, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f98e 	bl	800092c <TransmitI2CDataToAHT20>
 8000610:	6078      	str	r0, [r7, #4]
	HAL_Delay(10); // Wait 10ms for initialization
 8000612:	200a      	movs	r0, #10
 8000614:	f000 ffa8 	bl	8001568 <HAL_Delay>

	return aht20_state;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08004fd8 	.word	0x08004fd8

08000628 <AHT20_checkCalibration>:

static bool AHT20_checkCalibration(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    uint8_t statusReg = 0x71;
 800062e:	2371      	movs	r3, #113	; 0x71
 8000630:	71fb      	strb	r3, [r7, #7]
    uint8_t cal; // Result byte
    TransmitI2CDataToAHT20(&statusReg, 1);
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f978 	bl	800092c <TransmitI2CDataToAHT20>
    ReceiveI2CDataFromAHT20(&cal, 1);
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f98f 	bl	8000964 <ReceiveI2CDataFromAHT20>

    return ((cal >> 3) & 1) == 1; // Check 4th bit is equal to 1
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <AHT20_triggerMeasurement>:

void AHT20_triggerMeasurement(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
	int aht20_state = AHT20_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

    while(AHT20_checkCalibration() == false) {
 800066e:	e002      	b.n	8000676 <AHT20_triggerMeasurement+0x12>
    	aht20_state = AHT20_sensorInit();
 8000670:	f7ff ffbc 	bl	80005ec <AHT20_sensorInit>
 8000674:	6178      	str	r0, [r7, #20]
    while(AHT20_checkCalibration() == false) {
 8000676:	f7ff ffd7 	bl	8000628 <AHT20_checkCalibration>
 800067a:	4603      	mov	r3, r0
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <AHT20_triggerMeasurement+0xc>
    }

    uint8_t measureCommand[3] = {0xAC, 0x33, 0x00};
 8000686:	4a3d      	ldr	r2, [pc, #244]	; (800077c <AHT20_triggerMeasurement+0x118>)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	4611      	mov	r1, r2
 8000690:	8019      	strh	r1, [r3, #0]
 8000692:	3302      	adds	r3, #2
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	701a      	strb	r2, [r3, #0]
    uint8_t status; // result status
    uint8_t data[6]; // data array

    TransmitI2CDataToAHT20(measureCommand, 3);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f944 	bl	800092c <TransmitI2CDataToAHT20>
    HAL_Delay(80); // Wait for measurement
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f000 ff5f 	bl	8001568 <HAL_Delay>

    ReceiveI2CDataFromAHT20(&status, 1); // Read status byte
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f958 	bl	8000964 <ReceiveI2CDataFromAHT20>

    // Wait for status to be ready before continuing
    while (((status >> 7) & 1) != 0) {
 80006b4:	e004      	b.n	80006c0 <AHT20_triggerMeasurement+0x5c>
        //printf("Waiting for read to complete\n");
        ReceiveI2CDataFromAHT20(&status, 1);
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f952 	bl	8000964 <ReceiveI2CDataFromAHT20>
    while (((status >> 7) & 1) != 0) {
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	09db      	lsrs	r3, r3, #7
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f3      	bne.n	80006b6 <AHT20_triggerMeasurement+0x52>
    }

    aht20_state = ReceiveI2CDataFromAHT20(data, 6); // Read all data
 80006ce:	463b      	mov	r3, r7
 80006d0:	2106      	movs	r1, #6
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f946 	bl	8000964 <ReceiveI2CDataFromAHT20>
 80006d8:	6178      	str	r0, [r7, #20]
    //	ASSERT(aht20_state != AHT20_OK);

    // Convert data for reading and store in variable

    uint32_t humidity = data[1];
 80006da:	787b      	ldrb	r3, [r7, #1]
 80006dc:	613b      	str	r3, [r7, #16]
    humidity <<= 8;
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	613b      	str	r3, [r7, #16]
    humidity |= data[2];
 80006e4:	78bb      	ldrb	r3, [r7, #2]
 80006e6:	461a      	mov	r2, r3
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
    humidity <<= 4;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
    humidity |= data[3] >> 4;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	4313      	orrs	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
    AHT20_interface.hum_val = ((float)humidity * 100) / 1048576;
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800070c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000780 <AHT20_triggerMeasurement+0x11c>
 8000710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000714:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000784 <AHT20_triggerMeasurement+0x120>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <AHT20_triggerMeasurement+0x124>)
 800071e:	edc3 7a04 	vstr	s15, [r3, #16]

    uint32_t temp = data[3] & 0x0F;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	60fb      	str	r3, [r7, #12]
    temp |= data[4];
 8000730:	793b      	ldrb	r3, [r7, #4]
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4313      	orrs	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
    temp <<= 8;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	60fb      	str	r3, [r7, #12]
    temp |= data[5];
 8000740:	797b      	ldrb	r3, [r7, #5]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
    AHT20_interface.temp_val = ((float)temp * 200 / 1048576) - 50;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000754:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800078c <AHT20_triggerMeasurement+0x128>
 8000758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800075c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000784 <AHT20_triggerMeasurement+0x120>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000790 <AHT20_triggerMeasurement+0x12c>
 8000768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <AHT20_triggerMeasurement+0x124>)
 800076e:	edc3 7a03 	vstr	s15, [r3, #12]

    (void)aht20_state; // Adding this to avoid warnings until assert is implemented
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	08004fdc 	.word	0x08004fdc
 8000780:	42c80000 	.word	0x42c80000
 8000784:	49800000 	.word	0x49800000
 8000788:	20000000 	.word	0x20000000
 800078c:	43480000 	.word	0x43480000
 8000790:	42480000 	.word	0x42480000

08000794 <GetTemperatureValue>:

static int GetTemperatureValue(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 8000798:	f7ff ff64 	bl	8000664 <AHT20_triggerMeasurement>

	return AHT20_interface.temp_val;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <GetTemperatureValue+0x1c>)
 800079e:	edd3 7a03 	vldr	s15, [r3, #12]
 80007a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a6:	ee17 3a90 	vmov	r3, s15
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000

080007b4 <GetHumidityValue>:

static int GetHumidityValue(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	AHT20_triggerMeasurement();
 80007b8:	f7ff ff54 	bl	8000664 <AHT20_triggerMeasurement>

	return AHT20_interface.hum_val;
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <GetHumidityValue+0x1c>)
 80007be:	edd3 7a04 	vldr	s15, [r3, #16]
 80007c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c6:	ee17 3a90 	vmov	r3, s15
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000

080007d4 <GetAHT20Interface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

AHT20_t *GetAHT20Interface(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return &AHT20_interface;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <GetAHT20Interface+0x10>)
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000000 	.word	0x20000000

080007e8 <InitializeAHT20I2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeAHT20I2CGPIOPins(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a26      	ldr	r2, [pc, #152]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
	//   PC9     ------> I2C3_SDA
	//   PA8     ------> I2C3_SCL

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SDA_PIN_AHT20;
 8000826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082a:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 8000838:	2304      	movs	r3, #4
 800083a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SDA, &gpio);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4814      	ldr	r0, [pc, #80]	; (8000894 <InitializeAHT20I2CGPIOPins+0xac>)
 8000844:	f000 ff9a 	bl	800177c <HAL_GPIO_Init>

	gpio.Pin 		= I2C_SCL_PIN_AHT20;
 8000848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084c:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C3;
 800085a:	2304      	movs	r3, #4
 800085c:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_AHT20_SCL, &gpio);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <InitializeAHT20I2CGPIOPins+0xb0>)
 8000866:	f000 ff89 	bl	800177c <HAL_GPIO_Init>

	__HAL_RCC_I2C3_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 8000874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <InitializeAHT20I2CGPIOPins+0xa8>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020800 	.word	0x40020800
 8000898:	40020000 	.word	0x40020000

0800089c <InitializeAHT20I2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeAHT20I2C(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	InitializeAHT20I2CGPIOPins();
 80008a2:	f7ff ffa1 	bl	80007e8 <InitializeAHT20I2CGPIOPins>

	__I2C3_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <InitializeAHT20I2C+0x80>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a1b      	ldr	r2, [pc, #108]	; (800091c <InitializeAHT20I2C+0x80>)
 80008b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <InitializeAHT20I2C+0x80>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

	i2chandle2.Mode 				= HAL_I2C_MODE_MASTER;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle2.Instance 			= I2C3;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <InitializeAHT20I2C+0x88>)
 80008ce:	601a      	str	r2, [r3, #0]
	i2chandle2.Init.ClockSpeed 		= 100000;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <InitializeAHT20I2C+0x8c>)
 80008d4:	605a      	str	r2, [r3, #4]
	i2chandle2.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
	i2chandle2.Init.OwnAddress1 	= 0x00;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
	i2chandle2.Init.OwnAddress2		= 0x00;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
	i2chandle2.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ee:	611a      	str	r2, [r3, #16]
	i2chandle2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
	i2chandle2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
	i2chandle2.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <InitializeAHT20I2C+0x84>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle2) != HAL_OK)
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <InitializeAHT20I2C+0x84>)
 8000904:	f001 f8e8 	bl	8001ad8 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <InitializeAHT20I2C+0x76>
	{
		return AHT20_ERROR_I2C_NOT_INITALIZED;
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <InitializeAHT20I2C+0x78>
	}

	return AHT20_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	200000b8 	.word	0x200000b8
 8000924:	40005c00 	.word	0x40005c00
 8000928:	000186a0 	.word	0x000186a0

0800092c <TransmitI2CDataToAHT20>:

int TransmitI2CDataToAHT20(uint8_t *pdata, uint8_t length)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&i2chandle2,
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	b29b      	uxth	r3, r3
 800093c:	2264      	movs	r2, #100	; 0x64
 800093e:	9200      	str	r2, [sp, #0]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2170      	movs	r1, #112	; 0x70
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <TransmitI2CDataToAHT20+0x34>)
 8000946:	f001 fa0b 	bl	8001d60 <HAL_I2C_Master_Transmit>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <TransmitI2CDataToAHT20+0x28>
								(I2C_SLAVE_ADDRESS_AHT20 << 1),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8000950:	2303      	movs	r3, #3
 8000952:	e000      	b.n	8000956 <TransmitI2CDataToAHT20+0x2a>
	}

	return AHT20_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000b8 	.word	0x200000b8

08000964 <ReceiveI2CDataFromAHT20>:

int ReceiveI2CDataFromAHT20(uint8_t *pdata, uint8_t length)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Receive(&i2chandle2,
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	b29b      	uxth	r3, r3
 8000974:	2264      	movs	r2, #100	; 0x64
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	2171      	movs	r1, #113	; 0x71
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <ReceiveI2CDataFromAHT20+0x34>)
 800097e:	f001 faed 	bl	8001f5c <HAL_I2C_Master_Receive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <ReceiveI2CDataFromAHT20+0x28>
								((I2C_SLAVE_ADDRESS_AHT20 << 1) | 0x01),
								pdata,
								length,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return AHT20_ERROR_TRASMIT_ERROR;
 8000988:	2303      	movs	r3, #3
 800098a:	e000      	b.n	800098e <ReceiveI2CDataFromAHT20+0x2a>
	}

	return AHT20_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000b8 	.word	0x200000b8

0800099c <AHT20Init>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void AHT20Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 80009a2:	f7ff ff17 	bl	80007d4 <GetAHT20Interface>
 80009a6:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	paht20->init();
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <AHT20_GetTemp>:

int AHT20_GetTemp(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
	AHT20_t *paht20 = GetAHT20Interface();
 80009bc:	f7ff ff0a 	bl	80007d4 <GetAHT20Interface>
 80009c0:	6078      	str	r0, [r7, #4]

//	ASSERT(paht20 == NULL);

	return paht20->get_temp();
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4798      	blx	r3
 80009c8:	4603      	mov	r3, r0

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <SendToLCD>:
/* ----------------------------------------------------------------------------------- */
/* Private function definitions ------------------------------------------------------ */
/* ----------------------------------------------------------------------------------- */

static int SendToLCD(lcd_msg_type_t msg_type, char pdata)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	460a      	mov	r2, r1
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	4613      	mov	r3, r2
 80009e0:	71bb      	strb	r3, [r7, #6]
	int lcd_state = LCD_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
	char buffer[I2C_MSG_BUFFER_SIZE] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	813b      	strh	r3, [r7, #8]

	switch (msg_type)
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <SendToLCD+0x24>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <SendToLCD+0x2e>
			buffer[0] = 0x40;
			buffer[1] = pdata;
		break;

		default:
		break;
 80009f4:	e009      	b.n	8000a0a <SendToLCD+0x38>
			buffer[0] = 0x00;
 80009f6:	2300      	movs	r3, #0
 80009f8:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	727b      	strb	r3, [r7, #9]
		break;
 80009fe:	e004      	b.n	8000a0a <SendToLCD+0x38>
			buffer[0] = 0x40;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	723b      	strb	r3, [r7, #8]
			buffer[1] = pdata;
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	727b      	strb	r3, [r7, #9]
		break;
 8000a08:	bf00      	nop
	}

	if (TransmitI2CDataToLCD(buffer) != 0)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f938 	bl	8000c84 <TransmitI2CDataToLCD>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SendToLCD+0x4c>
	{
		lcd_state = LCD_ERROR_TRASMIT_ERROR;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <InitializeLCD>:

static void InitializeLCD(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]

	lcd_state = InitializeLCDI2C();
 8000a32:	f000 f8df 	bl	8000bf4 <InitializeLCDI2C>
 8000a36:	6078      	str	r0, [r7, #4]

//	/* Start of initialization commands --- */
//	This LCD initializes the basic configuration by it's self
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01); /* Screen clear */
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ffc9 	bl	80009d2 <SendToLCD>
 8000a40:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fd90 	bl	8001568 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x38); /* 8-bit bus, 2-line display, 5x8 dot format */
 8000a48:	2138      	movs	r1, #56	; 0x38
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ffc1 	bl	80009d2 <SendToLCD>
 8000a50:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a52:	2032      	movs	r0, #50	; 0x32
 8000a54:	f000 fd88 	bl	8001568 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x0C); /* Display switch: Display on, cursor off, blink off */
 8000a58:	210c      	movs	r1, #12
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ffb9 	bl	80009d2 <SendToLCD>
 8000a60:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a62:	2032      	movs	r0, #50	; 0x32
 8000a64:	f000 fd80 	bl	8001568 <HAL_Delay>
//	/* ------------------------------------ */
	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x06); /* Entry mode :  increment by 1, no display shift*/
 8000a68:	2106      	movs	r1, #6
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffb1 	bl	80009d2 <SendToLCD>
 8000a70:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000a72:	2032      	movs	r0, #50	; 0x32
 8000a74:	f000 fd78 	bl	8001568 <HAL_Delay>

//	ASSERT(lcd_state != LCD_OK);

	HAL_Delay(1000);
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f000 fd74 	bl	8001568 <HAL_Delay>

	lcd_state = ClearLCD();
 8000a80:	f000 f860 	bl	8000b44 <ClearLCD>
 8000a84:	6078      	str	r0, [r7, #4]

//	ASSERT(lcd_state != LCD_OK);
	(void)lcd_state;
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <SendDataToLCD>:

static int SendDataToLCD(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	int lcd_state = LCD_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]

	while(lcd_interface.buffer[i])
 8000a9e:	e011      	b.n	8000ac4 <SendDataToLCD+0x34>
	{
		lcd_state = SendToLCD(LCD_MSG_TYPE_DATA, lcd_interface.buffer[i]);
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <SendDataToLCD+0x54>)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff ff91 	bl	80009d2 <SendToLCD>
 8000ab0:	6078      	str	r0, [r7, #4]
		i++;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]

		if (lcd_state != LCD_OK)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d109      	bne.n	8000ad2 <SendDataToLCD+0x42>
		{
			break;
		}

		if (i >= LCD_MAX_NUMBER_OF_COLUMNS)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	dc08      	bgt.n	8000ad6 <SendDataToLCD+0x46>
	while(lcd_interface.buffer[i])
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SendDataToLCD+0x54>)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1e7      	bne.n	8000aa0 <SendDataToLCD+0x10>
 8000ad0:	e002      	b.n	8000ad8 <SendDataToLCD+0x48>
			break;
 8000ad2:	bf00      	nop
 8000ad4:	e000      	b.n	8000ad8 <SendDataToLCD+0x48>
		{
			break;
 8000ad6:	bf00      	nop
		}
	}

	return lcd_state;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000014 	.word	0x20000014

08000ae8 <MoveLCDCursor>:

static int MoveLCDCursor(int row, int col)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	int lcd_state = LCD_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
	uint8_t location = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	72fb      	strb	r3, [r7, #11]

	switch (row)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <MoveLCDCursor+0x20>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d007      	beq.n	8000b16 <MoveLCDCursor+0x2e>
						LCD_SECOND_ROW_BASE_ADDRESS |
						col;
		break;

		default:
		break;
 8000b06:	e00d      	b.n	8000b24 <MoveLCDCursor+0x3c>
						LCD_FIRST_ROW_BASE_ADDRESS |
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b10:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8000b12:	72fb      	strb	r3, [r7, #11]
		break;
 8000b14:	e006      	b.n	8000b24 <MoveLCDCursor+0x3c>
						LCD_SECOND_ROW_BASE_ADDRESS |
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b1e:	b25b      	sxtb	r3, r3
			location = 	0x80 |
 8000b20:	72fb      	strb	r3, [r7, #11]
		break;
 8000b22:	bf00      	nop
	}

	lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, location);
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	4619      	mov	r1, r3
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff52 	bl	80009d2 <SendToLCD>
 8000b2e:	60f8      	str	r0, [r7, #12]

	if (lcd_state != LCD_OK)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MoveLCDCursor+0x52>
	{
		lcd_state = LCD_ERROR_CURSOR_ERROR;
 8000b36:	2305      	movs	r3, #5
 8000b38:	60fb      	str	r3, [r7, #12]
	}

	return lcd_state;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ClearLCD>:

static int ClearLCD(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	int lcd_state = SendToLCD(LCD_MSG_TYPE_COMMAND, 0x01);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff40 	bl	80009d2 <SendToLCD>
 8000b52:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fd07 	bl	8001568 <HAL_Delay>

	if (lcd_state != LCD_OK)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <ClearLCD+0x20>
	{
		lcd_state = LCD_ERROR_CLEAR_LCD_ERROR;
 8000b60:	2304      	movs	r3, #4
 8000b62:	607b      	str	r3, [r7, #4]
	}

	return lcd_state;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <GetLCDInterface>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

lcd_t *GetLCDInterface(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	return &lcd_interface;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <GetLCDInterface+0x10>)
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000014 	.word	0x20000014

08000b84 <InitializeLCDI2CGPIOPins>:
/* ----------------------------------------------------------------------------------- */
/* Static function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

static void InitializeLCDI2CGPIOPins(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio;

	gpio.Pin 		= I2C_SCL_PIN_LCD | I2C_SDA_PIN_LCD;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	60fb      	str	r3, [r7, #12]
	gpio.Pull 		= GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
	gpio.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	61bb      	str	r3, [r7, #24]
	gpio.Mode 		= GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
	gpio.Alternate 	= GPIO_AF4_I2C1;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(I2C_PORT_LCD, &gpio);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <InitializeLCDI2CGPIOPins+0x6c>)
 8000bc4:	f000 fdda 	bl	800177c <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <InitializeLCDI2CGPIOPins+0x68>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <InitializeLCDI2C>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

int InitializeLCDI2C(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	InitializeLCDI2CGPIOPins();
 8000bfa:	f7ff ffc3 	bl	8000b84 <InitializeLCDI2CGPIOPins>

	__I2C1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <InitializeLCDI2C+0x80>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <InitializeLCDI2C+0x80>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <InitializeLCDI2C+0x80>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

	i2chandle.Mode 					= HAL_I2C_MODE_MASTER;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2chandle.Instance 				= I2C1;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c24:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <InitializeLCDI2C+0x88>)
 8000c26:	601a      	str	r2, [r3, #0]
	i2chandle.Init.ClockSpeed 		= 100000;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <InitializeLCDI2C+0x8c>)
 8000c2c:	605a      	str	r2, [r3, #4]
	i2chandle.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
	i2chandle.Init.OwnAddress1 		= 0x00;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
	i2chandle.Init.OwnAddress2		= 0x00;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
	i2chandle.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
	i2chandle.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
	i2chandle.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
	i2chandle.Init.NoStretchMode 	= I2C_NOSTRETCH_ENABLE;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&i2chandle) != HAL_OK)
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <InitializeLCDI2C+0x84>)
 8000c5c:	f000 ff3c 	bl	8001ad8 <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <InitializeLCDI2C+0x76>
	{
		return LCD_ERROR_I2C_NOT_INITALIZED;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <InitializeLCDI2C+0x78>
	}

	return LCD_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	2000010c 	.word	0x2000010c
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	000186a0 	.word	0x000186a0

08000c84 <TransmitI2CDataToLCD>:

int TransmitI2CDataToLCD(char *pdata)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_Master_Transmit(&i2chandle,
 8000c8c:	2364      	movs	r3, #100	; 0x64
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2302      	movs	r3, #2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	217c      	movs	r1, #124	; 0x7c
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <TransmitI2CDataToLCD+0x2c>)
 8000c98:	f001 f862 	bl	8001d60 <HAL_I2C_Master_Transmit>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <TransmitI2CDataToLCD+0x22>
								I2C_SLAVE_ADDRESS_LCD,
								(uint8_t *)pdata,
								I2C_MSG__SIZE,
								I2C_TRANSMIT_TIMEOUT) != HAL_OK)
	{
		return LCD_ERROR_TRASMIT_ERROR;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e000      	b.n	8000ca8 <TransmitI2CDataToLCD+0x24>
	}

	return LCD_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000010c 	.word	0x2000010c

08000cb4 <LCDInit>:
/* ----------------------------------------------------------------------------------- */
/* Public function definitions ------------------------------------------------------- */
/* ----------------------------------------------------------------------------------- */

void LCDInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	lcd_t *plcd = GetLCDInterface();
 8000cba:	f7ff ff59 	bl	8000b70 <GetLCDInterface>
 8000cbe:	6078      	str	r0, [r7, #4]

//	ASSERT(plcd == NULL);

	memset(plcd->buffer, 0x00, LCD_MAX_NUMBER_OF_COLUMNS);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 f999 	bl	8003ffe <memset>

	plcd->init();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	4798      	blx	r3
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <LCDWriteData>:

void LCDWriteData(int row, int col, char *pdata)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	int lcd_state = LCD_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	lcd_t *plcd = GetLCDInterface();
 8000cec:	f7ff ff40 	bl	8000b70 <GetLCDInterface>
 8000cf0:	6138      	str	r0, [r7, #16]

//	ASSERT(plcd == NULL);

	if ( (row >= LCD_MAX_NUMBER_OF_ROWS) ||
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	dc02      	bgt.n	8000cfe <LCDWriteData+0x22>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	dd08      	ble.n	8000d10 <LCDWriteData+0x34>
		 (col >= LCD_MAX_NUMBER_OF_COLUMNS) )
	{
		LOG_ERR("Krivo postavljeni red ili stupac"
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <LCDWriteData+0x74>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4913      	ldr	r1, [pc, #76]	; (8000d54 <LCDWriteData+0x78>)
 8000d08:	4813      	ldr	r0, [pc, #76]	; (8000d58 <LCDWriteData+0x7c>)
 8000d0a:	f003 f84d 	bl	8003da8 <iprintf>
				"\n\tRedak: %d"
				"\n\rStupac: %d",
				row, col);
		return;
 8000d0e:	e01b      	b.n	8000d48 <LCDWriteData+0x6c>
	}

	sprintf(plcd->buffer, pdata);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 f90f 	bl	8003f38 <siprintf>

	lcd_state = plcd->clear_data();
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4798      	blx	r3
 8000d20:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->move_cursor(row, col);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	4798      	blx	r3
 8000d2c:	6178      	str	r0, [r7, #20]
	lcd_state = plcd->send_data();
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4798      	blx	r3
 8000d34:	6178      	str	r0, [r7, #20]

	if (lcd_state != LCD_OK)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <LCDWriteData+0x6c>
	{
		LOG_ERR("Nije uspjesno poslana poruka prema LCDu"
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <LCDWriteData+0x74>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4904      	ldr	r1, [pc, #16]	; (8000d54 <LCDWriteData+0x78>)
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <LCDWriteData+0x80>)
 8000d44:	f003 f830 	bl	8003da8 <iprintf>
				"\n\tError: %d",
				lcd_state);
	}
}
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08004ff0 	.word	0x08004ff0
 8000d54:	08005000 	.word	0x08005000
 8000d58:	08005004 	.word	0x08005004
 8000d5c:	0800504c 	.word	0x0800504c

08000d60 <log_uart_init>:
void log_uart_init_pins(UART_HandleTypeDef* huart);

UART_HandleTypeDef log_uart_handle;

void log_uart_init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	__HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <log_uart_init+0x7c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <log_uart_init+0x7c>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <log_uart_init+0x7c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

	log_uart_handle.Instance 			= USART2;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <log_uart_init+0x80>)
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <log_uart_init+0x84>)
 8000d86:	601a      	str	r2, [r3, #0]
	log_uart_handle.Init.BaudRate 		= 921600;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <log_uart_init+0x80>)
 8000d8a:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d8e:	605a      	str	r2, [r3, #4]
	log_uart_handle.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <log_uart_init+0x80>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
	log_uart_handle.Init.StopBits 		= UART_STOPBITS_1;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <log_uart_init+0x80>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
	log_uart_handle.Init.Parity 		= UART_PARITY_EVEN;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <log_uart_init+0x80>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	611a      	str	r2, [r3, #16]
	log_uart_handle.Init.Mode 			= UART_MODE_TX;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <log_uart_init+0x80>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	615a      	str	r2, [r3, #20]
	log_uart_handle.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <log_uart_init+0x80>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
	log_uart_handle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <log_uart_init+0x80>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&log_uart_handle) != HAL_OK)
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <log_uart_init+0x80>)
 8000db8:	f002 fc70 	bl	800369c <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <log_uart_init+0x64>
	{
		while(1);
 8000dc2:	e7fe      	b.n	8000dc2 <log_uart_init+0x62>
	 * Pojasnjenje na netu:
	 * 	That specific invocation of setbuf sets stdout to be unbuffered - By default,
	 * 	it's usually line-buffered (whatever gets written to stdout gets flushed to
	 * 	the screen when there's a newline), but after that call there's no buffer and
	 * 	anything you write goes directly to the console.*/
	setbuf(stdout, NULL);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <log_uart_init+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fffd 	bl	8003dcc <setbuf>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	20000160 	.word	0x20000160
 8000de4:	40004400 	.word	0x40004400
 8000de8:	20000098 	.word	0x20000098

08000dec <_write>:

int _write(int file, char *ptr, int len)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	(void)file;

	for (int i=0; i<len; i++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00f      	b.n	8000e1e <_write+0x32>
	{
		while(!(USART2->SR & USART_SR_TXE));
 8000dfe:	bf00      	nop
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <_write+0x48>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f9      	beq.n	8000e00 <_write+0x14>

		USART2->DR = (uint8_t)ptr[i];
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_write+0x48>)
 8000e16:	605a      	str	r2, [r3, #4]
	for (int i=0; i<len; i++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbeb      	blt.n	8000dfe <_write+0x12>
	}

	return len;
 8000e26:	687b      	ldr	r3, [r7, #4]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40004400 	.word	0x40004400

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fb21 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f83f 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f8ab 	bl	8000fa0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  ADC1_Init();
  LCDInit();
 8000e4a:	f7ff ff33 	bl	8000cb4 <LCDInit>
  AHT20Init();
 8000e4e:	f7ff fda5 	bl	800099c <AHT20Init>
  log_uart_init();
 8000e52:	f7ff ff85 	bl	8000d60 <log_uart_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	temperature =  AHT20_GetTemp();
 8000e56:	f7ff fdae 	bl	80009b6 <AHT20_GetTemp>
 8000e5a:	6178      	str	r0, [r7, #20]

	char pdata[14];
	sprintf(pdata, "%d", temperature);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4912      	ldr	r1, [pc, #72]	; (8000eac <main+0x74>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 f868 	bl	8003f38 <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff34 	bl	8000cdc <LCDWriteData>

	HAL_Delay(1000);
 8000e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e78:	f000 fb76 	bl	8001568 <HAL_Delay>

	sprintf(pdata, "%s", "Iznos temp:");
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <main+0x78>)
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <main+0x7c>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 f858 	bl	8003f38 <siprintf>
	LCDWriteData(0,0,&pdata[0]);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff ff24 	bl	8000cdc <LCDWriteData>

	HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e98:	f000 fb66 	bl	8001568 <HAL_Delay>

	LOG_ERR("Iznos temperature: %d\n", temperature);
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <main+0x80>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4906      	ldr	r1, [pc, #24]	; (8000ebc <main+0x84>)
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <main+0x88>)
 8000ea4:	f002 ff80 	bl	8003da8 <iprintf>
  {
 8000ea8:	e7d5      	b.n	8000e56 <main+0x1e>
 8000eaa:	bf00      	nop
 8000eac:	08005090 	.word	0x08005090
 8000eb0:	08005094 	.word	0x08005094
 8000eb4:	080050a0 	.word	0x080050a0
 8000eb8:	080050b0 	.word	0x080050b0
 8000ebc:	080050b8 	.word	0x080050b8
 8000ec0:	080050bc 	.word	0x080050bc

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2234      	movs	r2, #52	; 0x34
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 f893 	bl	8003ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <SystemClock_Config+0xd4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <SystemClock_Config+0xd4>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0xd4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <SystemClock_Config+0xd8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <SystemClock_Config+0xd8>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <SystemClock_Config+0xd8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f904 	bl	8003160 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f5e:	f000 f88d 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fda4 	bl	8002acc <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f8a:	f000 f877 	bl	800107c <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	; 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a25      	ldr	r2, [pc, #148]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_GPIO_Init+0xd0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_GPIO_Init+0xd0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_GPIO_Init+0xd0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MX_GPIO_Init+0xd0>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <MX_GPIO_Init+0xd4>)
 800102c:	f000 fd3a 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_GPIO_Init+0xd8>)
 8001048:	f000 fb98 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_GPIO_Init+0xd4>)
 8001064:	f000 fb8a 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020800 	.word	0x40020800

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f000 fb24 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a42      	ldr	r2, [pc, #264]	; (8001200 <HAL_I2C_MspInit+0x128>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12d      	bne.n	8001156 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001128:	2304      	movs	r3, #4
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4835      	ldr	r0, [pc, #212]	; (8001208 <HAL_I2C_MspInit+0x130>)
 8001134:	f000 fb22 	bl	800177c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
//
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001154:	e050      	b.n	80011f8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a2c      	ldr	r2, [pc, #176]	; (800120c <HAL_I2C_MspInit+0x134>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d14b      	bne.n	80011f8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011aa:	2304      	movs	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <HAL_I2C_MspInit+0x138>)
 80011b6:	f000 fae1 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c0:	2312      	movs	r3, #18
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011cc:	2304      	movs	r3, #4
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <HAL_I2C_MspInit+0x13c>)
 80011d8:	f000 fad0 	bl	800177c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 80011e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_I2C_MspInit+0x12c>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400
 800120c:	40005c00 	.word	0x40005c00
 8001210:	40020800 	.word	0x40020800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12b      	bne.n	8001292 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x8c>)
 800128e:	f000 fa75 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40004400 	.word	0x40004400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f918 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135e:	605a      	str	r2, [r3, #4]
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f002 fe64 	bl	800409c <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	200001a8 	.word	0x200001a8
 8001408:	20000300 	.word	0x20000300

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800145e:	f002 fe23 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fce9 	bl	8000e38 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001474:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8001478:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800147c:	200002fc 	.word	0x200002fc

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f931 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fde6 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f93b 	bl	8001762 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f911 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000034 	.word	0x20000034
 8001520:	2000003c 	.word	0x2000003c
 8001524:	20000038 	.word	0x20000038

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000003c 	.word	0x2000003c
 800154c:	200001ac 	.word	0x200001ac

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200001ac 	.word	0x200001ac

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000003c 	.word	0x2000003c

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff47 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff5c 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffb0 	bl	80016d0 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e165      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8154 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80ae 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a5c      	ldr	r2, [pc, #368]	; (8001a7c <HAL_GPIO_Init+0x300>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191e:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x308>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_GPIO_Init+0x30c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x310>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x20a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x206>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x202>
 800197a:	2306      	movs	r3, #6
 800197c:	e00c      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800197e:	2307      	movs	r3, #7
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001982:	2305      	movs	r3, #5
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f ae96 	bls.w	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e12b      	b.n	8001d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff faea 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2224      	movs	r2, #36	; 0x24
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b3c:	f001 f8b8 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8001b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a81      	ldr	r2, [pc, #516]	; (8001d4c <HAL_I2C_Init+0x274>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d807      	bhi.n	8001b5c <HAL_I2C_Init+0x84>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a80      	ldr	r2, [pc, #512]	; (8001d50 <HAL_I2C_Init+0x278>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	bf94      	ite	ls
 8001b54:	2301      	movls	r3, #1
 8001b56:	2300      	movhi	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	e006      	b.n	8001b6a <HAL_I2C_Init+0x92>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a7d      	ldr	r2, [pc, #500]	; (8001d54 <HAL_I2C_Init+0x27c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	bf94      	ite	ls
 8001b64:	2301      	movls	r3, #1
 8001b66:	2300      	movhi	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0e7      	b.n	8001d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a78      	ldr	r2, [pc, #480]	; (8001d58 <HAL_I2C_Init+0x280>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0c9b      	lsrs	r3, r3, #18
 8001b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <HAL_I2C_Init+0x274>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d802      	bhi.n	8001bac <HAL_I2C_Init+0xd4>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	e009      	b.n	8001bc0 <HAL_I2C_Init+0xe8>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	4a69      	ldr	r2, [pc, #420]	; (8001d5c <HAL_I2C_Init+0x284>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	495c      	ldr	r1, [pc, #368]	; (8001d4c <HAL_I2C_Init+0x274>)
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d819      	bhi.n	8001c14 <HAL_I2C_Init+0x13c>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e59      	subs	r1, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bee:	1c59      	adds	r1, r3, #1
 8001bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_I2C_Init+0x138>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e59      	subs	r1, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	e051      	b.n	8001cb4 <HAL_I2C_Init+0x1dc>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e04f      	b.n	8001cb4 <HAL_I2C_Init+0x1dc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d111      	bne.n	8001c40 <HAL_I2C_Init+0x168>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	440b      	add	r3, r1
 8001c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	e012      	b.n	8001c66 <HAL_I2C_Init+0x18e>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Init+0x196>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e022      	b.n	8001cb4 <HAL_I2C_Init+0x1dc>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10e      	bne.n	8001c94 <HAL_I2C_Init+0x1bc>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e58      	subs	r0, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	440b      	add	r3, r1
 8001c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c92:	e00f      	b.n	8001cb4 <HAL_I2C_Init+0x1dc>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e58      	subs	r0, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	0099      	lsls	r1, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	6809      	ldr	r1, [r1, #0]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6911      	ldr	r1, [r2, #16]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68d2      	ldr	r2, [r2, #12]
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	000186a0 	.word	0x000186a0
 8001d50:	001e847f 	.word	0x001e847f
 8001d54:	003d08ff 	.word	0x003d08ff
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	10624dd3 	.word	0x10624dd3

08001d60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	817b      	strh	r3, [r7, #10]
 8001d70:	4613      	mov	r3, r2
 8001d72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff fbec 	bl	8001550 <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	f040 80e0 	bne.w	8001f48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4970      	ldr	r1, [pc, #448]	; (8001f54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fc64 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e0d3      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_I2C_Master_Transmit+0x50>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0cc      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d007      	beq.n	8001dd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2221      	movs	r2, #33	; 0x21
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2210      	movs	r2, #16
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	893a      	ldrh	r2, [r7, #8]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6a3a      	ldr	r2, [r7, #32]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 face 	bl	80023c0 <I2C_MasterRequestWrite>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e08d      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e44:	e066      	b.n	8001f14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	6a39      	ldr	r1, [r7, #32]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fd22 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d107      	bne.n	8001e6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d11b      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x188>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	6a39      	ldr	r1, [r7, #32]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fd19 	bl	8002924 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e01a      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d194      	bne.n	8001e46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	00100002 	.word	0x00100002
 8001f58:	ffff0000 	.word	0xffff0000

08001f5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff faee 	bl	8001550 <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 8217 	bne.w	80023b2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	497c      	ldr	r1, [pc, #496]	; (8002180 <HAL_I2C_Master_Receive+0x224>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fb66 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e20a      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Master_Receive+0x50>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e203      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2222      	movs	r2, #34	; 0x22
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_I2C_Master_Receive+0x228>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa52 	bl	80024c4 <I2C_MasterRequestRead>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1c4      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e198      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	2b01      	cmp	r3, #1
 8002060:	d11b      	bne.n	800209a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e178      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d11b      	bne.n	80020da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	e158      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002100:	e144      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b03      	cmp	r3, #3
 8002108:	f200 80f1 	bhi.w	80022ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	2b01      	cmp	r3, #1
 8002112:	d123      	bne.n	800215c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fc4b 	bl	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e145      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800215a:	e117      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	2b02      	cmp	r3, #2
 8002162:	d14e      	bne.n	8002202 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	4906      	ldr	r1, [pc, #24]	; (8002188 <HAL_I2C_Master_Receive+0x22c>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fa76 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e11a      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
 800217e:	bf00      	nop
 8002180:	00100002 	.word	0x00100002
 8002184:	ffff0000 	.word	0xffff0000
 8002188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002200:	e0c4      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	496c      	ldr	r1, [pc, #432]	; (80023bc <HAL_I2C_Master_Receive+0x460>)
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa27 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0cb      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	2200      	movs	r2, #0
 8002266:	4955      	ldr	r1, [pc, #340]	; (80023bc <HAL_I2C_Master_Receive+0x460>)
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9f9 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e09d      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ec:	e04e      	b.n	800238c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fb5e 	bl	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e058      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d124      	bne.n	800238c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002358:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f aeb6 	bne.w	8002102 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	00010004 	.word	0x00010004

080023c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	460b      	mov	r3, r1
 80023ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d006      	beq.n	80023ea <I2C_MasterRequestWrite+0x2a>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d003      	beq.n	80023ea <I2C_MasterRequestWrite+0x2a>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023e8:	d108      	bne.n	80023fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00b      	b.n	8002414 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	2b12      	cmp	r3, #18
 8002402:	d107      	bne.n	8002414 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f91d 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243a:	d103      	bne.n	8002444 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e035      	b.n	80024b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002450:	d108      	bne.n	8002464 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	e01b      	b.n	800249c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	11db      	asrs	r3, r3, #7
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f003 0306 	and.w	r3, r3, #6
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f063 030f 	orn	r3, r3, #15
 8002474:	b2da      	uxtb	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <I2C_MasterRequestWrite+0xfc>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f966 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e010      	b.n	80024b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002492:	897b      	ldrh	r3, [r7, #10]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <I2C_MasterRequestWrite+0x100>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f956 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010008 	.word	0x00010008
 80024c0:	00010002 	.word	0x00010002

080024c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d006      	beq.n	80024fe <I2C_MasterRequestRead+0x3a>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d003      	beq.n	80024fe <I2C_MasterRequestRead+0x3a>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024fc:	d108      	bne.n	8002510 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e00b      	b.n	8002528 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	2b11      	cmp	r3, #17
 8002516:	d107      	bne.n	8002528 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002526:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f893 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d103      	bne.n	8002558 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e079      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002564:	d108      	bne.n	8002578 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	e05f      	b.n	8002638 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	11db      	asrs	r3, r3, #7
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 0306 	and.w	r3, r3, #6
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f063 030f 	orn	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4930      	ldr	r1, [pc, #192]	; (8002658 <I2C_MasterRequestRead+0x194>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8dc 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e054      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4929      	ldr	r1, [pc, #164]	; (800265c <I2C_MasterRequestRead+0x198>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8cc 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e044      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f831 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d103      	bne.n	800261c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e017      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	11db      	asrs	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f063 030e 	orn	r3, r3, #14
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <I2C_MasterRequestRead+0x198>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f888 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010008 	.word	0x00010008
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002670:	e048      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d044      	beq.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7fe ff69 	bl	8001550 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d139      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	e00c      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d116      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e023      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <I2C_WaitOnFlagUntilTimeout+0xca>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	e00c      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d093      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002762:	e071      	b.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d123      	bne.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800278c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e067      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d041      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c4:	f7fe fec4 	bl	8001550 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d136      	bne.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e00b      	b.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e021      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10c      	bne.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e00b      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f af6d 	bne.w	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	e034      	b.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8e3 	bl	8002a6e <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e034      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d028      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe fe49 	bl	8001550 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d016      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d1c3      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002930:	e034      	b.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f89b 	bl	8002a6e <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e034      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d028      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fe01 	bl	8001550 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11d      	bne.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d016      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d1c3      	bne.n	8002932 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029c0:	e049      	b.n	8002a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	d119      	bne.n	8002a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0210 	mvn.w	r2, #16
 80029d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e030      	b.n	8002a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7fe fda4 	bl	8001550 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11d      	bne.n	8002a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d016      	beq.n	8002a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e007      	b.n	8002a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d1ae      	bne.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a84:	d11b      	bne.n	8002abe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fcc8 	bl	8001550 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fcc4 	bl	8001550 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f855 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc28 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	080050e4 	.word	0x080050e4
 8002c90:	20000034 	.word	0x20000034
 8002c94:	20000038 	.word	0x20000038

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000034 	.word	0x20000034

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	080050f4 	.word	0x080050f4

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080050f4 	.word	0x080050f4

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	b0ae      	sub	sp, #184	; 0xb8
 8002d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d26:	4bcb      	ldr	r3, [pc, #812]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	f200 8206 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x440>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d71 	.word	0x08002d71
 8002d40:	08003141 	.word	0x08003141
 8002d44:	08003141 	.word	0x08003141
 8002d48:	08003141 	.word	0x08003141
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08003141 	.word	0x08003141
 8002d54:	08003141 	.word	0x08003141
 8002d58:	08003141 	.word	0x08003141
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08003141 	.word	0x08003141
 8002d64:	08003141 	.word	0x08003141
 8002d68:	08003141 	.word	0x08003141
 8002d6c:	08002f71 	.word	0x08002f71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4bb9      	ldr	r3, [pc, #740]	; (8003058 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d76:	e1e7      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d78:	4bb8      	ldr	r3, [pc, #736]	; (800305c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d7e:	e1e3      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4bb4      	ldr	r3, [pc, #720]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8c:	4bb1      	ldr	r3, [pc, #708]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d071      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4bae      	ldr	r3, [pc, #696]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002da4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	0159      	lsls	r1, r3, #5
 8002dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd0:	0150      	lsls	r0, r2, #5
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	1a51      	subs	r1, r2, r1
 8002dda:	6439      	str	r1, [r7, #64]	; 0x40
 8002ddc:	4629      	mov	r1, r5
 8002dde:	eb63 0301 	sbc.w	r3, r3, r1
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002df0:	4649      	mov	r1, r9
 8002df2:	018b      	lsls	r3, r1, #6
 8002df4:	4641      	mov	r1, r8
 8002df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	018a      	lsls	r2, r1, #6
 8002dfe:	4641      	mov	r1, r8
 8002e00:	1a51      	subs	r1, r2, r1
 8002e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e04:	4649      	mov	r1, r9
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e18:	4649      	mov	r1, r9
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4641      	mov	r1, r8
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
 8002e32:	462b      	mov	r3, r5
 8002e34:	460a      	mov	r2, r1
 8002e36:	eb42 0303 	adc.w	r3, r2, r3
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e48:	4629      	mov	r1, r5
 8002e4a:	024b      	lsls	r3, r1, #9
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e52:	4621      	mov	r1, r4
 8002e54:	024a      	lsls	r2, r1, #9
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e6c:	f7fd fa20 	bl	80002b0 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e7a:	e067      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b75      	ldr	r3, [pc, #468]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e96:	2300      	movs	r3, #0
 8002e98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4641      	mov	r1, r8
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4641      	mov	r1, r8
 8002ee0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ef6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002efa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002efe:	4692      	mov	sl, r2
 8002f00:	469b      	mov	fp, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb1a 0303 	adds.w	r3, sl, r3
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	028b      	lsls	r3, r1, #10
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f28:	4621      	mov	r1, r4
 8002f2a:	028a      	lsls	r2, r1, #10
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f34:	2200      	movs	r2, #0
 8002f36:	673b      	str	r3, [r7, #112]	; 0x70
 8002f38:	677a      	str	r2, [r7, #116]	; 0x74
 8002f3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f3e:	f7fd f9b7 	bl	80002b0 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4613      	mov	r3, r2
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	3301      	adds	r3, #1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f6e:	e0eb      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d06b      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f88:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	2200      	movs	r2, #0
 8002f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	f04f 0000 	mov.w	r0, #0
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	0159      	lsls	r1, r3, #5
 8002fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb6:	0150      	lsls	r0, r2, #5
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	1a51      	subs	r1, r2, r1
 8002fc0:	61b9      	str	r1, [r7, #24]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fd6:	4659      	mov	r1, fp
 8002fd8:	018b      	lsls	r3, r1, #6
 8002fda:	4651      	mov	r1, sl
 8002fdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	018a      	lsls	r2, r1, #6
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fea:	4659      	mov	r1, fp
 8002fec:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003000:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003004:	4690      	mov	r8, r2
 8003006:	4699      	mov	r9, r3
 8003008:	4623      	mov	r3, r4
 800300a:	eb18 0303 	adds.w	r3, r8, r3
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	462b      	mov	r3, r5
 8003012:	eb49 0303 	adc.w	r3, r9, r3
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003024:	4629      	mov	r1, r5
 8003026:	024b      	lsls	r3, r1, #9
 8003028:	4621      	mov	r1, r4
 800302a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302e:	4621      	mov	r1, r4
 8003030:	024a      	lsls	r2, r1, #9
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800303a:	2200      	movs	r2, #0
 800303c:	65bb      	str	r3, [r7, #88]	; 0x58
 800303e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003040:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003044:	f7fd f934 	bl	80002b0 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003052:	e065      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x420>
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_GetSysClockFreq+0x458>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	2200      	movs	r2, #0
 8003068:	4618      	mov	r0, r3
 800306a:	4611      	mov	r1, r2
 800306c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
 8003072:	2300      	movs	r3, #0
 8003074:	657b      	str	r3, [r7, #84]	; 0x54
 8003076:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800307a:	4642      	mov	r2, r8
 800307c:	464b      	mov	r3, r9
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308c:	0150      	lsls	r0, r2, #5
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4641      	mov	r1, r8
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	4649      	mov	r1, r9
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030ac:	4659      	mov	r1, fp
 80030ae:	018b      	lsls	r3, r1, #6
 80030b0:	4651      	mov	r1, sl
 80030b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b6:	4651      	mov	r1, sl
 80030b8:	018a      	lsls	r2, r1, #6
 80030ba:	4651      	mov	r1, sl
 80030bc:	1a54      	subs	r4, r2, r1
 80030be:	4659      	mov	r1, fp
 80030c0:	eb63 0501 	sbc.w	r5, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	00eb      	lsls	r3, r5, #3
 80030ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	464b      	mov	r3, r9
 80030e0:	eb45 0303 	adc.w	r3, r5, r3
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003108:	2200      	movs	r2, #0
 800310a:	64bb      	str	r3, [r7, #72]	; 0x48
 800310c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800310e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003112:	f7fd f8cd 	bl	80002b0 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4613      	mov	r3, r2
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_GetSysClockFreq+0x458>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0f1b      	lsrs	r3, r3, #28
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800312e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800313e:	e003      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003146:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800314c:	4618      	mov	r0, r3
 800314e:	37b8      	adds	r7, #184	; 0xb8
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400

08003160 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e28d      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8083 	beq.w	8003286 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003180:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b04      	cmp	r3, #4
 800318a:	d019      	beq.n	80031c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318c:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003194:	2b08      	cmp	r3, #8
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d112      	bne.n	80031d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031be:	d10b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05b      	beq.n	8003284 <HAL_RCC_OscConfig+0x124>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e25a      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x90>
 80031e2:	4b7c      	ldr	r3, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7b      	ldr	r2, [pc, #492]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e01d      	b.n	800322c <HAL_RCC_OscConfig+0xcc>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0xb4>
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a75      	ldr	r2, [pc, #468]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a72      	ldr	r2, [pc, #456]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0xcc>
 8003214:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6b      	ldr	r2, [pc, #428]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe f98c 	bl	8001550 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe f988 	bl	8001550 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e21f      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xdc>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f978 	bl	8001550 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe f974 	bl	8001550 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e20b      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x104>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06f      	beq.n	8003372 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003292:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329e:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d105      	bne.n	80032b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032aa:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d11c      	bne.n	80032fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x186>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e1d3      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4937      	ldr	r1, [pc, #220]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	e03a      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x278>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe f921 	bl	8001550 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe f91d 	bl	8001550 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1b4      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4925      	ldr	r1, [pc, #148]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e015      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_OscConfig+0x278>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f900 	bl	8001550 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe f8fc 	bl	8001550 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e193      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d036      	beq.n	80033ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_RCC_OscConfig+0x27c>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe f8e0 	bl	8001550 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003394:	f7fe f8dc 	bl	8001550 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e173      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x234>
 80033b2:	e01b      	b.n	80033ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_OscConfig+0x27c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f8c9 	bl	8001550 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	e00e      	b.n	80033e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe f8c5 	bl	8001550 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d907      	bls.n	80033e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e15c      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470000 	.word	0x42470000
 80033dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ea      	bne.n	80033c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8097 	beq.w	8003528 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b83      	ldr	r3, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b7f      	ldr	r3, [pc, #508]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a7e      	ldr	r2, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b7c      	ldr	r3, [pc, #496]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b79      	ldr	r3, [pc, #484]	; (8003610 <HAL_RCC_OscConfig+0x4b0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x4b0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x4b0>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe f885 	bl	8001550 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe f881 	bl	8001550 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e118      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x4b0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x31e>
 8003470:	4b66      	ldr	r3, [pc, #408]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a65      	ldr	r2, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x358>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x340>
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a60      	ldr	r2, [pc, #384]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a5d      	ldr	r2, [pc, #372]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0x358>
 80034a0:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a56      	ldr	r2, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80034b2:	f023 0304 	bic.w	r3, r3, #4
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe f846 	bl	8001550 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fe f842 	bl	8001550 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0d7      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ee      	beq.n	80034c8 <HAL_RCC_OscConfig+0x368>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe f830 	bl	8001550 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe f82c 	bl	8001550 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0c1      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ee      	bne.n	80034f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	4a3a      	ldr	r2, [pc, #232]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80ad 	beq.w	800368c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b08      	cmp	r3, #8
 800353c:	d060      	beq.n	8003600 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d145      	bne.n	80035d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCC_OscConfig+0x4b4>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f800 	bl	8001550 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd fffc 	bl	8001550 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e093      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	071b      	lsls	r3, r3, #28
 800359e:	491b      	ldr	r1, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x4b4>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd ffd1 	bl	8001550 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fd ffcd 	bl	8001550 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e064      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x452>
 80035d0:	e05c      	b.n	800368c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_RCC_OscConfig+0x4b4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd ffba 	bl	8001550 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd ffb6 	bl	8001550 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04d      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x480>
 80035fe:	e045      	b.n	800368c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e040      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
 800360c:	40023800 	.word	0x40023800
 8003610:	40007000 	.word	0x40007000
 8003614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <HAL_RCC_OscConfig+0x538>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d030      	beq.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d129      	bne.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d122      	bne.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d119      	bne.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d10f      	bne.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e042      	b.n	8003734 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd fda8 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f82b 	bl	800373c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b0c0      	sub	sp, #256	; 0x100
 8003742:	af00      	add	r7, sp, #0
 8003744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	ea40 0301 	orr.w	r3, r0, r1
 8003764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003794:	f021 010c 	bic.w	r1, r1, #12
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037a2:	430b      	orrs	r3, r1
 80037a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	6999      	ldr	r1, [r3, #24]
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	ea40 0301 	orr.w	r3, r0, r1
 80037c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <UART_SetConfig+0x2cc>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0xa0>
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <UART_SetConfig+0x2d0>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7ff fa7c 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80037e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037e4:	e003      	b.n	80037ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037e6:	f7ff fa63 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80037ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	f040 810c 	bne.w	8003a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003806:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800380a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	1891      	adds	r1, r2, r2
 8003814:	65b9      	str	r1, [r7, #88]	; 0x58
 8003816:	415b      	adcs	r3, r3
 8003818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800381a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800381e:	4621      	mov	r1, r4
 8003820:	eb12 0801 	adds.w	r8, r2, r1
 8003824:	4629      	mov	r1, r5
 8003826:	eb43 0901 	adc.w	r9, r3, r1
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	4623      	mov	r3, r4
 8003844:	eb18 0303 	adds.w	r3, r8, r3
 8003848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800384c:	462b      	mov	r3, r5
 800384e:	eb49 0303 	adc.w	r3, r9, r3
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003862:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800386a:	460b      	mov	r3, r1
 800386c:	18db      	adds	r3, r3, r3
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
 8003870:	4613      	mov	r3, r2
 8003872:	eb42 0303 	adc.w	r3, r2, r3
 8003876:	657b      	str	r3, [r7, #84]	; 0x54
 8003878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800387c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003880:	f7fc fd16 	bl	80002b0 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <UART_SetConfig+0x2d4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800389c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80038ac:	415b      	adcs	r3, r3
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038b4:	4641      	mov	r1, r8
 80038b6:	eb12 0a01 	adds.w	sl, r2, r1
 80038ba:	4649      	mov	r1, r9
 80038bc:	eb43 0b01 	adc.w	fp, r3, r1
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d4:	4692      	mov	sl, r2
 80038d6:	469b      	mov	fp, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	eb1a 0303 	adds.w	r3, sl, r3
 80038de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e2:	464b      	mov	r3, r9
 80038e4:	eb4b 0303 	adc.w	r3, fp, r3
 80038e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003900:	460b      	mov	r3, r1
 8003902:	18db      	adds	r3, r3, r3
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
 8003906:	4613      	mov	r3, r2
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
 800390e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003916:	f7fc fccb 	bl	80002b0 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <UART_SetConfig+0x2d4>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2264      	movs	r2, #100	; 0x64
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	1acb      	subs	r3, r1, r3
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <UART_SetConfig+0x2d4>)
 8003938:	fba3 2302 	umull	r2, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003944:	441c      	add	r4, r3
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003950:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003960:	415b      	adcs	r3, r3
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6339      	str	r1, [r7, #48]	; 0x30
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800399c:	464b      	mov	r3, r9
 800399e:	460a      	mov	r2, r1
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039bc:	460b      	mov	r3, r1
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	4613      	mov	r3, r2
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039d2:	f7fc fc6d 	bl	80002b0 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <UART_SetConfig+0x2d4>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4422      	add	r2, r4
 8003a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a04:	e106      	b.n	8003c14 <UART_SetConfig+0x4d8>
 8003a06:	bf00      	nop
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	6239      	str	r1, [r7, #32]
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a36:	4641      	mov	r1, r8
 8003a38:	1854      	adds	r4, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb43 0501 	adc.w	r5, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	eb45 0303 	adc.w	r3, r5, r3
 8003a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a82:	4629      	mov	r1, r5
 8003a84:	008b      	lsls	r3, r1, #2
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	008a      	lsls	r2, r1, #2
 8003a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a94:	f7fc fc0c 	bl	80002b0 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b60      	ldr	r3, [pc, #384]	; (8003c20 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011c      	lsls	r4, r3, #4
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	61b9      	str	r1, [r7, #24]
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac8:	4641      	mov	r1, r8
 8003aca:	1851      	adds	r1, r2, r1
 8003acc:	6139      	str	r1, [r7, #16]
 8003ace:	4649      	mov	r1, r9
 8003ad0:	414b      	adcs	r3, r1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4651      	mov	r1, sl
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4642      	mov	r2, r8
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003afc:	464b      	mov	r3, r9
 8003afe:	460a      	mov	r2, r1
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b20:	4649      	mov	r1, r9
 8003b22:	008b      	lsls	r3, r1, #2
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	008a      	lsls	r2, r1, #2
 8003b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b32:	f7fc fbbd 	bl	80002b0 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <UART_SetConfig+0x4e4>)
 8003b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2264      	movs	r2, #100	; 0x64
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	1acb      	subs	r3, r1, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a33      	ldr	r2, [pc, #204]	; (8003c20 <UART_SetConfig+0x4e4>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b62:	2200      	movs	r2, #0
 8003b64:	673b      	str	r3, [r7, #112]	; 0x70
 8003b66:	677a      	str	r2, [r7, #116]	; 0x74
 8003b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bae:	464b      	mov	r3, r9
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	eb42 0303 	adc.w	r3, r2, r3
 8003bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc2:	667a      	str	r2, [r7, #100]	; 0x64
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	008b      	lsls	r3, r1, #2
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bda:	4641      	mov	r1, r8
 8003bdc:	008a      	lsls	r2, r1, #2
 8003bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003be2:	f7fc fb65 	bl	80002b0 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <UART_SetConfig+0x4e4>)
 8003bec:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	2164      	movs	r1, #100	; 0x64
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	3332      	adds	r3, #50	; 0x32
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <UART_SetConfig+0x4e4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4422      	add	r2, r4
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c20:	51eb851f 	.word	0x51eb851f

08003c24 <std>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c32:	6083      	str	r3, [r0, #8]
 8003c34:	8181      	strh	r1, [r0, #12]
 8003c36:	6643      	str	r3, [r0, #100]	; 0x64
 8003c38:	81c2      	strh	r2, [r0, #14]
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	305c      	adds	r0, #92	; 0x5c
 8003c42:	f000 f9dc 	bl	8003ffe <memset>
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <std+0x58>)
 8003c48:	6263      	str	r3, [r4, #36]	; 0x24
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <std+0x5c>)
 8003c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <std+0x60>)
 8003c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <std+0x64>)
 8003c54:	6323      	str	r3, [r4, #48]	; 0x30
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <std+0x68>)
 8003c58:	6224      	str	r4, [r4, #32]
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d006      	beq.n	8003c6c <std+0x48>
 8003c5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c62:	4294      	cmp	r4, r2
 8003c64:	d002      	beq.n	8003c6c <std+0x48>
 8003c66:	33d0      	adds	r3, #208	; 0xd0
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d105      	bne.n	8003c78 <std+0x54>
 8003c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f000 ba3c 	b.w	80040f0 <__retarget_lock_init_recursive>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08003f79 	.word	0x08003f79
 8003c80:	08003f9b 	.word	0x08003f9b
 8003c84:	08003fd3 	.word	0x08003fd3
 8003c88:	08003ff7 	.word	0x08003ff7
 8003c8c:	200001b0 	.word	0x200001b0

08003c90 <stdio_exit_handler>:
 8003c90:	4a02      	ldr	r2, [pc, #8]	; (8003c9c <stdio_exit_handler+0xc>)
 8003c92:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <stdio_exit_handler+0x10>)
 8003c94:	4803      	ldr	r0, [pc, #12]	; (8003ca4 <stdio_exit_handler+0x14>)
 8003c96:	f000 b869 	b.w	8003d6c <_fwalk_sglue>
 8003c9a:	bf00      	nop
 8003c9c:	20000040 	.word	0x20000040
 8003ca0:	08004c5d 	.word	0x08004c5d
 8003ca4:	2000004c 	.word	0x2000004c

08003ca8 <cleanup_stdio>:
 8003ca8:	6841      	ldr	r1, [r0, #4]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <cleanup_stdio+0x34>)
 8003cac:	4299      	cmp	r1, r3
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	d001      	beq.n	8003cb8 <cleanup_stdio+0x10>
 8003cb4:	f000 ffd2 	bl	8004c5c <_fflush_r>
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <cleanup_stdio+0x38>)
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <cleanup_stdio+0x1e>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 ffcb 	bl	8004c5c <_fflush_r>
 8003cc6:	68e1      	ldr	r1, [r4, #12]
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <cleanup_stdio+0x3c>)
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d004      	beq.n	8003cd8 <cleanup_stdio+0x30>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd4:	f000 bfc2 	b.w	8004c5c <_fflush_r>
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	200001b0 	.word	0x200001b0
 8003ce0:	20000218 	.word	0x20000218
 8003ce4:	20000280 	.word	0x20000280

08003ce8 <global_stdio_init.part.0>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <global_stdio_init.part.0+0x30>)
 8003cec:	4c0b      	ldr	r4, [pc, #44]	; (8003d1c <global_stdio_init.part.0+0x34>)
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <global_stdio_init.part.0+0x38>)
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	f7ff ff94 	bl	8003c24 <std>
 8003cfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d00:	2201      	movs	r2, #1
 8003d02:	2109      	movs	r1, #9
 8003d04:	f7ff ff8e 	bl	8003c24 <std>
 8003d08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d12:	2112      	movs	r1, #18
 8003d14:	f7ff bf86 	b.w	8003c24 <std>
 8003d18:	200002e8 	.word	0x200002e8
 8003d1c:	200001b0 	.word	0x200001b0
 8003d20:	08003c91 	.word	0x08003c91

08003d24 <__sfp_lock_acquire>:
 8003d24:	4801      	ldr	r0, [pc, #4]	; (8003d2c <__sfp_lock_acquire+0x8>)
 8003d26:	f000 b9e4 	b.w	80040f2 <__retarget_lock_acquire_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	200002f1 	.word	0x200002f1

08003d30 <__sfp_lock_release>:
 8003d30:	4801      	ldr	r0, [pc, #4]	; (8003d38 <__sfp_lock_release+0x8>)
 8003d32:	f000 b9df 	b.w	80040f4 <__retarget_lock_release_recursive>
 8003d36:	bf00      	nop
 8003d38:	200002f1 	.word	0x200002f1

08003d3c <__sinit>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	f7ff fff0 	bl	8003d24 <__sfp_lock_acquire>
 8003d44:	6a23      	ldr	r3, [r4, #32]
 8003d46:	b11b      	cbz	r3, 8003d50 <__sinit+0x14>
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f7ff bff0 	b.w	8003d30 <__sfp_lock_release>
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__sinit+0x28>)
 8003d52:	6223      	str	r3, [r4, #32]
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <__sinit+0x2c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f5      	bne.n	8003d48 <__sinit+0xc>
 8003d5c:	f7ff ffc4 	bl	8003ce8 <global_stdio_init.part.0>
 8003d60:	e7f2      	b.n	8003d48 <__sinit+0xc>
 8003d62:	bf00      	nop
 8003d64:	08003ca9 	.word	0x08003ca9
 8003d68:	200002e8 	.word	0x200002e8

08003d6c <_fwalk_sglue>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4607      	mov	r7, r0
 8003d72:	4688      	mov	r8, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	2600      	movs	r6, #0
 8003d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d80:	d505      	bpl.n	8003d8e <_fwalk_sglue+0x22>
 8003d82:	6824      	ldr	r4, [r4, #0]
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d1f7      	bne.n	8003d78 <_fwalk_sglue+0xc>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d907      	bls.n	8003da4 <_fwalk_sglue+0x38>
 8003d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d003      	beq.n	8003da4 <_fwalk_sglue+0x38>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	4306      	orrs	r6, r0
 8003da4:	3568      	adds	r5, #104	; 0x68
 8003da6:	e7e9      	b.n	8003d7c <_fwalk_sglue+0x10>

08003da8 <iprintf>:
 8003da8:	b40f      	push	{r0, r1, r2, r3}
 8003daa:	b507      	push	{r0, r1, r2, lr}
 8003dac:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <iprintf+0x20>)
 8003dae:	ab04      	add	r3, sp, #16
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db6:	6881      	ldr	r1, [r0, #8]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	f000 fc1f 	bl	80045fc <_vfiprintf_r>
 8003dbe:	b003      	add	sp, #12
 8003dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc4:	b004      	add	sp, #16
 8003dc6:	4770      	bx	lr
 8003dc8:	20000098 	.word	0x20000098

08003dcc <setbuf>:
 8003dcc:	fab1 f281 	clz	r2, r1
 8003dd0:	0952      	lsrs	r2, r2, #5
 8003dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd6:	0052      	lsls	r2, r2, #1
 8003dd8:	f000 b800 	b.w	8003ddc <setvbuf>

08003ddc <setvbuf>:
 8003ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003de0:	461d      	mov	r5, r3
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <setvbuf+0x158>)
 8003de4:	681f      	ldr	r7, [r3, #0]
 8003de6:	4604      	mov	r4, r0
 8003de8:	460e      	mov	r6, r1
 8003dea:	4690      	mov	r8, r2
 8003dec:	b127      	cbz	r7, 8003df8 <setvbuf+0x1c>
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	b913      	cbnz	r3, 8003df8 <setvbuf+0x1c>
 8003df2:	4638      	mov	r0, r7
 8003df4:	f7ff ffa2 	bl	8003d3c <__sinit>
 8003df8:	f1b8 0f02 	cmp.w	r8, #2
 8003dfc:	d006      	beq.n	8003e0c <setvbuf+0x30>
 8003dfe:	f1b8 0f01 	cmp.w	r8, #1
 8003e02:	f200 8094 	bhi.w	8003f2e <setvbuf+0x152>
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	f2c0 8091 	blt.w	8003f2e <setvbuf+0x152>
 8003e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e0e:	07da      	lsls	r2, r3, #31
 8003e10:	d405      	bmi.n	8003e1e <setvbuf+0x42>
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	059b      	lsls	r3, r3, #22
 8003e16:	d402      	bmi.n	8003e1e <setvbuf+0x42>
 8003e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1a:	f000 f96a 	bl	80040f2 <__retarget_lock_acquire_recursive>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4638      	mov	r0, r7
 8003e22:	f000 ff1b 	bl	8004c5c <_fflush_r>
 8003e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e28:	b141      	cbz	r1, 8003e3c <setvbuf+0x60>
 8003e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e2e:	4299      	cmp	r1, r3
 8003e30:	d002      	beq.n	8003e38 <setvbuf+0x5c>
 8003e32:	4638      	mov	r0, r7
 8003e34:	f000 f960 	bl	80040f8 <_free_r>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61a3      	str	r3, [r4, #24]
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	0618      	lsls	r0, r3, #24
 8003e46:	d503      	bpl.n	8003e50 <setvbuf+0x74>
 8003e48:	6921      	ldr	r1, [r4, #16]
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f000 f954 	bl	80040f8 <_free_r>
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	f1b8 0f02 	cmp.w	r8, #2
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	d05f      	beq.n	8003f22 <setvbuf+0x146>
 8003e62:	ab01      	add	r3, sp, #4
 8003e64:	466a      	mov	r2, sp
 8003e66:	4621      	mov	r1, r4
 8003e68:	4638      	mov	r0, r7
 8003e6a:	f000 ff1f 	bl	8004cac <__swhatbuf_r>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	4318      	orrs	r0, r3
 8003e72:	81a0      	strh	r0, [r4, #12]
 8003e74:	bb2d      	cbnz	r5, 8003ec2 <setvbuf+0xe6>
 8003e76:	9d00      	ldr	r5, [sp, #0]
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 f989 	bl	8004190 <malloc>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d150      	bne.n	8003f26 <setvbuf+0x14a>
 8003e84:	f8dd 9000 	ldr.w	r9, [sp]
 8003e88:	45a9      	cmp	r9, r5
 8003e8a:	d13e      	bne.n	8003f0a <setvbuf+0x12e>
 8003e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e90:	2200      	movs	r2, #0
 8003e92:	60a2      	str	r2, [r4, #8]
 8003e94:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	6122      	str	r2, [r4, #16]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea2:	6162      	str	r2, [r4, #20]
 8003ea4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	07d1      	lsls	r1, r2, #31
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	d404      	bmi.n	8003eba <setvbuf+0xde>
 8003eb0:	059b      	lsls	r3, r3, #22
 8003eb2:	d402      	bmi.n	8003eba <setvbuf+0xde>
 8003eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eb6:	f000 f91d 	bl	80040f4 <__retarget_lock_release_recursive>
 8003eba:	4628      	mov	r0, r5
 8003ebc:	b003      	add	sp, #12
 8003ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d0d8      	beq.n	8003e78 <setvbuf+0x9c>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	b913      	cbnz	r3, 8003ed0 <setvbuf+0xf4>
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f7ff ff36 	bl	8003d3c <__sinit>
 8003ed0:	f1b8 0f01 	cmp.w	r8, #1
 8003ed4:	bf08      	it	eq
 8003ed6:	89a3      	ldrheq	r3, [r4, #12]
 8003ed8:	6026      	str	r6, [r4, #0]
 8003eda:	bf04      	itt	eq
 8003edc:	f043 0301 	orreq.w	r3, r3, #1
 8003ee0:	81a3      	strheq	r3, [r4, #12]
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f013 0208 	ands.w	r2, r3, #8
 8003ee8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003eec:	d01d      	beq.n	8003f2a <setvbuf+0x14e>
 8003eee:	07da      	lsls	r2, r3, #31
 8003ef0:	bf41      	itttt	mi
 8003ef2:	2200      	movmi	r2, #0
 8003ef4:	426d      	negmi	r5, r5
 8003ef6:	60a2      	strmi	r2, [r4, #8]
 8003ef8:	61a5      	strmi	r5, [r4, #24]
 8003efa:	bf58      	it	pl
 8003efc:	60a5      	strpl	r5, [r4, #8]
 8003efe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003f00:	f015 0501 	ands.w	r5, r5, #1
 8003f04:	d0d4      	beq.n	8003eb0 <setvbuf+0xd4>
 8003f06:	2500      	movs	r5, #0
 8003f08:	e7d7      	b.n	8003eba <setvbuf+0xde>
 8003f0a:	4648      	mov	r0, r9
 8003f0c:	f000 f940 	bl	8004190 <malloc>
 8003f10:	4606      	mov	r6, r0
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0ba      	beq.n	8003e8c <setvbuf+0xb0>
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	464d      	mov	r5, r9
 8003f20:	e7d1      	b.n	8003ec6 <setvbuf+0xea>
 8003f22:	2500      	movs	r5, #0
 8003f24:	e7b4      	b.n	8003e90 <setvbuf+0xb4>
 8003f26:	46a9      	mov	r9, r5
 8003f28:	e7f5      	b.n	8003f16 <setvbuf+0x13a>
 8003f2a:	60a2      	str	r2, [r4, #8]
 8003f2c:	e7e7      	b.n	8003efe <setvbuf+0x122>
 8003f2e:	f04f 35ff 	mov.w	r5, #4294967295
 8003f32:	e7c2      	b.n	8003eba <setvbuf+0xde>
 8003f34:	20000098 	.word	0x20000098

08003f38 <siprintf>:
 8003f38:	b40e      	push	{r1, r2, r3}
 8003f3a:	b500      	push	{lr}
 8003f3c:	b09c      	sub	sp, #112	; 0x70
 8003f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f40:	9002      	str	r0, [sp, #8]
 8003f42:	9006      	str	r0, [sp, #24]
 8003f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f48:	4809      	ldr	r0, [pc, #36]	; (8003f70 <siprintf+0x38>)
 8003f4a:	9107      	str	r1, [sp, #28]
 8003f4c:	9104      	str	r1, [sp, #16]
 8003f4e:	4909      	ldr	r1, [pc, #36]	; (8003f74 <siprintf+0x3c>)
 8003f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f54:	9105      	str	r1, [sp, #20]
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	a902      	add	r1, sp, #8
 8003f5c:	f000 fa26 	bl	80043ac <_svfiprintf_r>
 8003f60:	9b02      	ldr	r3, [sp, #8]
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	b01c      	add	sp, #112	; 0x70
 8003f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f6c:	b003      	add	sp, #12
 8003f6e:	4770      	bx	lr
 8003f70:	20000098 	.word	0x20000098
 8003f74:	ffff0208 	.word	0xffff0208

08003f78 <__sread>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f80:	f000 f868 	bl	8004054 <_read_r>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	bfab      	itete	ge
 8003f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f8c:	181b      	addge	r3, r3, r0
 8003f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f92:	bfac      	ite	ge
 8003f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f96:	81a3      	strhlt	r3, [r4, #12]
 8003f98:	bd10      	pop	{r4, pc}

08003f9a <__swrite>:
 8003f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9e:	461f      	mov	r7, r3
 8003fa0:	898b      	ldrh	r3, [r1, #12]
 8003fa2:	05db      	lsls	r3, r3, #23
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4616      	mov	r6, r2
 8003faa:	d505      	bpl.n	8003fb8 <__swrite+0x1e>
 8003fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f000 f83c 	bl	8004030 <_lseek_r>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc2:	81a3      	strh	r3, [r4, #12]
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	4628      	mov	r0, r5
 8003fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fce:	f000 b853 	b.w	8004078 <_write_r>

08003fd2 <__sseek>:
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fda:	f000 f829 	bl	8004030 <_lseek_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	bf15      	itete	ne
 8003fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fee:	81a3      	strheq	r3, [r4, #12]
 8003ff0:	bf18      	it	ne
 8003ff2:	81a3      	strhne	r3, [r4, #12]
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <__sclose>:
 8003ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffa:	f000 b809 	b.w	8004010 <_close_r>

08003ffe <memset>:
 8003ffe:	4402      	add	r2, r0
 8004000:	4603      	mov	r3, r0
 8004002:	4293      	cmp	r3, r2
 8004004:	d100      	bne.n	8004008 <memset+0xa>
 8004006:	4770      	bx	lr
 8004008:	f803 1b01 	strb.w	r1, [r3], #1
 800400c:	e7f9      	b.n	8004002 <memset+0x4>
	...

08004010 <_close_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d06      	ldr	r5, [pc, #24]	; (800402c <_close_r+0x1c>)
 8004014:	2300      	movs	r3, #0
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	f7fd f98b 	bl	8001336 <_close>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_close_r+0x1a>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_close_r+0x1a>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	200002ec 	.word	0x200002ec

08004030 <_lseek_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d07      	ldr	r5, [pc, #28]	; (8004050 <_lseek_r+0x20>)
 8004034:	4604      	mov	r4, r0
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	2200      	movs	r2, #0
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f7fd f9a0 	bl	8001384 <_lseek>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_lseek_r+0x1e>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_lseek_r+0x1e>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	200002ec 	.word	0x200002ec

08004054 <_read_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d07      	ldr	r5, [pc, #28]	; (8004074 <_read_r+0x20>)
 8004058:	4604      	mov	r4, r0
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	2200      	movs	r2, #0
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fd f94a 	bl	80012fc <_read>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_read_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_read_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	200002ec 	.word	0x200002ec

08004078 <_write_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d07      	ldr	r5, [pc, #28]	; (8004098 <_write_r+0x20>)
 800407c:	4604      	mov	r4, r0
 800407e:	4608      	mov	r0, r1
 8004080:	4611      	mov	r1, r2
 8004082:	2200      	movs	r2, #0
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fc feb0 	bl	8000dec <_write>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_write_r+0x1e>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_write_r+0x1e>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	200002ec 	.word	0x200002ec

0800409c <__errno>:
 800409c:	4b01      	ldr	r3, [pc, #4]	; (80040a4 <__errno+0x8>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000098 	.word	0x20000098

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4d0d      	ldr	r5, [pc, #52]	; (80040e0 <__libc_init_array+0x38>)
 80040ac:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040ae:	1b64      	subs	r4, r4, r5
 80040b0:	10a4      	asrs	r4, r4, #2
 80040b2:	2600      	movs	r6, #0
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	4d0b      	ldr	r5, [pc, #44]	; (80040e8 <__libc_init_array+0x40>)
 80040ba:	4c0c      	ldr	r4, [pc, #48]	; (80040ec <__libc_init_array+0x44>)
 80040bc:	f000 ff80 	bl	8004fc0 <_init>
 80040c0:	1b64      	subs	r4, r4, r5
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	2600      	movs	r6, #0
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08005138 	.word	0x08005138
 80040e4:	08005138 	.word	0x08005138
 80040e8:	08005138 	.word	0x08005138
 80040ec:	0800513c 	.word	0x0800513c

080040f0 <__retarget_lock_init_recursive>:
 80040f0:	4770      	bx	lr

080040f2 <__retarget_lock_acquire_recursive>:
 80040f2:	4770      	bx	lr

080040f4 <__retarget_lock_release_recursive>:
 80040f4:	4770      	bx	lr
	...

080040f8 <_free_r>:
 80040f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040fa:	2900      	cmp	r1, #0
 80040fc:	d044      	beq.n	8004188 <_free_r+0x90>
 80040fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004102:	9001      	str	r0, [sp, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f1a1 0404 	sub.w	r4, r1, #4
 800410a:	bfb8      	it	lt
 800410c:	18e4      	addlt	r4, r4, r3
 800410e:	f000 f8e7 	bl	80042e0 <__malloc_lock>
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <_free_r+0x94>)
 8004114:	9801      	ldr	r0, [sp, #4]
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	b933      	cbnz	r3, 8004128 <_free_r+0x30>
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	6014      	str	r4, [r2, #0]
 800411e:	b003      	add	sp, #12
 8004120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004124:	f000 b8e2 	b.w	80042ec <__malloc_unlock>
 8004128:	42a3      	cmp	r3, r4
 800412a:	d908      	bls.n	800413e <_free_r+0x46>
 800412c:	6825      	ldr	r5, [r4, #0]
 800412e:	1961      	adds	r1, r4, r5
 8004130:	428b      	cmp	r3, r1
 8004132:	bf01      	itttt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	1949      	addeq	r1, r1, r5
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	e7ed      	b.n	800411a <_free_r+0x22>
 800413e:	461a      	mov	r2, r3
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b10b      	cbz	r3, 8004148 <_free_r+0x50>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d9fa      	bls.n	800413e <_free_r+0x46>
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	1855      	adds	r5, r2, r1
 800414c:	42a5      	cmp	r5, r4
 800414e:	d10b      	bne.n	8004168 <_free_r+0x70>
 8004150:	6824      	ldr	r4, [r4, #0]
 8004152:	4421      	add	r1, r4
 8004154:	1854      	adds	r4, r2, r1
 8004156:	42a3      	cmp	r3, r4
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	d1e0      	bne.n	800411e <_free_r+0x26>
 800415c:	681c      	ldr	r4, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	440c      	add	r4, r1
 8004164:	6014      	str	r4, [r2, #0]
 8004166:	e7da      	b.n	800411e <_free_r+0x26>
 8004168:	d902      	bls.n	8004170 <_free_r+0x78>
 800416a:	230c      	movs	r3, #12
 800416c:	6003      	str	r3, [r0, #0]
 800416e:	e7d6      	b.n	800411e <_free_r+0x26>
 8004170:	6825      	ldr	r5, [r4, #0]
 8004172:	1961      	adds	r1, r4, r5
 8004174:	428b      	cmp	r3, r1
 8004176:	bf04      	itt	eq
 8004178:	6819      	ldreq	r1, [r3, #0]
 800417a:	685b      	ldreq	r3, [r3, #4]
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	bf04      	itt	eq
 8004180:	1949      	addeq	r1, r1, r5
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6054      	str	r4, [r2, #4]
 8004186:	e7ca      	b.n	800411e <_free_r+0x26>
 8004188:	b003      	add	sp, #12
 800418a:	bd30      	pop	{r4, r5, pc}
 800418c:	200002f4 	.word	0x200002f4

08004190 <malloc>:
 8004190:	4b02      	ldr	r3, [pc, #8]	; (800419c <malloc+0xc>)
 8004192:	4601      	mov	r1, r0
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f000 b823 	b.w	80041e0 <_malloc_r>
 800419a:	bf00      	nop
 800419c:	20000098 	.word	0x20000098

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0e      	ldr	r6, [pc, #56]	; (80041dc <sbrk_aligned+0x3c>)
 80041a4:	460c      	mov	r4, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	4605      	mov	r5, r0
 80041aa:	b911      	cbnz	r1, 80041b2 <sbrk_aligned+0x12>
 80041ac:	f000 feb2 	bl	8004f14 <_sbrk_r>
 80041b0:	6030      	str	r0, [r6, #0]
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 fead 	bl	8004f14 <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d00a      	beq.n	80041d4 <sbrk_aligned+0x34>
 80041be:	1cc4      	adds	r4, r0, #3
 80041c0:	f024 0403 	bic.w	r4, r4, #3
 80041c4:	42a0      	cmp	r0, r4
 80041c6:	d007      	beq.n	80041d8 <sbrk_aligned+0x38>
 80041c8:	1a21      	subs	r1, r4, r0
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 fea2 	bl	8004f14 <_sbrk_r>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d101      	bne.n	80041d8 <sbrk_aligned+0x38>
 80041d4:	f04f 34ff 	mov.w	r4, #4294967295
 80041d8:	4620      	mov	r0, r4
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	200002f8 	.word	0x200002f8

080041e0 <_malloc_r>:
 80041e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e4:	1ccd      	adds	r5, r1, #3
 80041e6:	f025 0503 	bic.w	r5, r5, #3
 80041ea:	3508      	adds	r5, #8
 80041ec:	2d0c      	cmp	r5, #12
 80041ee:	bf38      	it	cc
 80041f0:	250c      	movcc	r5, #12
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	4607      	mov	r7, r0
 80041f6:	db01      	blt.n	80041fc <_malloc_r+0x1c>
 80041f8:	42a9      	cmp	r1, r5
 80041fa:	d905      	bls.n	8004208 <_malloc_r+0x28>
 80041fc:	230c      	movs	r3, #12
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	2600      	movs	r6, #0
 8004202:	4630      	mov	r0, r6
 8004204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004208:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042dc <_malloc_r+0xfc>
 800420c:	f000 f868 	bl	80042e0 <__malloc_lock>
 8004210:	f8d8 3000 	ldr.w	r3, [r8]
 8004214:	461c      	mov	r4, r3
 8004216:	bb5c      	cbnz	r4, 8004270 <_malloc_r+0x90>
 8004218:	4629      	mov	r1, r5
 800421a:	4638      	mov	r0, r7
 800421c:	f7ff ffc0 	bl	80041a0 <sbrk_aligned>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	4604      	mov	r4, r0
 8004224:	d155      	bne.n	80042d2 <_malloc_r+0xf2>
 8004226:	f8d8 4000 	ldr.w	r4, [r8]
 800422a:	4626      	mov	r6, r4
 800422c:	2e00      	cmp	r6, #0
 800422e:	d145      	bne.n	80042bc <_malloc_r+0xdc>
 8004230:	2c00      	cmp	r4, #0
 8004232:	d048      	beq.n	80042c6 <_malloc_r+0xe6>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	4631      	mov	r1, r6
 8004238:	4638      	mov	r0, r7
 800423a:	eb04 0903 	add.w	r9, r4, r3
 800423e:	f000 fe69 	bl	8004f14 <_sbrk_r>
 8004242:	4581      	cmp	r9, r0
 8004244:	d13f      	bne.n	80042c6 <_malloc_r+0xe6>
 8004246:	6821      	ldr	r1, [r4, #0]
 8004248:	1a6d      	subs	r5, r5, r1
 800424a:	4629      	mov	r1, r5
 800424c:	4638      	mov	r0, r7
 800424e:	f7ff ffa7 	bl	80041a0 <sbrk_aligned>
 8004252:	3001      	adds	r0, #1
 8004254:	d037      	beq.n	80042c6 <_malloc_r+0xe6>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	442b      	add	r3, r5
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	f8d8 3000 	ldr.w	r3, [r8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d038      	beq.n	80042d6 <_malloc_r+0xf6>
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	42a2      	cmp	r2, r4
 8004268:	d12b      	bne.n	80042c2 <_malloc_r+0xe2>
 800426a:	2200      	movs	r2, #0
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e00f      	b.n	8004290 <_malloc_r+0xb0>
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	1b52      	subs	r2, r2, r5
 8004274:	d41f      	bmi.n	80042b6 <_malloc_r+0xd6>
 8004276:	2a0b      	cmp	r2, #11
 8004278:	d917      	bls.n	80042aa <_malloc_r+0xca>
 800427a:	1961      	adds	r1, r4, r5
 800427c:	42a3      	cmp	r3, r4
 800427e:	6025      	str	r5, [r4, #0]
 8004280:	bf18      	it	ne
 8004282:	6059      	strne	r1, [r3, #4]
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	bf08      	it	eq
 8004288:	f8c8 1000 	streq.w	r1, [r8]
 800428c:	5162      	str	r2, [r4, r5]
 800428e:	604b      	str	r3, [r1, #4]
 8004290:	4638      	mov	r0, r7
 8004292:	f104 060b 	add.w	r6, r4, #11
 8004296:	f000 f829 	bl	80042ec <__malloc_unlock>
 800429a:	f026 0607 	bic.w	r6, r6, #7
 800429e:	1d23      	adds	r3, r4, #4
 80042a0:	1af2      	subs	r2, r6, r3
 80042a2:	d0ae      	beq.n	8004202 <_malloc_r+0x22>
 80042a4:	1b9b      	subs	r3, r3, r6
 80042a6:	50a3      	str	r3, [r4, r2]
 80042a8:	e7ab      	b.n	8004202 <_malloc_r+0x22>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	6862      	ldr	r2, [r4, #4]
 80042ae:	d1dd      	bne.n	800426c <_malloc_r+0x8c>
 80042b0:	f8c8 2000 	str.w	r2, [r8]
 80042b4:	e7ec      	b.n	8004290 <_malloc_r+0xb0>
 80042b6:	4623      	mov	r3, r4
 80042b8:	6864      	ldr	r4, [r4, #4]
 80042ba:	e7ac      	b.n	8004216 <_malloc_r+0x36>
 80042bc:	4634      	mov	r4, r6
 80042be:	6876      	ldr	r6, [r6, #4]
 80042c0:	e7b4      	b.n	800422c <_malloc_r+0x4c>
 80042c2:	4613      	mov	r3, r2
 80042c4:	e7cc      	b.n	8004260 <_malloc_r+0x80>
 80042c6:	230c      	movs	r3, #12
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4638      	mov	r0, r7
 80042cc:	f000 f80e 	bl	80042ec <__malloc_unlock>
 80042d0:	e797      	b.n	8004202 <_malloc_r+0x22>
 80042d2:	6025      	str	r5, [r4, #0]
 80042d4:	e7dc      	b.n	8004290 <_malloc_r+0xb0>
 80042d6:	605b      	str	r3, [r3, #4]
 80042d8:	deff      	udf	#255	; 0xff
 80042da:	bf00      	nop
 80042dc:	200002f4 	.word	0x200002f4

080042e0 <__malloc_lock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__malloc_lock+0x8>)
 80042e2:	f7ff bf06 	b.w	80040f2 <__retarget_lock_acquire_recursive>
 80042e6:	bf00      	nop
 80042e8:	200002f0 	.word	0x200002f0

080042ec <__malloc_unlock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_unlock+0x8>)
 80042ee:	f7ff bf01 	b.w	80040f4 <__retarget_lock_release_recursive>
 80042f2:	bf00      	nop
 80042f4:	200002f0 	.word	0x200002f0

080042f8 <__ssputs_r>:
 80042f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	688e      	ldr	r6, [r1, #8]
 80042fe:	461f      	mov	r7, r3
 8004300:	42be      	cmp	r6, r7
 8004302:	680b      	ldr	r3, [r1, #0]
 8004304:	4682      	mov	sl, r0
 8004306:	460c      	mov	r4, r1
 8004308:	4690      	mov	r8, r2
 800430a:	d82c      	bhi.n	8004366 <__ssputs_r+0x6e>
 800430c:	898a      	ldrh	r2, [r1, #12]
 800430e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004312:	d026      	beq.n	8004362 <__ssputs_r+0x6a>
 8004314:	6965      	ldr	r5, [r4, #20]
 8004316:	6909      	ldr	r1, [r1, #16]
 8004318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800431c:	eba3 0901 	sub.w	r9, r3, r1
 8004320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004324:	1c7b      	adds	r3, r7, #1
 8004326:	444b      	add	r3, r9
 8004328:	106d      	asrs	r5, r5, #1
 800432a:	429d      	cmp	r5, r3
 800432c:	bf38      	it	cc
 800432e:	461d      	movcc	r5, r3
 8004330:	0553      	lsls	r3, r2, #21
 8004332:	d527      	bpl.n	8004384 <__ssputs_r+0x8c>
 8004334:	4629      	mov	r1, r5
 8004336:	f7ff ff53 	bl	80041e0 <_malloc_r>
 800433a:	4606      	mov	r6, r0
 800433c:	b360      	cbz	r0, 8004398 <__ssputs_r+0xa0>
 800433e:	6921      	ldr	r1, [r4, #16]
 8004340:	464a      	mov	r2, r9
 8004342:	f000 fdf7 	bl	8004f34 <memcpy>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	6126      	str	r6, [r4, #16]
 8004354:	6165      	str	r5, [r4, #20]
 8004356:	444e      	add	r6, r9
 8004358:	eba5 0509 	sub.w	r5, r5, r9
 800435c:	6026      	str	r6, [r4, #0]
 800435e:	60a5      	str	r5, [r4, #8]
 8004360:	463e      	mov	r6, r7
 8004362:	42be      	cmp	r6, r7
 8004364:	d900      	bls.n	8004368 <__ssputs_r+0x70>
 8004366:	463e      	mov	r6, r7
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	4632      	mov	r2, r6
 800436c:	4641      	mov	r1, r8
 800436e:	f000 fd95 	bl	8004e9c <memmove>
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	1b9b      	subs	r3, r3, r6
 8004376:	60a3      	str	r3, [r4, #8]
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	4433      	add	r3, r6
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	2000      	movs	r0, #0
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	462a      	mov	r2, r5
 8004386:	f000 fde3 	bl	8004f50 <_realloc_r>
 800438a:	4606      	mov	r6, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d1e0      	bne.n	8004352 <__ssputs_r+0x5a>
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	4650      	mov	r0, sl
 8004394:	f7ff feb0 	bl	80040f8 <_free_r>
 8004398:	230c      	movs	r3, #12
 800439a:	f8ca 3000 	str.w	r3, [sl]
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	f04f 30ff 	mov.w	r0, #4294967295
 80043aa:	e7e9      	b.n	8004380 <__ssputs_r+0x88>

080043ac <_svfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	4698      	mov	r8, r3
 80043b2:	898b      	ldrh	r3, [r1, #12]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	b09d      	sub	sp, #116	; 0x74
 80043b8:	4607      	mov	r7, r0
 80043ba:	460d      	mov	r5, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	d50e      	bpl.n	80043de <_svfiprintf_r+0x32>
 80043c0:	690b      	ldr	r3, [r1, #16]
 80043c2:	b963      	cbnz	r3, 80043de <_svfiprintf_r+0x32>
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	f7ff ff0b 	bl	80041e0 <_malloc_r>
 80043ca:	6028      	str	r0, [r5, #0]
 80043cc:	6128      	str	r0, [r5, #16]
 80043ce:	b920      	cbnz	r0, 80043da <_svfiprintf_r+0x2e>
 80043d0:	230c      	movs	r3, #12
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e0d0      	b.n	800457c <_svfiprintf_r+0x1d0>
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	616b      	str	r3, [r5, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	9309      	str	r3, [sp, #36]	; 0x24
 80043e2:	2320      	movs	r3, #32
 80043e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ec:	2330      	movs	r3, #48	; 0x30
 80043ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004594 <_svfiprintf_r+0x1e8>
 80043f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043f6:	f04f 0901 	mov.w	r9, #1
 80043fa:	4623      	mov	r3, r4
 80043fc:	469a      	mov	sl, r3
 80043fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004402:	b10a      	cbz	r2, 8004408 <_svfiprintf_r+0x5c>
 8004404:	2a25      	cmp	r2, #37	; 0x25
 8004406:	d1f9      	bne.n	80043fc <_svfiprintf_r+0x50>
 8004408:	ebba 0b04 	subs.w	fp, sl, r4
 800440c:	d00b      	beq.n	8004426 <_svfiprintf_r+0x7a>
 800440e:	465b      	mov	r3, fp
 8004410:	4622      	mov	r2, r4
 8004412:	4629      	mov	r1, r5
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff ff6f 	bl	80042f8 <__ssputs_r>
 800441a:	3001      	adds	r0, #1
 800441c:	f000 80a9 	beq.w	8004572 <_svfiprintf_r+0x1c6>
 8004420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004422:	445a      	add	r2, fp
 8004424:	9209      	str	r2, [sp, #36]	; 0x24
 8004426:	f89a 3000 	ldrb.w	r3, [sl]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80a1 	beq.w	8004572 <_svfiprintf_r+0x1c6>
 8004430:	2300      	movs	r3, #0
 8004432:	f04f 32ff 	mov.w	r2, #4294967295
 8004436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800443a:	f10a 0a01 	add.w	sl, sl, #1
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004446:	931a      	str	r3, [sp, #104]	; 0x68
 8004448:	4654      	mov	r4, sl
 800444a:	2205      	movs	r2, #5
 800444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004450:	4850      	ldr	r0, [pc, #320]	; (8004594 <_svfiprintf_r+0x1e8>)
 8004452:	f7fb fedd 	bl	8000210 <memchr>
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	b9d8      	cbnz	r0, 8004492 <_svfiprintf_r+0xe6>
 800445a:	06d0      	lsls	r0, r2, #27
 800445c:	bf44      	itt	mi
 800445e:	2320      	movmi	r3, #32
 8004460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004464:	0711      	lsls	r1, r2, #28
 8004466:	bf44      	itt	mi
 8004468:	232b      	movmi	r3, #43	; 0x2b
 800446a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b2a      	cmp	r3, #42	; 0x2a
 8004474:	d015      	beq.n	80044a2 <_svfiprintf_r+0xf6>
 8004476:	9a07      	ldr	r2, [sp, #28]
 8004478:	4654      	mov	r4, sl
 800447a:	2000      	movs	r0, #0
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4621      	mov	r1, r4
 8004482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004486:	3b30      	subs	r3, #48	; 0x30
 8004488:	2b09      	cmp	r3, #9
 800448a:	d94d      	bls.n	8004528 <_svfiprintf_r+0x17c>
 800448c:	b1b0      	cbz	r0, 80044bc <_svfiprintf_r+0x110>
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	e014      	b.n	80044bc <_svfiprintf_r+0x110>
 8004492:	eba0 0308 	sub.w	r3, r0, r8
 8004496:	fa09 f303 	lsl.w	r3, r9, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	46a2      	mov	sl, r4
 80044a0:	e7d2      	b.n	8004448 <_svfiprintf_r+0x9c>
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfbb      	ittet	lt
 80044ae:	425b      	neglt	r3, r3
 80044b0:	f042 0202 	orrlt.w	r2, r2, #2
 80044b4:	9307      	strge	r3, [sp, #28]
 80044b6:	9307      	strlt	r3, [sp, #28]
 80044b8:	bfb8      	it	lt
 80044ba:	9204      	strlt	r2, [sp, #16]
 80044bc:	7823      	ldrb	r3, [r4, #0]
 80044be:	2b2e      	cmp	r3, #46	; 0x2e
 80044c0:	d10c      	bne.n	80044dc <_svfiprintf_r+0x130>
 80044c2:	7863      	ldrb	r3, [r4, #1]
 80044c4:	2b2a      	cmp	r3, #42	; 0x2a
 80044c6:	d134      	bne.n	8004532 <_svfiprintf_r+0x186>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bfb8      	it	lt
 80044d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044d8:	3402      	adds	r4, #2
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045a4 <_svfiprintf_r+0x1f8>
 80044e0:	7821      	ldrb	r1, [r4, #0]
 80044e2:	2203      	movs	r2, #3
 80044e4:	4650      	mov	r0, sl
 80044e6:	f7fb fe93 	bl	8000210 <memchr>
 80044ea:	b138      	cbz	r0, 80044fc <_svfiprintf_r+0x150>
 80044ec:	9b04      	ldr	r3, [sp, #16]
 80044ee:	eba0 000a 	sub.w	r0, r0, sl
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	4082      	lsls	r2, r0
 80044f6:	4313      	orrs	r3, r2
 80044f8:	3401      	adds	r4, #1
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004500:	4825      	ldr	r0, [pc, #148]	; (8004598 <_svfiprintf_r+0x1ec>)
 8004502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004506:	2206      	movs	r2, #6
 8004508:	f7fb fe82 	bl	8000210 <memchr>
 800450c:	2800      	cmp	r0, #0
 800450e:	d038      	beq.n	8004582 <_svfiprintf_r+0x1d6>
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <_svfiprintf_r+0x1f0>)
 8004512:	bb1b      	cbnz	r3, 800455c <_svfiprintf_r+0x1b0>
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	3307      	adds	r3, #7
 8004518:	f023 0307 	bic.w	r3, r3, #7
 800451c:	3308      	adds	r3, #8
 800451e:	9303      	str	r3, [sp, #12]
 8004520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004522:	4433      	add	r3, r6
 8004524:	9309      	str	r3, [sp, #36]	; 0x24
 8004526:	e768      	b.n	80043fa <_svfiprintf_r+0x4e>
 8004528:	fb0c 3202 	mla	r2, ip, r2, r3
 800452c:	460c      	mov	r4, r1
 800452e:	2001      	movs	r0, #1
 8004530:	e7a6      	b.n	8004480 <_svfiprintf_r+0xd4>
 8004532:	2300      	movs	r3, #0
 8004534:	3401      	adds	r4, #1
 8004536:	9305      	str	r3, [sp, #20]
 8004538:	4619      	mov	r1, r3
 800453a:	f04f 0c0a 	mov.w	ip, #10
 800453e:	4620      	mov	r0, r4
 8004540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004544:	3a30      	subs	r2, #48	; 0x30
 8004546:	2a09      	cmp	r2, #9
 8004548:	d903      	bls.n	8004552 <_svfiprintf_r+0x1a6>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0c6      	beq.n	80044dc <_svfiprintf_r+0x130>
 800454e:	9105      	str	r1, [sp, #20]
 8004550:	e7c4      	b.n	80044dc <_svfiprintf_r+0x130>
 8004552:	fb0c 2101 	mla	r1, ip, r1, r2
 8004556:	4604      	mov	r4, r0
 8004558:	2301      	movs	r3, #1
 800455a:	e7f0      	b.n	800453e <_svfiprintf_r+0x192>
 800455c:	ab03      	add	r3, sp, #12
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	462a      	mov	r2, r5
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <_svfiprintf_r+0x1f4>)
 8004564:	a904      	add	r1, sp, #16
 8004566:	4638      	mov	r0, r7
 8004568:	f3af 8000 	nop.w
 800456c:	1c42      	adds	r2, r0, #1
 800456e:	4606      	mov	r6, r0
 8004570:	d1d6      	bne.n	8004520 <_svfiprintf_r+0x174>
 8004572:	89ab      	ldrh	r3, [r5, #12]
 8004574:	065b      	lsls	r3, r3, #25
 8004576:	f53f af2d 	bmi.w	80043d4 <_svfiprintf_r+0x28>
 800457a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800457c:	b01d      	add	sp, #116	; 0x74
 800457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004582:	ab03      	add	r3, sp, #12
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	462a      	mov	r2, r5
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <_svfiprintf_r+0x1f4>)
 800458a:	a904      	add	r1, sp, #16
 800458c:	4638      	mov	r0, r7
 800458e:	f000 f9bd 	bl	800490c <_printf_i>
 8004592:	e7eb      	b.n	800456c <_svfiprintf_r+0x1c0>
 8004594:	080050fc 	.word	0x080050fc
 8004598:	08005106 	.word	0x08005106
 800459c:	00000000 	.word	0x00000000
 80045a0:	080042f9 	.word	0x080042f9
 80045a4:	08005102 	.word	0x08005102

080045a8 <__sfputc_r>:
 80045a8:	6893      	ldr	r3, [r2, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	b410      	push	{r4}
 80045b0:	6093      	str	r3, [r2, #8]
 80045b2:	da08      	bge.n	80045c6 <__sfputc_r+0x1e>
 80045b4:	6994      	ldr	r4, [r2, #24]
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	db01      	blt.n	80045be <__sfputc_r+0x16>
 80045ba:	290a      	cmp	r1, #10
 80045bc:	d103      	bne.n	80045c6 <__sfputc_r+0x1e>
 80045be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c2:	f000 bbd5 	b.w	8004d70 <__swbuf_r>
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	1c58      	adds	r0, r3, #1
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	7019      	strb	r1, [r3, #0]
 80045ce:	4608      	mov	r0, r1
 80045d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <__sfputs_r>:
 80045d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d8:	4606      	mov	r6, r0
 80045da:	460f      	mov	r7, r1
 80045dc:	4614      	mov	r4, r2
 80045de:	18d5      	adds	r5, r2, r3
 80045e0:	42ac      	cmp	r4, r5
 80045e2:	d101      	bne.n	80045e8 <__sfputs_r+0x12>
 80045e4:	2000      	movs	r0, #0
 80045e6:	e007      	b.n	80045f8 <__sfputs_r+0x22>
 80045e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ec:	463a      	mov	r2, r7
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7ff ffda 	bl	80045a8 <__sfputc_r>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d1f3      	bne.n	80045e0 <__sfputs_r+0xa>
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045fc <_vfiprintf_r>:
 80045fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004600:	460d      	mov	r5, r1
 8004602:	b09d      	sub	sp, #116	; 0x74
 8004604:	4614      	mov	r4, r2
 8004606:	4698      	mov	r8, r3
 8004608:	4606      	mov	r6, r0
 800460a:	b118      	cbz	r0, 8004614 <_vfiprintf_r+0x18>
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b90b      	cbnz	r3, 8004614 <_vfiprintf_r+0x18>
 8004610:	f7ff fb94 	bl	8003d3c <__sinit>
 8004614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004616:	07d9      	lsls	r1, r3, #31
 8004618:	d405      	bmi.n	8004626 <_vfiprintf_r+0x2a>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	059a      	lsls	r2, r3, #22
 800461e:	d402      	bmi.n	8004626 <_vfiprintf_r+0x2a>
 8004620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004622:	f7ff fd66 	bl	80040f2 <__retarget_lock_acquire_recursive>
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	071b      	lsls	r3, r3, #28
 800462a:	d501      	bpl.n	8004630 <_vfiprintf_r+0x34>
 800462c:	692b      	ldr	r3, [r5, #16]
 800462e:	b99b      	cbnz	r3, 8004658 <_vfiprintf_r+0x5c>
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	f000 fbda 	bl	8004dec <__swsetup_r>
 8004638:	b170      	cbz	r0, 8004658 <_vfiprintf_r+0x5c>
 800463a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800463c:	07dc      	lsls	r4, r3, #31
 800463e:	d504      	bpl.n	800464a <_vfiprintf_r+0x4e>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	b01d      	add	sp, #116	; 0x74
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464a:	89ab      	ldrh	r3, [r5, #12]
 800464c:	0598      	lsls	r0, r3, #22
 800464e:	d4f7      	bmi.n	8004640 <_vfiprintf_r+0x44>
 8004650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004652:	f7ff fd4f 	bl	80040f4 <__retarget_lock_release_recursive>
 8004656:	e7f3      	b.n	8004640 <_vfiprintf_r+0x44>
 8004658:	2300      	movs	r3, #0
 800465a:	9309      	str	r3, [sp, #36]	; 0x24
 800465c:	2320      	movs	r3, #32
 800465e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004662:	f8cd 800c 	str.w	r8, [sp, #12]
 8004666:	2330      	movs	r3, #48	; 0x30
 8004668:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800481c <_vfiprintf_r+0x220>
 800466c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004670:	f04f 0901 	mov.w	r9, #1
 8004674:	4623      	mov	r3, r4
 8004676:	469a      	mov	sl, r3
 8004678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800467c:	b10a      	cbz	r2, 8004682 <_vfiprintf_r+0x86>
 800467e:	2a25      	cmp	r2, #37	; 0x25
 8004680:	d1f9      	bne.n	8004676 <_vfiprintf_r+0x7a>
 8004682:	ebba 0b04 	subs.w	fp, sl, r4
 8004686:	d00b      	beq.n	80046a0 <_vfiprintf_r+0xa4>
 8004688:	465b      	mov	r3, fp
 800468a:	4622      	mov	r2, r4
 800468c:	4629      	mov	r1, r5
 800468e:	4630      	mov	r0, r6
 8004690:	f7ff ffa1 	bl	80045d6 <__sfputs_r>
 8004694:	3001      	adds	r0, #1
 8004696:	f000 80a9 	beq.w	80047ec <_vfiprintf_r+0x1f0>
 800469a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800469c:	445a      	add	r2, fp
 800469e:	9209      	str	r2, [sp, #36]	; 0x24
 80046a0:	f89a 3000 	ldrb.w	r3, [sl]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a1 	beq.w	80047ec <_vfiprintf_r+0x1f0>
 80046aa:	2300      	movs	r3, #0
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046b4:	f10a 0a01 	add.w	sl, sl, #1
 80046b8:	9304      	str	r3, [sp, #16]
 80046ba:	9307      	str	r3, [sp, #28]
 80046bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c0:	931a      	str	r3, [sp, #104]	; 0x68
 80046c2:	4654      	mov	r4, sl
 80046c4:	2205      	movs	r2, #5
 80046c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ca:	4854      	ldr	r0, [pc, #336]	; (800481c <_vfiprintf_r+0x220>)
 80046cc:	f7fb fda0 	bl	8000210 <memchr>
 80046d0:	9a04      	ldr	r2, [sp, #16]
 80046d2:	b9d8      	cbnz	r0, 800470c <_vfiprintf_r+0x110>
 80046d4:	06d1      	lsls	r1, r2, #27
 80046d6:	bf44      	itt	mi
 80046d8:	2320      	movmi	r3, #32
 80046da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046de:	0713      	lsls	r3, r2, #28
 80046e0:	bf44      	itt	mi
 80046e2:	232b      	movmi	r3, #43	; 0x2b
 80046e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ec:	2b2a      	cmp	r3, #42	; 0x2a
 80046ee:	d015      	beq.n	800471c <_vfiprintf_r+0x120>
 80046f0:	9a07      	ldr	r2, [sp, #28]
 80046f2:	4654      	mov	r4, sl
 80046f4:	2000      	movs	r0, #0
 80046f6:	f04f 0c0a 	mov.w	ip, #10
 80046fa:	4621      	mov	r1, r4
 80046fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004700:	3b30      	subs	r3, #48	; 0x30
 8004702:	2b09      	cmp	r3, #9
 8004704:	d94d      	bls.n	80047a2 <_vfiprintf_r+0x1a6>
 8004706:	b1b0      	cbz	r0, 8004736 <_vfiprintf_r+0x13a>
 8004708:	9207      	str	r2, [sp, #28]
 800470a:	e014      	b.n	8004736 <_vfiprintf_r+0x13a>
 800470c:	eba0 0308 	sub.w	r3, r0, r8
 8004710:	fa09 f303 	lsl.w	r3, r9, r3
 8004714:	4313      	orrs	r3, r2
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	46a2      	mov	sl, r4
 800471a:	e7d2      	b.n	80046c2 <_vfiprintf_r+0xc6>
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	1d19      	adds	r1, r3, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	9103      	str	r1, [sp, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	bfbb      	ittet	lt
 8004728:	425b      	neglt	r3, r3
 800472a:	f042 0202 	orrlt.w	r2, r2, #2
 800472e:	9307      	strge	r3, [sp, #28]
 8004730:	9307      	strlt	r3, [sp, #28]
 8004732:	bfb8      	it	lt
 8004734:	9204      	strlt	r2, [sp, #16]
 8004736:	7823      	ldrb	r3, [r4, #0]
 8004738:	2b2e      	cmp	r3, #46	; 0x2e
 800473a:	d10c      	bne.n	8004756 <_vfiprintf_r+0x15a>
 800473c:	7863      	ldrb	r3, [r4, #1]
 800473e:	2b2a      	cmp	r3, #42	; 0x2a
 8004740:	d134      	bne.n	80047ac <_vfiprintf_r+0x1b0>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	1d1a      	adds	r2, r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	9203      	str	r2, [sp, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004752:	3402      	adds	r4, #2
 8004754:	9305      	str	r3, [sp, #20]
 8004756:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800482c <_vfiprintf_r+0x230>
 800475a:	7821      	ldrb	r1, [r4, #0]
 800475c:	2203      	movs	r2, #3
 800475e:	4650      	mov	r0, sl
 8004760:	f7fb fd56 	bl	8000210 <memchr>
 8004764:	b138      	cbz	r0, 8004776 <_vfiprintf_r+0x17a>
 8004766:	9b04      	ldr	r3, [sp, #16]
 8004768:	eba0 000a 	sub.w	r0, r0, sl
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	4082      	lsls	r2, r0
 8004770:	4313      	orrs	r3, r2
 8004772:	3401      	adds	r4, #1
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477a:	4829      	ldr	r0, [pc, #164]	; (8004820 <_vfiprintf_r+0x224>)
 800477c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004780:	2206      	movs	r2, #6
 8004782:	f7fb fd45 	bl	8000210 <memchr>
 8004786:	2800      	cmp	r0, #0
 8004788:	d03f      	beq.n	800480a <_vfiprintf_r+0x20e>
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <_vfiprintf_r+0x228>)
 800478c:	bb1b      	cbnz	r3, 80047d6 <_vfiprintf_r+0x1da>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	3307      	adds	r3, #7
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	3308      	adds	r3, #8
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479c:	443b      	add	r3, r7
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	e768      	b.n	8004674 <_vfiprintf_r+0x78>
 80047a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047a6:	460c      	mov	r4, r1
 80047a8:	2001      	movs	r0, #1
 80047aa:	e7a6      	b.n	80046fa <_vfiprintf_r+0xfe>
 80047ac:	2300      	movs	r3, #0
 80047ae:	3401      	adds	r4, #1
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	4619      	mov	r1, r3
 80047b4:	f04f 0c0a 	mov.w	ip, #10
 80047b8:	4620      	mov	r0, r4
 80047ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047be:	3a30      	subs	r2, #48	; 0x30
 80047c0:	2a09      	cmp	r2, #9
 80047c2:	d903      	bls.n	80047cc <_vfiprintf_r+0x1d0>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0c6      	beq.n	8004756 <_vfiprintf_r+0x15a>
 80047c8:	9105      	str	r1, [sp, #20]
 80047ca:	e7c4      	b.n	8004756 <_vfiprintf_r+0x15a>
 80047cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d0:	4604      	mov	r4, r0
 80047d2:	2301      	movs	r3, #1
 80047d4:	e7f0      	b.n	80047b8 <_vfiprintf_r+0x1bc>
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <_vfiprintf_r+0x22c>)
 80047de:	a904      	add	r1, sp, #16
 80047e0:	4630      	mov	r0, r6
 80047e2:	f3af 8000 	nop.w
 80047e6:	4607      	mov	r7, r0
 80047e8:	1c78      	adds	r0, r7, #1
 80047ea:	d1d6      	bne.n	800479a <_vfiprintf_r+0x19e>
 80047ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047ee:	07d9      	lsls	r1, r3, #31
 80047f0:	d405      	bmi.n	80047fe <_vfiprintf_r+0x202>
 80047f2:	89ab      	ldrh	r3, [r5, #12]
 80047f4:	059a      	lsls	r2, r3, #22
 80047f6:	d402      	bmi.n	80047fe <_vfiprintf_r+0x202>
 80047f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fa:	f7ff fc7b 	bl	80040f4 <__retarget_lock_release_recursive>
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	065b      	lsls	r3, r3, #25
 8004802:	f53f af1d 	bmi.w	8004640 <_vfiprintf_r+0x44>
 8004806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004808:	e71c      	b.n	8004644 <_vfiprintf_r+0x48>
 800480a:	ab03      	add	r3, sp, #12
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	462a      	mov	r2, r5
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <_vfiprintf_r+0x22c>)
 8004812:	a904      	add	r1, sp, #16
 8004814:	4630      	mov	r0, r6
 8004816:	f000 f879 	bl	800490c <_printf_i>
 800481a:	e7e4      	b.n	80047e6 <_vfiprintf_r+0x1ea>
 800481c:	080050fc 	.word	0x080050fc
 8004820:	08005106 	.word	0x08005106
 8004824:	00000000 	.word	0x00000000
 8004828:	080045d7 	.word	0x080045d7
 800482c:	08005102 	.word	0x08005102

08004830 <_printf_common>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	4616      	mov	r6, r2
 8004836:	4699      	mov	r9, r3
 8004838:	688a      	ldr	r2, [r1, #8]
 800483a:	690b      	ldr	r3, [r1, #16]
 800483c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004840:	4293      	cmp	r3, r2
 8004842:	bfb8      	it	lt
 8004844:	4613      	movlt	r3, r2
 8004846:	6033      	str	r3, [r6, #0]
 8004848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800484c:	4607      	mov	r7, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b10a      	cbz	r2, 8004856 <_printf_common+0x26>
 8004852:	3301      	adds	r3, #1
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	0699      	lsls	r1, r3, #26
 800485a:	bf42      	ittt	mi
 800485c:	6833      	ldrmi	r3, [r6, #0]
 800485e:	3302      	addmi	r3, #2
 8004860:	6033      	strmi	r3, [r6, #0]
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	f015 0506 	ands.w	r5, r5, #6
 8004868:	d106      	bne.n	8004878 <_printf_common+0x48>
 800486a:	f104 0a19 	add.w	sl, r4, #25
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	6832      	ldr	r2, [r6, #0]
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	42ab      	cmp	r3, r5
 8004876:	dc26      	bgt.n	80048c6 <_printf_common+0x96>
 8004878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800487c:	1e13      	subs	r3, r2, #0
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	bf18      	it	ne
 8004882:	2301      	movne	r3, #1
 8004884:	0692      	lsls	r2, r2, #26
 8004886:	d42b      	bmi.n	80048e0 <_printf_common+0xb0>
 8004888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488c:	4649      	mov	r1, r9
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d01e      	beq.n	80048d4 <_printf_common+0xa4>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	6922      	ldr	r2, [r4, #16]
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	2b04      	cmp	r3, #4
 80048a0:	bf02      	ittt	eq
 80048a2:	68e5      	ldreq	r5, [r4, #12]
 80048a4:	6833      	ldreq	r3, [r6, #0]
 80048a6:	1aed      	subeq	r5, r5, r3
 80048a8:	68a3      	ldr	r3, [r4, #8]
 80048aa:	bf0c      	ite	eq
 80048ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b0:	2500      	movne	r5, #0
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bfc4      	itt	gt
 80048b6:	1a9b      	subgt	r3, r3, r2
 80048b8:	18ed      	addgt	r5, r5, r3
 80048ba:	2600      	movs	r6, #0
 80048bc:	341a      	adds	r4, #26
 80048be:	42b5      	cmp	r5, r6
 80048c0:	d11a      	bne.n	80048f8 <_printf_common+0xc8>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e008      	b.n	80048d8 <_printf_common+0xa8>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4652      	mov	r2, sl
 80048ca:	4649      	mov	r1, r9
 80048cc:	4638      	mov	r0, r7
 80048ce:	47c0      	blx	r8
 80048d0:	3001      	adds	r0, #1
 80048d2:	d103      	bne.n	80048dc <_printf_common+0xac>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048dc:	3501      	adds	r5, #1
 80048de:	e7c6      	b.n	800486e <_printf_common+0x3e>
 80048e0:	18e1      	adds	r1, r4, r3
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	2030      	movs	r0, #48	; 0x30
 80048e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ea:	4422      	add	r2, r4
 80048ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f4:	3302      	adds	r3, #2
 80048f6:	e7c7      	b.n	8004888 <_printf_common+0x58>
 80048f8:	2301      	movs	r3, #1
 80048fa:	4622      	mov	r2, r4
 80048fc:	4649      	mov	r1, r9
 80048fe:	4638      	mov	r0, r7
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d0e6      	beq.n	80048d4 <_printf_common+0xa4>
 8004906:	3601      	adds	r6, #1
 8004908:	e7d9      	b.n	80048be <_printf_common+0x8e>
	...

0800490c <_printf_i>:
 800490c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	7e0f      	ldrb	r7, [r1, #24]
 8004912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004914:	2f78      	cmp	r7, #120	; 0x78
 8004916:	4691      	mov	r9, r2
 8004918:	4680      	mov	r8, r0
 800491a:	460c      	mov	r4, r1
 800491c:	469a      	mov	sl, r3
 800491e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004922:	d807      	bhi.n	8004934 <_printf_i+0x28>
 8004924:	2f62      	cmp	r7, #98	; 0x62
 8004926:	d80a      	bhi.n	800493e <_printf_i+0x32>
 8004928:	2f00      	cmp	r7, #0
 800492a:	f000 80d4 	beq.w	8004ad6 <_printf_i+0x1ca>
 800492e:	2f58      	cmp	r7, #88	; 0x58
 8004930:	f000 80c0 	beq.w	8004ab4 <_printf_i+0x1a8>
 8004934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800493c:	e03a      	b.n	80049b4 <_printf_i+0xa8>
 800493e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004942:	2b15      	cmp	r3, #21
 8004944:	d8f6      	bhi.n	8004934 <_printf_i+0x28>
 8004946:	a101      	add	r1, pc, #4	; (adr r1, 800494c <_printf_i+0x40>)
 8004948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800494c:	080049a5 	.word	0x080049a5
 8004950:	080049b9 	.word	0x080049b9
 8004954:	08004935 	.word	0x08004935
 8004958:	08004935 	.word	0x08004935
 800495c:	08004935 	.word	0x08004935
 8004960:	08004935 	.word	0x08004935
 8004964:	080049b9 	.word	0x080049b9
 8004968:	08004935 	.word	0x08004935
 800496c:	08004935 	.word	0x08004935
 8004970:	08004935 	.word	0x08004935
 8004974:	08004935 	.word	0x08004935
 8004978:	08004abd 	.word	0x08004abd
 800497c:	080049e5 	.word	0x080049e5
 8004980:	08004a77 	.word	0x08004a77
 8004984:	08004935 	.word	0x08004935
 8004988:	08004935 	.word	0x08004935
 800498c:	08004adf 	.word	0x08004adf
 8004990:	08004935 	.word	0x08004935
 8004994:	080049e5 	.word	0x080049e5
 8004998:	08004935 	.word	0x08004935
 800499c:	08004935 	.word	0x08004935
 80049a0:	08004a7f 	.word	0x08004a7f
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	602a      	str	r2, [r5, #0]
 80049ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b4:	2301      	movs	r3, #1
 80049b6:	e09f      	b.n	8004af8 <_printf_i+0x1ec>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	0607      	lsls	r7, r0, #24
 80049be:	f103 0104 	add.w	r1, r3, #4
 80049c2:	6029      	str	r1, [r5, #0]
 80049c4:	d501      	bpl.n	80049ca <_printf_i+0xbe>
 80049c6:	681e      	ldr	r6, [r3, #0]
 80049c8:	e003      	b.n	80049d2 <_printf_i+0xc6>
 80049ca:	0646      	lsls	r6, r0, #25
 80049cc:	d5fb      	bpl.n	80049c6 <_printf_i+0xba>
 80049ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049d2:	2e00      	cmp	r6, #0
 80049d4:	da03      	bge.n	80049de <_printf_i+0xd2>
 80049d6:	232d      	movs	r3, #45	; 0x2d
 80049d8:	4276      	negs	r6, r6
 80049da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049de:	485a      	ldr	r0, [pc, #360]	; (8004b48 <_printf_i+0x23c>)
 80049e0:	230a      	movs	r3, #10
 80049e2:	e012      	b.n	8004a0a <_printf_i+0xfe>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	1d19      	adds	r1, r3, #4
 80049ea:	6029      	str	r1, [r5, #0]
 80049ec:	0605      	lsls	r5, r0, #24
 80049ee:	d501      	bpl.n	80049f4 <_printf_i+0xe8>
 80049f0:	681e      	ldr	r6, [r3, #0]
 80049f2:	e002      	b.n	80049fa <_printf_i+0xee>
 80049f4:	0641      	lsls	r1, r0, #25
 80049f6:	d5fb      	bpl.n	80049f0 <_printf_i+0xe4>
 80049f8:	881e      	ldrh	r6, [r3, #0]
 80049fa:	4853      	ldr	r0, [pc, #332]	; (8004b48 <_printf_i+0x23c>)
 80049fc:	2f6f      	cmp	r7, #111	; 0x6f
 80049fe:	bf0c      	ite	eq
 8004a00:	2308      	moveq	r3, #8
 8004a02:	230a      	movne	r3, #10
 8004a04:	2100      	movs	r1, #0
 8004a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0a:	6865      	ldr	r5, [r4, #4]
 8004a0c:	60a5      	str	r5, [r4, #8]
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	bfa2      	ittt	ge
 8004a12:	6821      	ldrge	r1, [r4, #0]
 8004a14:	f021 0104 	bicge.w	r1, r1, #4
 8004a18:	6021      	strge	r1, [r4, #0]
 8004a1a:	b90e      	cbnz	r6, 8004a20 <_printf_i+0x114>
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	d04b      	beq.n	8004ab8 <_printf_i+0x1ac>
 8004a20:	4615      	mov	r5, r2
 8004a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a26:	fb03 6711 	mls	r7, r3, r1, r6
 8004a2a:	5dc7      	ldrb	r7, [r0, r7]
 8004a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a30:	4637      	mov	r7, r6
 8004a32:	42bb      	cmp	r3, r7
 8004a34:	460e      	mov	r6, r1
 8004a36:	d9f4      	bls.n	8004a22 <_printf_i+0x116>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d10b      	bne.n	8004a54 <_printf_i+0x148>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	07de      	lsls	r6, r3, #31
 8004a40:	d508      	bpl.n	8004a54 <_printf_i+0x148>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	6861      	ldr	r1, [r4, #4]
 8004a46:	4299      	cmp	r1, r3
 8004a48:	bfde      	ittt	le
 8004a4a:	2330      	movle	r3, #48	; 0x30
 8004a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a54:	1b52      	subs	r2, r2, r5
 8004a56:	6122      	str	r2, [r4, #16]
 8004a58:	f8cd a000 	str.w	sl, [sp]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	aa03      	add	r2, sp, #12
 8004a60:	4621      	mov	r1, r4
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7ff fee4 	bl	8004830 <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d14a      	bne.n	8004b02 <_printf_i+0x1f6>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	b004      	add	sp, #16
 8004a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	4833      	ldr	r0, [pc, #204]	; (8004b4c <_printf_i+0x240>)
 8004a80:	2778      	movs	r7, #120	; 0x78
 8004a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	6829      	ldr	r1, [r5, #0]
 8004a8a:	061f      	lsls	r7, r3, #24
 8004a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a90:	d402      	bmi.n	8004a98 <_printf_i+0x18c>
 8004a92:	065f      	lsls	r7, r3, #25
 8004a94:	bf48      	it	mi
 8004a96:	b2b6      	uxthmi	r6, r6
 8004a98:	07df      	lsls	r7, r3, #31
 8004a9a:	bf48      	it	mi
 8004a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa0:	6029      	str	r1, [r5, #0]
 8004aa2:	bf48      	it	mi
 8004aa4:	6023      	strmi	r3, [r4, #0]
 8004aa6:	b91e      	cbnz	r6, 8004ab0 <_printf_i+0x1a4>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f023 0320 	bic.w	r3, r3, #32
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	e7a7      	b.n	8004a04 <_printf_i+0xf8>
 8004ab4:	4824      	ldr	r0, [pc, #144]	; (8004b48 <_printf_i+0x23c>)
 8004ab6:	e7e4      	b.n	8004a82 <_printf_i+0x176>
 8004ab8:	4615      	mov	r5, r2
 8004aba:	e7bd      	b.n	8004a38 <_printf_i+0x12c>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	6826      	ldr	r6, [r4, #0]
 8004ac0:	6961      	ldr	r1, [r4, #20]
 8004ac2:	1d18      	adds	r0, r3, #4
 8004ac4:	6028      	str	r0, [r5, #0]
 8004ac6:	0635      	lsls	r5, r6, #24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0x1c4>
 8004acc:	6019      	str	r1, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0x1ca>
 8004ad0:	0670      	lsls	r0, r6, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0x1c0>
 8004ad4:	8019      	strh	r1, [r3, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	4615      	mov	r5, r2
 8004adc:	e7bc      	b.n	8004a58 <_printf_i+0x14c>
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	602a      	str	r2, [r5, #0]
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7fb fb90 	bl	8000210 <memchr>
 8004af0:	b108      	cbz	r0, 8004af6 <_printf_i+0x1ea>
 8004af2:	1b40      	subs	r0, r0, r5
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	2300      	movs	r3, #0
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	e7aa      	b.n	8004a58 <_printf_i+0x14c>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	462a      	mov	r2, r5
 8004b06:	4649      	mov	r1, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	47d0      	blx	sl
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d0ad      	beq.n	8004a6c <_printf_i+0x160>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	d413      	bmi.n	8004b3e <_printf_i+0x232>
 8004b16:	68e0      	ldr	r0, [r4, #12]
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	4298      	cmp	r0, r3
 8004b1c:	bfb8      	it	lt
 8004b1e:	4618      	movlt	r0, r3
 8004b20:	e7a6      	b.n	8004a70 <_printf_i+0x164>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d09d      	beq.n	8004a6c <_printf_i+0x160>
 8004b30:	3501      	adds	r5, #1
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	9903      	ldr	r1, [sp, #12]
 8004b36:	1a5b      	subs	r3, r3, r1
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dcf2      	bgt.n	8004b22 <_printf_i+0x216>
 8004b3c:	e7eb      	b.n	8004b16 <_printf_i+0x20a>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	f104 0619 	add.w	r6, r4, #25
 8004b44:	e7f5      	b.n	8004b32 <_printf_i+0x226>
 8004b46:	bf00      	nop
 8004b48:	0800510d 	.word	0x0800510d
 8004b4c:	0800511e 	.word	0x0800511e

08004b50 <__sflush_r>:
 8004b50:	898a      	ldrh	r2, [r1, #12]
 8004b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	4605      	mov	r5, r0
 8004b58:	0710      	lsls	r0, r2, #28
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	d458      	bmi.n	8004c10 <__sflush_r+0xc0>
 8004b5e:	684b      	ldr	r3, [r1, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dc05      	bgt.n	8004b70 <__sflush_r+0x20>
 8004b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dc02      	bgt.n	8004b70 <__sflush_r+0x20>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d0f9      	beq.n	8004b6a <__sflush_r+0x1a>
 8004b76:	2300      	movs	r3, #0
 8004b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b7c:	682f      	ldr	r7, [r5, #0]
 8004b7e:	6a21      	ldr	r1, [r4, #32]
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	d032      	beq.n	8004bea <__sflush_r+0x9a>
 8004b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	075a      	lsls	r2, r3, #29
 8004b8a:	d505      	bpl.n	8004b98 <__sflush_r+0x48>
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	1ac0      	subs	r0, r0, r3
 8004b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b92:	b10b      	cbz	r3, 8004b98 <__sflush_r+0x48>
 8004b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b96:	1ac0      	subs	r0, r0, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b9e:	6a21      	ldr	r1, [r4, #32]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b0      	blx	r6
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	d106      	bne.n	8004bb8 <__sflush_r+0x68>
 8004baa:	6829      	ldr	r1, [r5, #0]
 8004bac:	291d      	cmp	r1, #29
 8004bae:	d82b      	bhi.n	8004c08 <__sflush_r+0xb8>
 8004bb0:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <__sflush_r+0x108>)
 8004bb2:	410a      	asrs	r2, r1
 8004bb4:	07d6      	lsls	r6, r2, #31
 8004bb6:	d427      	bmi.n	8004c08 <__sflush_r+0xb8>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	6062      	str	r2, [r4, #4]
 8004bbc:	04d9      	lsls	r1, r3, #19
 8004bbe:	6922      	ldr	r2, [r4, #16]
 8004bc0:	6022      	str	r2, [r4, #0]
 8004bc2:	d504      	bpl.n	8004bce <__sflush_r+0x7e>
 8004bc4:	1c42      	adds	r2, r0, #1
 8004bc6:	d101      	bne.n	8004bcc <__sflush_r+0x7c>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b903      	cbnz	r3, 8004bce <__sflush_r+0x7e>
 8004bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8004bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd0:	602f      	str	r7, [r5, #0]
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d0c9      	beq.n	8004b6a <__sflush_r+0x1a>
 8004bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	d002      	beq.n	8004be4 <__sflush_r+0x94>
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff fa8a 	bl	80040f8 <_free_r>
 8004be4:	2000      	movs	r0, #0
 8004be6:	6360      	str	r0, [r4, #52]	; 0x34
 8004be8:	e7c0      	b.n	8004b6c <__sflush_r+0x1c>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b0      	blx	r6
 8004bf0:	1c41      	adds	r1, r0, #1
 8004bf2:	d1c8      	bne.n	8004b86 <__sflush_r+0x36>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0c5      	beq.n	8004b86 <__sflush_r+0x36>
 8004bfa:	2b1d      	cmp	r3, #29
 8004bfc:	d001      	beq.n	8004c02 <__sflush_r+0xb2>
 8004bfe:	2b16      	cmp	r3, #22
 8004c00:	d101      	bne.n	8004c06 <__sflush_r+0xb6>
 8004c02:	602f      	str	r7, [r5, #0]
 8004c04:	e7b1      	b.n	8004b6a <__sflush_r+0x1a>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	e7ad      	b.n	8004b6c <__sflush_r+0x1c>
 8004c10:	690f      	ldr	r7, [r1, #16]
 8004c12:	2f00      	cmp	r7, #0
 8004c14:	d0a9      	beq.n	8004b6a <__sflush_r+0x1a>
 8004c16:	0793      	lsls	r3, r2, #30
 8004c18:	680e      	ldr	r6, [r1, #0]
 8004c1a:	bf08      	it	eq
 8004c1c:	694b      	ldreq	r3, [r1, #20]
 8004c1e:	600f      	str	r7, [r1, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2300      	movne	r3, #0
 8004c24:	eba6 0807 	sub.w	r8, r6, r7
 8004c28:	608b      	str	r3, [r1, #8]
 8004c2a:	f1b8 0f00 	cmp.w	r8, #0
 8004c2e:	dd9c      	ble.n	8004b6a <__sflush_r+0x1a>
 8004c30:	6a21      	ldr	r1, [r4, #32]
 8004c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c34:	4643      	mov	r3, r8
 8004c36:	463a      	mov	r2, r7
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b0      	blx	r6
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	dc06      	bgt.n	8004c4e <__sflush_r+0xfe>
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e78e      	b.n	8004b6c <__sflush_r+0x1c>
 8004c4e:	4407      	add	r7, r0
 8004c50:	eba8 0800 	sub.w	r8, r8, r0
 8004c54:	e7e9      	b.n	8004c2a <__sflush_r+0xda>
 8004c56:	bf00      	nop
 8004c58:	dfbffffe 	.word	0xdfbffffe

08004c5c <_fflush_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	690b      	ldr	r3, [r1, #16]
 8004c60:	4605      	mov	r5, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	b913      	cbnz	r3, 8004c6c <_fflush_r+0x10>
 8004c66:	2500      	movs	r5, #0
 8004c68:	4628      	mov	r0, r5
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	b118      	cbz	r0, 8004c76 <_fflush_r+0x1a>
 8004c6e:	6a03      	ldr	r3, [r0, #32]
 8004c70:	b90b      	cbnz	r3, 8004c76 <_fflush_r+0x1a>
 8004c72:	f7ff f863 	bl	8003d3c <__sinit>
 8004c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f3      	beq.n	8004c66 <_fflush_r+0xa>
 8004c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c80:	07d0      	lsls	r0, r2, #31
 8004c82:	d404      	bmi.n	8004c8e <_fflush_r+0x32>
 8004c84:	0599      	lsls	r1, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_fflush_r+0x32>
 8004c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8a:	f7ff fa32 	bl	80040f2 <__retarget_lock_acquire_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4621      	mov	r1, r4
 8004c92:	f7ff ff5d 	bl	8004b50 <__sflush_r>
 8004c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c98:	07da      	lsls	r2, r3, #31
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	d4e4      	bmi.n	8004c68 <_fflush_r+0xc>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	059b      	lsls	r3, r3, #22
 8004ca2:	d4e1      	bmi.n	8004c68 <_fflush_r+0xc>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca6:	f7ff fa25 	bl	80040f4 <__retarget_lock_release_recursive>
 8004caa:	e7dd      	b.n	8004c68 <_fflush_r+0xc>

08004cac <__swhatbuf_r>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	b096      	sub	sp, #88	; 0x58
 8004cb8:	4615      	mov	r5, r2
 8004cba:	461e      	mov	r6, r3
 8004cbc:	da0d      	bge.n	8004cda <__swhatbuf_r+0x2e>
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004cce:	2340      	movne	r3, #64	; 0x40
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	6031      	str	r1, [r6, #0]
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	b016      	add	sp, #88	; 0x58
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	466a      	mov	r2, sp
 8004cdc:	f000 f8f8 	bl	8004ed0 <_fstat_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	dbec      	blt.n	8004cbe <__swhatbuf_r+0x12>
 8004ce4:	9901      	ldr	r1, [sp, #4]
 8004ce6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004cea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004cee:	4259      	negs	r1, r3
 8004cf0:	4159      	adcs	r1, r3
 8004cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf6:	e7eb      	b.n	8004cd0 <__swhatbuf_r+0x24>

08004cf8 <__smakebuf_r>:
 8004cf8:	898b      	ldrh	r3, [r1, #12]
 8004cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cfc:	079d      	lsls	r5, r3, #30
 8004cfe:	4606      	mov	r6, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	d507      	bpl.n	8004d14 <__smakebuf_r+0x1c>
 8004d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	6163      	str	r3, [r4, #20]
 8004d10:	b002      	add	sp, #8
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	ab01      	add	r3, sp, #4
 8004d16:	466a      	mov	r2, sp
 8004d18:	f7ff ffc8 	bl	8004cac <__swhatbuf_r>
 8004d1c:	9900      	ldr	r1, [sp, #0]
 8004d1e:	4605      	mov	r5, r0
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff fa5d 	bl	80041e0 <_malloc_r>
 8004d26:	b948      	cbnz	r0, 8004d3c <__smakebuf_r+0x44>
 8004d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2c:	059a      	lsls	r2, r3, #22
 8004d2e:	d4ef      	bmi.n	8004d10 <__smakebuf_r+0x18>
 8004d30:	f023 0303 	bic.w	r3, r3, #3
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	e7e3      	b.n	8004d04 <__smakebuf_r+0xc>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	6020      	str	r0, [r4, #0]
 8004d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d44:	81a3      	strh	r3, [r4, #12]
 8004d46:	9b00      	ldr	r3, [sp, #0]
 8004d48:	6163      	str	r3, [r4, #20]
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	6120      	str	r0, [r4, #16]
 8004d4e:	b15b      	cbz	r3, 8004d68 <__smakebuf_r+0x70>
 8004d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 f8cd 	bl	8004ef4 <_isatty_r>
 8004d5a:	b128      	cbz	r0, 8004d68 <__smakebuf_r+0x70>
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	431d      	orrs	r5, r3
 8004d6c:	81a5      	strh	r5, [r4, #12]
 8004d6e:	e7cf      	b.n	8004d10 <__smakebuf_r+0x18>

08004d70 <__swbuf_r>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	460e      	mov	r6, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	4605      	mov	r5, r0
 8004d78:	b118      	cbz	r0, 8004d82 <__swbuf_r+0x12>
 8004d7a:	6a03      	ldr	r3, [r0, #32]
 8004d7c:	b90b      	cbnz	r3, 8004d82 <__swbuf_r+0x12>
 8004d7e:	f7fe ffdd 	bl	8003d3c <__sinit>
 8004d82:	69a3      	ldr	r3, [r4, #24]
 8004d84:	60a3      	str	r3, [r4, #8]
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	071a      	lsls	r2, r3, #28
 8004d8a:	d525      	bpl.n	8004dd8 <__swbuf_r+0x68>
 8004d8c:	6923      	ldr	r3, [r4, #16]
 8004d8e:	b31b      	cbz	r3, 8004dd8 <__swbuf_r+0x68>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	6922      	ldr	r2, [r4, #16]
 8004d94:	1a98      	subs	r0, r3, r2
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	b2f6      	uxtb	r6, r6
 8004d9a:	4283      	cmp	r3, r0
 8004d9c:	4637      	mov	r7, r6
 8004d9e:	dc04      	bgt.n	8004daa <__swbuf_r+0x3a>
 8004da0:	4621      	mov	r1, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	f7ff ff5a 	bl	8004c5c <_fflush_r>
 8004da8:	b9e0      	cbnz	r0, 8004de4 <__swbuf_r+0x74>
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60a3      	str	r3, [r4, #8]
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	701e      	strb	r6, [r3, #0]
 8004db8:	6962      	ldr	r2, [r4, #20]
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d004      	beq.n	8004dca <__swbuf_r+0x5a>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	07db      	lsls	r3, r3, #31
 8004dc4:	d506      	bpl.n	8004dd4 <__swbuf_r+0x64>
 8004dc6:	2e0a      	cmp	r6, #10
 8004dc8:	d104      	bne.n	8004dd4 <__swbuf_r+0x64>
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f7ff ff45 	bl	8004c5c <_fflush_r>
 8004dd2:	b938      	cbnz	r0, 8004de4 <__swbuf_r+0x74>
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f806 	bl	8004dec <__swsetup_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d0d5      	beq.n	8004d90 <__swbuf_r+0x20>
 8004de4:	f04f 37ff 	mov.w	r7, #4294967295
 8004de8:	e7f4      	b.n	8004dd4 <__swbuf_r+0x64>
	...

08004dec <__swsetup_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <__swsetup_r+0xac>)
 8004df0:	4605      	mov	r5, r0
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	460c      	mov	r4, r1
 8004df6:	b118      	cbz	r0, 8004e00 <__swsetup_r+0x14>
 8004df8:	6a03      	ldr	r3, [r0, #32]
 8004dfa:	b90b      	cbnz	r3, 8004e00 <__swsetup_r+0x14>
 8004dfc:	f7fe ff9e 	bl	8003d3c <__sinit>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e06:	0718      	lsls	r0, r3, #28
 8004e08:	d422      	bmi.n	8004e50 <__swsetup_r+0x64>
 8004e0a:	06d9      	lsls	r1, r3, #27
 8004e0c:	d407      	bmi.n	8004e1e <__swsetup_r+0x32>
 8004e0e:	2309      	movs	r3, #9
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e034      	b.n	8004e88 <__swsetup_r+0x9c>
 8004e1e:	0758      	lsls	r0, r3, #29
 8004e20:	d512      	bpl.n	8004e48 <__swsetup_r+0x5c>
 8004e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e24:	b141      	cbz	r1, 8004e38 <__swsetup_r+0x4c>
 8004e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d002      	beq.n	8004e34 <__swsetup_r+0x48>
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7ff f962 	bl	80040f8 <_free_r>
 8004e34:	2300      	movs	r3, #0
 8004e36:	6363      	str	r3, [r4, #52]	; 0x34
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	2300      	movs	r3, #0
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0308 	orr.w	r3, r3, #8
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	b94b      	cbnz	r3, 8004e68 <__swsetup_r+0x7c>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5e:	d003      	beq.n	8004e68 <__swsetup_r+0x7c>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f7ff ff48 	bl	8004cf8 <__smakebuf_r>
 8004e68:	89a0      	ldrh	r0, [r4, #12]
 8004e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e6e:	f010 0301 	ands.w	r3, r0, #1
 8004e72:	d00a      	beq.n	8004e8a <__swsetup_r+0x9e>
 8004e74:	2300      	movs	r3, #0
 8004e76:	60a3      	str	r3, [r4, #8]
 8004e78:	6963      	ldr	r3, [r4, #20]
 8004e7a:	425b      	negs	r3, r3
 8004e7c:	61a3      	str	r3, [r4, #24]
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	b943      	cbnz	r3, 8004e94 <__swsetup_r+0xa8>
 8004e82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e86:	d1c4      	bne.n	8004e12 <__swsetup_r+0x26>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	0781      	lsls	r1, r0, #30
 8004e8c:	bf58      	it	pl
 8004e8e:	6963      	ldrpl	r3, [r4, #20]
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	e7f4      	b.n	8004e7e <__swsetup_r+0x92>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e7f7      	b.n	8004e88 <__swsetup_r+0x9c>
 8004e98:	20000098 	.word	0x20000098

08004e9c <memmove>:
 8004e9c:	4288      	cmp	r0, r1
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	eb01 0402 	add.w	r4, r1, r2
 8004ea4:	d902      	bls.n	8004eac <memmove+0x10>
 8004ea6:	4284      	cmp	r4, r0
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	d807      	bhi.n	8004ebc <memmove+0x20>
 8004eac:	1e43      	subs	r3, r0, #1
 8004eae:	42a1      	cmp	r1, r4
 8004eb0:	d008      	beq.n	8004ec4 <memmove+0x28>
 8004eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eba:	e7f8      	b.n	8004eae <memmove+0x12>
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d100      	bne.n	8004ec6 <memmove+0x2a>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ece:	e7f7      	b.n	8004ec0 <memmove+0x24>

08004ed0 <_fstat_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d07      	ldr	r5, [pc, #28]	; (8004ef0 <_fstat_r+0x20>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	f7fc fa36 	bl	800134e <_fstat>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d102      	bne.n	8004eec <_fstat_r+0x1c>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	b103      	cbz	r3, 8004eec <_fstat_r+0x1c>
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	bd38      	pop	{r3, r4, r5, pc}
 8004eee:	bf00      	nop
 8004ef0:	200002ec 	.word	0x200002ec

08004ef4 <_isatty_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_isatty_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fc fa35 	bl	800136e <_isatty>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_isatty_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_isatty_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200002ec 	.word	0x200002ec

08004f14 <_sbrk_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_sbrk_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fc fa3e 	bl	80013a0 <_sbrk>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_sbrk_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_sbrk_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	200002ec 	.word	0x200002ec

08004f34 <memcpy>:
 8004f34:	440a      	add	r2, r1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f3c:	d100      	bne.n	8004f40 <memcpy+0xc>
 8004f3e:	4770      	bx	lr
 8004f40:	b510      	push	{r4, lr}
 8004f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d1f9      	bne.n	8004f42 <memcpy+0xe>
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <_realloc_r>:
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	4680      	mov	r8, r0
 8004f56:	4614      	mov	r4, r2
 8004f58:	460e      	mov	r6, r1
 8004f5a:	b921      	cbnz	r1, 8004f66 <_realloc_r+0x16>
 8004f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	4611      	mov	r1, r2
 8004f62:	f7ff b93d 	b.w	80041e0 <_malloc_r>
 8004f66:	b92a      	cbnz	r2, 8004f74 <_realloc_r+0x24>
 8004f68:	f7ff f8c6 	bl	80040f8 <_free_r>
 8004f6c:	4625      	mov	r5, r4
 8004f6e:	4628      	mov	r0, r5
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f74:	f000 f81b 	bl	8004fae <_malloc_usable_size_r>
 8004f78:	4284      	cmp	r4, r0
 8004f7a:	4607      	mov	r7, r0
 8004f7c:	d802      	bhi.n	8004f84 <_realloc_r+0x34>
 8004f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f82:	d812      	bhi.n	8004faa <_realloc_r+0x5a>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4640      	mov	r0, r8
 8004f88:	f7ff f92a 	bl	80041e0 <_malloc_r>
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d0ed      	beq.n	8004f6e <_realloc_r+0x1e>
 8004f92:	42bc      	cmp	r4, r7
 8004f94:	4622      	mov	r2, r4
 8004f96:	4631      	mov	r1, r6
 8004f98:	bf28      	it	cs
 8004f9a:	463a      	movcs	r2, r7
 8004f9c:	f7ff ffca 	bl	8004f34 <memcpy>
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f7ff f8a8 	bl	80040f8 <_free_r>
 8004fa8:	e7e1      	b.n	8004f6e <_realloc_r+0x1e>
 8004faa:	4635      	mov	r5, r6
 8004fac:	e7df      	b.n	8004f6e <_realloc_r+0x1e>

08004fae <_malloc_usable_size_r>:
 8004fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb2:	1f18      	subs	r0, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bfbc      	itt	lt
 8004fb8:	580b      	ldrlt	r3, [r1, r0]
 8004fba:	18c0      	addlt	r0, r0, r3
 8004fbc:	4770      	bx	lr
	...

08004fc0 <_init>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr

08004fcc <_fini>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr
